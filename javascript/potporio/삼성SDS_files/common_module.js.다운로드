
/** common_module */
document.querySelector("html").setAttribute(
    "data-country",
    window.location.pathname.split("/")[1]
);

//console.log("import:: common_module.js");
var pluginObject = {};
var globalObject = {};
var eventObject = {};
var pluginReference = {};
var fo = {
    addPlugin : function(fn, selector){
        !pluginObject[fn.name] ? pluginObject[fn.name] = fn : null;
        //registPlugin(fn, selector);
    },
    addGlobal : function(object, name){
        if(typeof object === 'object'){
            !globalObject[name] ? globalObject[name] = object : null;
        }
    },
    addEvent : function(object, name){
        if(typeof object === 'object'){
            //!eventObject[name] ? eventObject[name] = object : null;
            $.extend(eventObject, object);
        }
    }
}

var customModule = {
    readyModule: [
        { selector: ".M01_A", plugin: "M01_A" },
        { selector: ".M01_B", plugin: "M01_B" },
        { selector: ".M01_C", plugin: "M01_C" },
        { selector: ".M01_D", plugin: "M01_D" },
        { selector: ".M04_B", plugin: "M04_B" },
        { selector: ".M04_D", plugin: "M04_D" },
        { selector: ".M05_A", plugin: "M05_A" },
        { selector: ".M06_A", plugin: "M06_A" },
        { selector: ".M06_B", plugin: "M06_B" },
        { selector: ".M06_C", plugin: "M06_C" },
        { selector: ".M07_A", plugin: "M07_A" },
        { selector: ".M09_A", plugin: "M09_A" },
        { selector: ".M09_B", plugin: "M09_B" },
        { selector: ".M11_A", plugin: "M11_A" },
        { selector: ".M21_A", plugin: "M21_A" },
        { selector: ".M21_B", plugin: "M21_B" },
        { selector: ".M22_A", plugin: "M22_A" },
        { selector: ".M26_A", plugin: "M26_A" },
        { selector: ".M22_A .txt_ty", plugin: "M21_B" }, // 예외 케이스: 이미 개발 전달된 내용이라 바꿀 수 없음
    ],
    loadModule: [
        // { selector: ".M01_A", plugin: "M01_A" },        
        { selector: ".M26_B", plugin: "M26_B" },
    ]
};

$(document).ready(function(){
    var country = $("html").attr("data-country") || "en";
    if(country === "us" || country === "eu" || country === "in"){
        changeOnclickStr();
        changeAnchorTarget();
    }

    $('[data-fn]').each(function(i, el){
        var fnName = $(this).data('fn');
        if(!$(this).data("plugin")){
            //console.log("Create data-plugin:: "+fnName);
            if(pluginObject.hasOwnProperty(fnName)){
                $(this).data("plugin", new pluginObject[fnName]($(el)));
            }
        }
    })

    if(!customModule.readyModule.length) return;
    customModule.readyModule.map(function(module){
        $(module.selector).each(function(i, el){
            var fnName = module.plugin;
            if(!$(this).data("plugin")){
                //console.log("Create data-plugin:: "+fnName);
                if(pluginObject.hasOwnProperty(fnName)){
                    $(this).data("plugin", new pluginObject[fnName]($(el)));
                }
            }
        });
    });
});

$(window).load(function(){
    var country = $("html").attr("data-country") || "en";
    if(country === "us" || country === "eu" || country === "in"){
        changeOnclickStr();
        changeAnchorTarget();
    }

    $('[data-load-fn]').each(function(i, el){
        var fnName = $(this).data('loadFn');
        if(!$(this).data("plugin")){
            //console.log("Create data-load-plugin:: "+fnName);
            if(pluginObject.hasOwnProperty(fnName)){
                $(this).data("plugin", new pluginObject[fnName]($(el)));
            }
        }
    })

    if(!customModule.loadModule.length) return;
    customModule.loadModule.map(function(module){
        $(module.selector).each(function(i, el){
            var fnName = module.plugin;
            if(!$(this).data("plugin")){
                //console.log("Create data-plugin:: "+fnName);
                if(pluginObject.hasOwnProperty(fnName)){
                    $(this).data("plugin", new pluginObject[fnName]($(el)));
                }
            }
        });
    });
});

/* Timer Constructor */
function Timer(func, delay) {
    this.handle = 0;
    this.func = func;
    this.delay = delay;
}
Timer.prototype.start = function(newDelay) {
    if (typeof newDelay !== "undefined") {
        this.delay = newDelay;
    }
    this.stop();
    this.handle = setTimeout(this.func, this.delay);
    return this;
};
Timer.prototype.stop = function(newDelay) {
    if (this.handle) {
        clearTimeout(this.handle);
        this.handle = 0;
    }
    return this;
};

/* String Function */
String.prototype.dashToCamel = function(){
    return this.replace(/(\-[a-z])/g, function($1){return $1.toUpperCase().replace('-','');});
};

String.prototype.camelToDash = function(){
    return this.replace(/([A-Z])/g, function($1){return "-"+$1.toLowerCase();});
};

String.prototype.camelToUnderscore = function(){
    return this.replace(/([A-Z])/g, function($1){return "_"+$1.toLowerCase();});
};

/* XML Parsing, XML selector */
function OBJtoXML(obj) {
    var xml = '';
    for (var prop in obj) {
        xml += obj[prop] instanceof Array ? '' : "<" + prop + ">";
        if (obj[prop] instanceof Array) {
            for (var array in obj[prop]) {
                xml += "<" + prop + ">";
                xml += OBJtoXML(new Object(obj[prop][array]));
                xml += "</" + prop + ">";
            }
        } else if (typeof obj[prop] == "object") {
            xml += OBJtoXML(new Object(obj[prop]));
        } else {
            xml += obj[prop];
        }
        xml += obj[prop] instanceof Array ? '' : "</" + prop + ">";
    }
    var xml = xml.replace(/<\/?[0-9]{1,}>/g, '');
    return xml
}

function getChildByNodeName(node, nodeName){
    var children = node.childNodes;
    if(children.length){
        for(var i=0; i<children.length; i++){
            if(children[i].nodeName == nodeName){
                return children[i];
            }
        }
        return false;
    }else{
        return false;
    }
}

/* mobile check */
function isMobileDevice(){
    return isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ? true : false;    
}

/* url check (onclick) */
function changeOnclickStr() { 
    var lang = $("html").attr("lang") || "en";
    var selector = document.querySelectorAll("*[onclick]");
    var reg = new RegExp("(window\.location\.href='\/en\/)(.*)(.html')","gi");

    for (var index = 0; index < selector.length; index++) {
        var element = selector[index];
        var onclickStr = element.getAttribute("onclick");
        
        // 정규식 통과하지않으면 다음 for 문으로 넘어감
        if(onclickStr.match(reg) === null){
            continue;
        }

        // Example
        // asis : outbound('/en/ai/ai.html','');window.location.href='/en/ai/ai.html'
        // tobe : outbound('/en/ai/ai.html','');window.open('/en/ai/ai.html', '_blank')
        var changeStr = onclickStr.replace(reg, function(match, p1, p2, p3) {
            return "window.open('/en/"+ p2 +"', '_blank');";
        });
        
        // 기존 이벤트 삭제
        element.onclick = null;
        // 신규 이벤트 추가
        element.setAttribute("onclick", changeStr);
        // title="new window"
        element.setAttribute("title", langSet[lang]["openWindow"]);
    }
}

/* url check (href) */
function changeAnchorTarget(){
    var lang = $("html").attr("lang") || "en";
    var selector = document.querySelectorAll("*[href]");

    for (var index = 0; index < selector.length; index++) {
        var element = selector[index];
        var hrefStr = element.getAttribute("href");
        
        // href 가 "/en/" 으로 시작하지않으면 다음 for 문으로 넘어감
        if(hrefStr.indexOf("/en/") !== 0){
            continue;
        }

        // target="_blank"
        element.setAttribute("target", "_blank");
        // title="new window"
        element.setAttribute("title", langSet[lang]["openWindow"]);
    }
}

/* tab_swiper */
function tabSwiper(el) {
    _proto = tabSwiper.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.slide;
    this.$container = this.$el.hasClass("swiper-container") ? this.$el : this.$el.find(".swiper-container");
    this.$wrapper = this.$container.find(".swiper-wrapper");
    this.$items = this.$container.find(".swiper-slide");
    this.$prevBtn = this.$container.find(".btn_prev");
    this.$nextBtn = this.$container.find(".btn_next");

    var _this = this; // tab_swiper

    _proto.init = function(){
        // Swiper bug { slidesPerView: "auto" }
        // Get an array of wrong numbers: slidesGrid / slidesSizesGrid / snapGrid
        // document ready(X), window load(O)
        //console.log("init:: tabSwiper");

        // Set Swiper
        setSwiper(this);

        // Add Event
        if(!this.addEventFlag){
            this.addEvent();
        }
    }

    // Add Event
    _proto.addEvent = function(){
        // "onSliderMove"
        // Callback function, will be executed when user touch and move finger over Swiper and move it. Receives swiper instance and 'touchmove' event as an arguments.
        _this.slide.on("onSliderMove", function(swiper, event) {
            setControlStyle(_this, swiper);
        });

        // "onTransitionEnd"
        // Callback function, will be executed after transition. Receives slider instance as an argument.
        _this.slide.on("onTransitionEnd", function(swiper) {
            setControlStyle(_this, swiper);
        });

        // prev button click
        _this.$prevBtn.on("click", function(){
            var position = _this.slide.translate + _this.slide.size;

            _this.slide.setWrapperTranslate(_this.slide.translate);

            if(position < 0){
                _this.slide.isEnd = false;
                _this.slide.translate = position;
                _this.$wrapper.css({
                    "transform": "translate3d("+ position +"px, 0px, 0px)",
                    "transition": "transform 0.4s"
                });
            }else{
                _this.slide.slideTo(0);
            }
            
            setControlStyle(_this, _this.slide);
        });

        // next button click
        _this.$nextBtn.on("click", function(){
            var position = _this.slide.translate - _this.slide.size;
            var lastTranslate = -1 * _this.slide.snapGrid[_this.slide.snapGrid.length-1];

            _this.slide.setWrapperTranslate(_this.slide.translate);

            if(position > lastTranslate){
                _this.slide.isEnd = false;
                _this.slide.translate = position;
                _this.$wrapper.css({
                    "transform": "translate3d("+ position +"px, 0px, 0px)",
                    "transition": "transform 0.4s"
                });
            }else{
                _this.slide.slideTo(_this.$items.length);
            }

            setControlStyle(_this, _this.slide);
        })

        // window resize
        $(window).on("resize", function(){
            setSlideStyle(_this, _this.slide);
        })

    }

    // Set Swiper
    function setSwiper(_plugin){
        _plugin.slide = new Swiper(_plugin.$container, {
            a11y: true,
            loop : false,
            centeredSlides: false,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesVisibility :true,
            keyboardControl: true,
            slidesOffsetBefore: 0,
            slidesOffsetAfter: 0,
            onInit: function(swiper){
                setSlideStyle(_this, swiper);
                setControlStyle(_this, swiper);
            }
        });
    }

    // slide, prev button, next button style
    function setSlideStyle(_plugin, swiper){
        var slideWidth = 0;
        swiper.slidesSizesGrid.map(function(width){
            slideWidth += width;
        })

        if(slideWidth <= swiper.size){
            // fixed wrapper
            _plugin.$wrapper.not(".isFixed") && _plugin.$wrapper.addClass("isFixed").css("transform", "translate3d(0px, 0px, 0px);");
            // button disabled
            _plugin.$prevBtn.not("[disabled]") && _plugin.$prevBtn.attr("disabled", "disabled").addClass("disabled");
            _plugin.$nextBtn.not("[disabled]") && _plugin.$nextBtn.attr("disabled", "disabled").addClass("disabled");
        }else{
            // fixed wrapper
            _plugin.$wrapper.is(".isFixed") && _plugin.$wrapper.removeClass("isFixed").css("transform", "translate3d(0px, 0px, 0px);");
            // button disabled
            _plugin.$prevBtn.is("[disabled]") && _plugin.$prevBtn.removeAttr("disabled").removeClass("disabled");
            _plugin.$nextBtn.is("[disabled]") && _plugin.$nextBtn.removeAttr("disabled").removeClass("disabled");
        }
    }

    // prev button, next button style
    function setControlStyle(_plugin, swiper){
        // prev button
        if(swiper.translate >= 0){
            _plugin.$prevBtn.attr("disabled", "disabled").addClass("disabled");
        }else{
            _plugin.$prevBtn.removeAttr("disabled").removeClass("disabled");
        }

        // next button
        if(swiper.isEnd){
            _plugin.$nextBtn.attr("disabled", "disabled").addClass("disabled");
        }else{
            _plugin.$nextBtn.removeAttr("disabled").removeClass("disabled");
        }
    }
    
    this.init();
}

fo.addPlugin(tabSwiper);

/* imgLiquid */
$(document).ready(function(){
    var option = {
        fill:true,
        horizontalAlign:"center",
        verticalAlign:"center"
    };
    $('.module_ty').find('.img .img_p, .img .img_m').imgLiquid(option);
    $('.visual_img').find('.img_p, .img_m').imgLiquid(option);
    $('.board_ty').find('.img .img_p').imgLiquid(option);
});

/* moduleAlign(matchHeight) */
$(function(){
    var moduleAlignResizeTimer = new Timer(function(){
        moduleAlign();
    }, 110);

    $(document).ready(function(){
        moduleAlign();
    });

    $(window).resize(function(){
        moduleAlignResizeTimer.start();
    });
});

function moduleAlign(){
    if ( $('.module_ty').length < 1 ) return;

    var $module_ty = $('.module_ty');
    var option = {
        initial: {
            tbyRow: true,
            remove: false
        },
        remove: {
            remove: true
        }
    }

    if (window.innerWidth < 601){
        $module_ty.each(function() {
            $(this).find('.md_tit').matchHeight(option.remove);
            $(this).find('.md_tit02').matchHeight(option.remove);
            $(this).find('.md_txt').matchHeight(option.remove);
            $(this).find('.md_txt02').matchHeight(option.remove);
        });
    }else{
        $module_ty.each(function() {
            $(this).find('.md_tit').matchHeight(option.initial);
            $(this).find('.md_tit02').matchHeight(option.initial);
            $(this).find('.md_txt').matchHeight(option.initial);
            $(this).find('.md_txt02').matchHeight(option.initial);
        });
    }
}

/** like, share **/
$(function(){
    // 참고
    // 1. $shareBox 여는 부분은 ion_common 또는 html 내부에 존재
    // 2. 하단 md_pop_share, md_pop_share02, md_pop_share03 사용되는곳 없는것으로 추정됨
    // 3. $shareBox.on("focusin") setTimeout 사용 이유: $shareBox 포커스 들어오는 시점이 각각 다름
    var $shareBox = $(".md_share_box");
    var $shareDim = $(".md_share_dimd");
    var $shareCloseBtn = $(".md_btn_share_close");

    var resizeTimer = new Timer(function(){                    
        mdShareClose();
    }, 100);

    // share dim
    $shareDim.click(function(){
        mdShareClose();
		return false;
    });

    // share close
    $shareCloseBtn.on({
        "click": function(){
            mdShareClose();
            return false;
        },
        "keydown": function(e){
            if(e.keyCode == 9){
                $shareBox.focus();
                return false;
            }
        }
    })

    $shareBox.on("focusin", function(e){
        e.stopPropagation();
        e.preventDefault();

        setTimeout(function(){
            $('.md_btn_share.on').length && $('.md_btn_share.on').addClass("isShareBoxTarget");
            $('.btn_md_share.on').length && $('.btn_md_share.on').addClass("isShareBoxTarget");
            $('.add_share.on').length && $('.add_share.on').addClass("isShareBoxTarget");
        }, 0);
    })
    
    // share box
	$shareBox.keydown(function(e){
        e.stopPropagation();

        var isShift = window.event.shiftKey ? true : false;
        var $focusItems = $shareBox.parent().find("a:visible, button:visible, [tabindex]");

        if($focusItems.first().is($(e.target))){
            if(e.keyCode == 9 && isShift) $focusItems.last().focus();
        }

        if($focusItems.last().is($(e.target))){
            if(e.keyCode == 9 && !isShift) $focusItems.first().focus();
        }
    });

    $(window).on({
        "resize" : function (){
            resizeTimer.start();
        },
        "scroll": function(){
            resizeTimer.start();
        }
    });
});

function md_pop_share(obj){
    if($(obj).hasClass('on')){
        $(obj).removeClass('on');
        $('.md_share_area').removeClass('on').removeClass('off');
        $('.md_btn_share').removeClass('on');
    }else{        
        var offsetPosition = $(obj).offset();
        var w = ($(window).width() - $('#wrap').width()) * 0.5;
		var x = offsetPosition.left + 30 - w;
		var y = offsetPosition.top - 2;
        $('#md_share_area').addClass('on');
		$('#md_share_area').css('left', x).css('top', y);
        $('.md_share_box').attr('tabindex', 0);
        $('.md_share_box').focus();

        $('.md_btn_share').removeClass('on');
        $(obj).addClass('on');
    }
    return false;
}
function md_pop_share02(obj){
    if($(obj).hasClass('on')){
        $(obj).removeClass('on');
        $('.md_share_area').removeClass('on').removeClass('off');
        $('.btn_md_share').removeClass('on');
    }else{        
        var offsetPosition = $(obj).offset();
        var w = ($(window).width() - $('#wrap').width()) * 0.5;
        var x = $(window).width() - offsetPosition.left + 10 - w;
        var y = offsetPosition.top - 23;
        $('#md_share_area').addClass('on');
        $('#md_share_area').css('right', x).css('top', y);
        $('.md_share_box').attr('tabindex', 0);
        $('.md_share_box').focus();

        $('.btn_md_share').removeClass('on');
        $(obj).addClass('on');
    }
    return false;
}
function md_pop_share03(obj){
    if($(obj).hasClass('on')){
        $(obj).removeClass('on');
        $('.md_share_area').removeClass('on').removeClass('off');
        $('.btn_md_share').removeClass('on');
    }else{
        var offsetPosition = $(obj).offset();
		var x = offsetPosition.left + 160;
		var y = offsetPosition.top - 0;
        $('#md_share_area').addClass('on');
        $('#md_share_area').css('left', x).css('top', y);
        $('.md_share_box').attr('tabindex', 0);
        $('.md_share_box').focus();

        $('.btn_md_share').removeClass('on');
        $(obj).addClass('on');
    }
    return false;
}

function mdShareClose(){
    if(!$('.md_share_area').hasClass("on")) return;
    if( $('.md_share_area').hasClass("off")) return;

    $('.md_share_area').addClass('off');

    $('.isShareBoxTarget').length && $('.isShareBoxTarget').focus();

    setTimeout(function(){
        $('.md_btn_share.on').length && $('.md_btn_share.on').removeClass('on');
        $('.btn_md_share.on').length && $('.btn_md_share.on').removeClass('on');
        $('.add_share.on').length && $('.add_share.on').removeClass('on');

        $('.isShareBoxTarget').length && $('.isShareBoxTarget').removeClass("isShareBoxTarget");
    }, 0);
    
    setTimeout(function(){
        $('.md_share_area').removeClass('on').removeClass('off');
    }, 250);
}

/** 접근성 **/
$(function(){
    $('#container .cont').attr('tabindex', 0);

    /** Footer **/
    var $footer = $("#footer");
    var $lang = $('.etc_lang');
    var $drop = $('.etc_drop');
    
    function footerRez(){
        if(!$lang.hasClass("on")) return;

        $lang.removeClass('on');
        $lang.find('.sub_menu').hide();
    }

    // 실제 사용되지않는 코드
    // function footerEvent(){
    //     $drop.find("a,button,[tabindex]").on("focusout", function(e){
    //         if(!$drop.find(e.relatedTarget).length && $drop.hasClass("on")){
    //             $drop.removeClass('on');
    //             $drop.find('.in').hide();   
    //         }
    //     })
        
    //     $lang.find("a,button,[tabindex]").on("focusout", function(e){
    //         if(!$lang.find(e.relatedTarget).length && $lang.hasClass("on")){
    //             $lang.removeClass('on');
    //             $lang.find('.sub_menu').hide();
    //         }
    //     })
    // }

    var footerRez_resizeTimer = new Timer(function(){
        footerRez();
    }, 100);

    $(document).ready(function(){
        // footerEvent();
        footerRez();
    });

    $(window).resize(function(){
        footerRez_resizeTimer.start();
    });
});

/* 페이지 내 스크롤 앵커 (btn_anchor) */
$(function(){
    $('.btn_anchor').click(function(e){
        e.preventDefault();
		var t = $(this).attr("href");
        if ( $(t).length ){
            $('html, body').stop().animate({
                scrollTop:$(t).offset().top - 50
            }, 800, function(){
                $(t).get(0).focus({preventScroll:false});
                $('html,body').scrollTop($(t).offset().top - 50);
            });
        }
    });
});


/* 상단 띠배너 */
function initTailBox(){
    if(!$('.tail_wrap').length) return;

    var tailResizeTImer = new Timer(function(){
        $('.tail_wrap:visible').closest('body').addClass('tail_chk');
    },100);

    $(window).on('resize', function(){
        tailResizeTImer.start();
    });

    $('.tail_wrap .btn_close').click(function(e){
        e.preventDefault();
        $('.tail_wrap').hide();
        $('body').removeClass('tail_chk');
        $('.M01_A_cont').trigger('initHeight');
        if (window['GNB']) GNB.setHeightRightContainer();

        if ( $('#seelater').is(':checked') ) {
            $.cookie('tailboxSeeLater', 'Y', { expires: 1, path: '/' });
        }
        
    });
    
    $('.tail_wrap:visible').closest('body').addClass('tail_chk');
    //$(window).scrollTop(0);

    if (window['GNB']) GNB.setSticky();
}
    
/* Lang Set */
// sample:
// var lang = $("html").attr("lang") || "en";
// langSet[lang]["slide"]["playStr"]
var langSet = {
    "ko": {
        "countryCode" : "kr",    
        "history" : {
            "activeStr":"최근방문기록 열기",
            "title" : "Visit History",
            "desc" : "최근방문한 페이지가 최대 30개 저장됩니다.",
            "clearall" : "전체삭제",
            "close" : "최근방문기록 닫기",
            "emptyHistory" : "방문한 이력이 없습니다."
        },
        "search" : {
            "activeStr":"검색창 열기",
            "placeholder" : "검색어를 입력하세요",
            "search" : "검색",
            "close" : "검색창 닫기",
            "clear" : "검색어 삭제"
        },
        "rnb" : {
            "activeStr":"전체메뉴 열기",
            "inactiveStr":"전체메뉴 닫기"
        },        
        "menuState":{
            "activeStr":"메뉴열기",
            "inactiveStr":"메뉴닫기"
        },        
        "words":{
            "summary":"개요"
        },
        "slide":{
            "prevStr":"이전",
            "nextStr":"다음",
            "playStr": "재생",
            "pauseStr": "멈춤"
        },
        "expanded":{
            "trueStr":"숨기기",
            "falseStr":"더보기",
            "trueStr_M08_B":"자료 숨기기",
            "falseStr_M08_B":"자료 더보기"
        },
        "seeLater": "오늘 하루 보지 않기",
        "openWindow": "새창열림"
    },
    "en":{
        "countryCode" : "en",        
        "history" : {
            "activeStr":"Open History",
            "title" : "Visit History",
            "desc" : "Up to 30 recently visited pages are logged.",
            "clearall" : "Clear All",
            "close" : "Close History",
            "emptyHistory" : "No Visit history."
        },
        "search" : {
            "activeStr":"Open search",
            "placeholder" : "Search",
            "search" : "Search",
            "close" : "Close Search",
            "clear" : "Clear"
        },
        "rnb" : {
            "activeStr":"Open Right Global Navigator",
            "inactiveStr":"Close Right Global Navigator"
        },
        "menuState":{
            "activeStr":"Open Menu",
            "inactiveStr":"Close Menu"
        },       
        "words":{
            "summary":"Summary"
        },
        "slide":{
            "prevStr":"Prev",
            "nextStr":"Next",
            "playStr": "Play",
            "pauseStr": "Stop"
        },
        "expanded":{
            "trueStr":"Close",
            "falseStr":"See more",
            "trueStr_M08_B":"Close",
            "falseStr_M08_B":"See more"
        },
        "seeLater": "Check to not see again",
        "openWindow": "new window"
    },
    "zh":{
        "countryCode" : "cn",
        "history" : {
            "activeStr":"打开",
            "title" : "Visit History",
            "desc" : "最多记录30个最近访问的页面。",
            "clearall" : "删除所有",
            "close" : "关闭",
            "emptyHistory" : "没有访问历史."
        },
        "search" : {
            "activeStr":"打开",
            "placeholder" : "搜索",
            "search" : "关键词搜索",
            "close" : "关闭",
            "clear" : "删除"
        },
        "rnb" : {
            "activeStr":"open right global navigator",
            "inactiveStr":"close right global navigator"
        },
        "menuState":{
            "activeStr":"打开",
            "inactiveStr":"关闭"
        },        
        "words":{
            "summary":"概括"
        },
        "slide":{
            "prevStr":"Prev",
            "nextStr":"Next",
            "playStr": "Play",
            "pauseStr": "Stop"
        },
        "expanded":{
            "trueStr":"Close",
            "falseStr":"See more",
            "trueStr_M08_B":"Close",
            "falseStr_M08_B":"See more"
        },
        "seeLater": "Check to not see again",
        "openWindow": "new window"
    },
    "pt":{
        "countryCode" : "pt",
        "history" : {
            "activeStr":"história aberta",
            "title" : "Visit History",
            "desc" : "Até 30 páginas visitadas recentemente são registradas.",
            "clearall" : "limpar tudo",
            "close" : "história próxima",
            "emptyHistory" : "sem histórico de visitas."
        },
        "search" : {
            "activeStr":"busca aberta",
            "placeholder" : "buscar",
            "search" : "buscar",
            "close" : "fechar busca",
            "clear" : "limpar"
        },
        "rnb" : {
            "activeStr":"open right global navigator",
            "inactiveStr":"close right global navigator"
        },
        "menuState":{
            "activeStr":"open Menu",
            "inactiveStr":"close Menu"
        },        
        "words":{
            "summary":"summary"
        },
        "slide":{
            "prevStr":"Prev",
            "nextStr":"Next",
            "playStr": "Play",
            "pauseStr": "Stop"
        },
        "expanded":{
            "trueStr":"Close",
            "falseStr":"See more",
            "trueStr_M08_B":"Close",
            "falseStr_M08_B":"See more"
        },
        "seeLater": "Check to not see again",
        "openWindow": "Abrir uma nova"
    }
}
