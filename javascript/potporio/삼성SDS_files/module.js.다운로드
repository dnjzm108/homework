/** M00_A | GNB */
function M00_A(el) {
    _proto = M00_A.prototype;
    _this = this;

    this.lang = $("html").attr("lang") || "en";
    this.country = $("html").attr("data-country") || "en";
    this.$el = el;
    this.data = {
        'history' : true
    };
    this.menuData;
    this.menuDataXml;
    this.breadData = [];  
    this.gnbTopLinks;    
    this.featureData;
    this.offeringData;
    this.currentPageType;
    this.gnbType = "main";
    this.isOfferingMain = false;
    this.isMobile = getCurrentWidth() > 1024 ? false : true;
    this.isMobileDevice = isMobileDevice();
    this.isFocus = false;
    this.historyMaxCount = 30;
    this.historyStorageKey = 'visitHistory_' + this.lang + '_' + this.country;

    var checkDone = {};
    var currentPage;   
    var gnbMainTransparentTimer;
    var menuCloseTimer;
    var subMenuCloseTimer;
    var rnbMenuCloseTimer;
    var historyMenuCloseTimer;
    var gnbResizeTimer;
    var detectResizeHandlerTimer;


    _proto.init = function(){
        //console.log("init:: M00_A");
        //console.log(this.data);

        // data 값 설정
        $.extend( _this.data, _this.$el.data() );

        try {
            this.getData(this.data.url, function(){
                _this.setSticky();

                _this.drawHistory();
                _this.writeHistory();
                _this.setTextByCountry();   // 언어별 text 설정
                

                //_this.setHeightRightContainer();
            });
        }catch(e){
            console.log(e);
        }

        // setTimer(childpanel off)
        var $gnb = $('.M00_A');
        gnbMainTransparentTimer = new Timer(function(){
            if ( $('body').hasClass('hid_s') ) return;
            if (_this.$el.find('.gnb ul.menu > li.on').length == 0 ){
                $gnb.removeClass('mc_chk');
            }
        },100);
        menuCloseTimer = new Timer(this.menuClose, 100);
        subMenuCloseTimer = new Timer(this.subMenuClose, 100);
        rnbMenuCloseTimer = new Timer(this.rnbMenuClose, 100);
        historyMenuCloseTimer = new Timer(this.historyMenuClose, 100);
        gnbResizeTimer = new Timer(this.resizeHandler, 100);
        
        $(window).load(function(){
            _this.gnbChildpanelStyle("windowLoad");
        });

        $(window).on('resize', function(){
            _this.isMobile = getCurrentWidth() > 1024 ? false : true;   // detect mobile resolution
            _this.isMobileDevice = isMobileDevice();    // detect mobile device
        });
       
    }

    _proto.isIos = function(){
        var userAgent = navigator.userAgent.toLowerCase();
        var IS_IPHONE = /iphone/i.test(userAgent);
        var IS_IPAD = /iPad/i.test(userAgent);
        var IS_IPOD = /iPod/i.test(userAgent);
        
        return IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;
    }

    _proto.setGnbHeight = function(){
        var height;
        if (this.gnbType == "offering"){
            if ( this.isOfferingMain ) {
                height = this.$el.height();    
            } else {
                height = this.$el.height() + ( $('.brandcolor').is(':visible') ? $('.brandcolor').height() : 0 );
            }
        } else if (this.gnbType == "normal" || this.gnbType == "static") {
            height = this.$el.height();
        }
        
        //console.log('M00_A Height :: ' + height);

        if ( this.gnbType != "main" ){
            $('#header').css({
                'height' : height + 'px'
            });
        }
    }

    _proto.setSticky = function(){

        _this.setGnbHeight();

        this.$el.css({
            'position': 'fixed',
            'width' : '100%',
            'z-index' : '7000'
        });

        var scroll = $(window).scrollTop();
        var $wrap = $('#wrap');
        var hasTailBox = $('body').hasClass('tail_chk');
        var tailHeight = 0;
        if ( _this.isMobile ) hasTailBox = false;
        if (hasTailBox) {
            tailHeight = $('.tail_wrap').height();
        }


        if ( scroll > $('#header').offset().top ){

            if ( hasTailBox ){
                /*
                _this.$el.css({
                    'visibility' : 'hidden'
                });
                */
                _this.$el.css({
                    'top' : '-'+ tailHeight + 'px'
                });
                /*
                setTimeout(function(){
                    _this.$el.css({
                        'visibility' : ''
                    });
                },200);
                */
            } else {
                _this.$el.css({
                    'top' : '0px'
                });
            }
            
        } else {
            if ( hasTailBox ) {
                /*_this.$el.css({ 
                    'visibility' : 'hidden'
                });
                */
                _this.$el.css({
                    'top' : ($('#header').offset().top - scroll - tailHeight ) + 'px'
                });
                /*
                setTimeout(function(){
                    _this.$el.css({
                        'visibility' : ''
                    });
                },200);
                */
            } else {
                _this.$el.css({ 
                    'top' : '0px'
                });
            }
        }

        if ( $(window).scrollTop() > 0 ){
            $wrap.removeClass('scroll_chk');
        } else {
            $wrap.addClass('scroll_chk');
        }
    }

    _proto.getData = function(dataUrl, callback){
        var methodType = dataUrl.indexOf("/data_ajax/") < 0 ? "POST" : "GET";
        $.ajax({
            url: dataUrl,
            method: methodType,
            data: null,
            dataType: "json",
            success: function(data) {
                _this.setupMenu(data);

                if(callback){
                    callback();
                }                
            },
            error: function(){
                console.log('GNB getData Ajax error :::::::::::::::::::' , arguments);
            }
        });
    }

    _proto.setupMenu = function(data){
        this.menuData = data;
        this.menuDataXml = $.parseXML( OBJtoXML({"root":data}).replace(/&/g, '&amp;') );
        var target = this.menuDataXml.getElementsByTagName("menuId");
        var type;
        for(var i=0; i<target.length; i++){
            var idNode = target[i];
            if(idNode.textContent == this.data.current){                
                currentPage = idNode;                
                type = getChildByNodeName(idNode.parentNode, "type").textContent;
                _this.currentPageType = type;
                type ? type = type.split("_")[0] : null;
                break;
            }
        }
        if(type == "offering"){
            this.gnbType = "offering";
            this.setBreadData();        
        } else if ( type == 'normal' ){
            this.gnbType = "normal";
            this.setBreadData();
        } else {    // 메인 화면, static 화면             
            if ( type == 'static' ) {
                this.gnbType = 'static';
                this.setBreadData();
            } else {
                this.gnbType = 'main';
            }
            $.get(this.data.urlFeature, function(data) {
                _this.featureData = data;
                _this.drawGnb();
            });
        }
    }

    _proto.setBreadData = function(data){
        if(!this.menuDataXml && data){
            this.menuDataXml = $.parseXML( OBJtoXML({"root":data}).replace(/&/g, '&amp;') );
        }
        var target = this.menuDataXml.getElementsByTagName("menuId");

        //console.log('setBreadData');
        //console.log('this.menuDataXml ::' , this.menuDataXml);

        for(var i=0; i<target.length; i++){
            var idNode = target[i];
            if(idNode.textContent == this.data.current){
                var tit = getChildByNodeName(idNode.parentNode, "title").textContent;
                var url = getChildByNodeName(idNode.parentNode, "url").textContent;
                var tar = getChildByNodeName(idNode.parentNode, "target").textContent;
                _this.breadData.push({"title":tit, "url":url || null, "target":tar || null});
                // breadcrumb 모두 수집시 tree 가져옴
                if(getChildByNodeName(idNode.parentNode, "type").textContent == "offering_main"){
                    this.getOfferingTree(idNode.textContent);
                    this.drawBread();
                } else if(getChildByNodeName(idNode.parentNode, "type").textContent == "normal_main"){
                    this.getOfferingTree(idNode.textContent);
                    this.drawBread();
                } else if(getChildByNodeName(idNode.parentNode, "type").textContent == "static"){ 
                    this.drawBread();
                } else{  // breadcrumb 수집
                    getParentTarget(idNode.parentNode);
                }
                break;
            }
        }
        
        function getParentTarget(node){
            var parent = node.parentNode;
            if(parent && getChildByNodeName(parent, "type")){ //부모가 있고 type 속성이 있을시
                //console.log(parent);
                // "오퍼링" 메뉴 패스
                if(getChildByNodeName(parent, "type").textContent == "offering_cate"){
                    getParentTarget(parent);
                    return;
                }
                /*
                if(getChildByNodeName(parent, "type").textContent == "normal_cate"){
                    getParentTarget(parent);
                    return;
                }
                */

                if(getChildByNodeName(parent, "type").textContent == "offering_main"){
                    //console.log('color' , getChildByNodeName(parent, "color").textContent);
                    _this.offeringColor = getChildByNodeName(parent, "color").textContent;
                    _this.getOfferingTree(getChildByNodeName(parent, "menuId").textContent);                    
                }

                if(getChildByNodeName(parent, "type").textContent == "normal_main"){
                    _this.getOfferingTree(getChildByNodeName(parent, "menuId").textContent);
                }

                var tit = getChildByNodeName(parent, "title").textContent;
                var url = getChildByNodeName(parent, "url").textContent;
                var tar = getChildByNodeName(parent, "target").textContent;
                _this.breadData.unshift({"title":tit||null, "url":url||null, "target":tar||null});
                getParentTarget(parent);
            }else{
                return;
            }
        }
        if(this.breadData.length) this.drawBread();
        //console.log("breadData::", this.breadData);
    }

    _proto.drawBread = function(){
        
        var len = this.breadData.length;
        var current = this.breadData[len -1];
        var color = _this.offeringColor;

        var htmlStr = '<div class="brandcolor" style="background-color:'+ color +'"><div class="inner">';

        if (this.gnbType == "normal" || this.gnbType == "static"){
            htmlStr = '<div class="brandcolor normal"><div class="inner">';

            //console.log('normal this.breadData :::::::::::::::::::', this.breadData);
        }
        if (this.gnbType == "offering"){
            // offering main 일때
            if ( this.offeringData.menuId == $(currentPage).text() ){
                htmlStr = '<div class="brandcolor normal"><div class="inner">';
                this.isOfferingMain = true;
            } else {
                htmlStr += '<p class="title">'+current.title+'</p>';
            }

            //console.log('offering this.breadData :::::::::::::::::', this.breadData);
        }
        //htmlStr += '<div class="breadcrumb"><a href="/'+ langSet[ _this.lang ].countryCode + '/index.html"><span>Home</span></a>';
        htmlStr += '<nav class="breadcrumb"><a href="'+ _this.getHomeUrl() +'"><span>Home</span></a>';
        for(var i=0; i<len; i++){
            if(i == (len-1) || !this.breadData[i].url){
                htmlStr += '<span>'+this.breadData[i].title+'</span>';
            }else{
                htmlStr += '<a href="'+ this.breadData[i].url +'" target="'+ this.breadData[i].target +'" ><span>'+this.breadData[i].title+'</span></a>';
            }
        }
        htmlStr += '</nav></div></div>';
        // 스티키 제어를 위해 append 위치 바뀔 수 있음
        !$(".brandcolor").length ? $('#header').append(htmlStr) : null;
        $('#header .brandcolor').css({ 'top' : this.$el.height() + 'px' });
        /*
        if (this.gnbType == "normal"){
            !$(".brandcolor").length ? $('#header').after(htmlStr) : null;//$(".brandcolor").replaceWith(htmlStr)
        } else {
            !$(".brandcolor").length ? this.$el.append(htmlStr) : null;//$(".brandcolor").replaceWith(htmlStr)
        }
        */
    }

    _proto.writeHistory = function(){
        if (_this.data.history == false ) return;

        // 라이브러리 > 리소스  || 컨텐츠 타입 구분값   백서,프레젠테이션,기술소개 등
        var isresEyebrow = !!_this.getUrlParams().resEyebrow ? true : false;

        var storage = window.localStorage;
        var historyArray = JSON.parse( storage.getItem(_this.historyStorageKey) );
        var historyObj = {};

        if ( !!historyArray == false || Array.isArray(historyArray) == false ) {
            historyArray = [];
        }
        
        // 중복 페이지 검색
        var isOverlap = false;
        if (historyArray.length > 0){
            historyArray.map(function(data){
                if (data.menuId == _this.data.current && data.url == window.location.href) isOverlap = true;
            });
        }
        if (isOverlap) return;
        
        $('meta[property*="og:"]').each(function(){
            var $this = $(this);
            var key = $this.attr('property').split(':')[1];

            historyObj[key] = $this.attr('content');
        });

        var locationTxt = (function(breadData){
            var location = '';
            for(var i=0; i<breadData.length; i++){
                if (i == breadData.length - 1){
                    location += breadData[i].title;
                } else {
                    location += breadData[i].title + ' > ';
                }
            }
            return breadData.length == 0 ? 'Home' : location;
        })(_this.breadData);

        historyObj['menuId'] = _this.data.current;
        historyObj['location'] = locationTxt;
        historyObj['url'] = window.location.href;
        // 리소스 컨텐츠일때 title 값 컨텐츠 타입으로 변경
        if (isresEyebrow){
            historyObj['location'] = decodeURI(_this.getUrlParams().resEyebrow);
        }

        if (historyArray.length > _this.historyMaxCount - 1){
            historyArray.pop();
        }
        // add history
        if (historyArray.length == 0){
            historyArray.push(historyObj);
        } else {
            historyArray.splice(0, 0, historyObj);
        }
        
        // set data
        storage.setItem( _this.historyStorageKey, JSON.stringify( historyArray ) );

        //console.log('historyObj', historyObj);
        //console.log('historyArray', historyArray);
    }

    _proto.clearHistory = function(){        
        window.localStorage.removeItem( _this.historyStorageKey );
        _this.drawHistory();
        _this.writeHistory();
    }

    _proto.getHistoryData = function(){
        return JSON.parse( window.localStorage.getItem(_this.historyStorageKey) );
    }

    _proto.drawHistory = function(){
        var historyDataArray = this.getHistoryData();        
        var $history;

        if (Array.isArray(historyDataArray) && historyDataArray.length) {
            $history = $('<ul></ul>');
            for(var i=0; i<historyDataArray.length; i++){
                var item = historyDataArray[i];
                var itemStr =   '<li>';
                itemStr +=          '<div class="summary">';
                itemStr +=              '<span class="bread" title="'+item.location+'">'+item.location+'</span>';
                itemStr +=              '<p class="title"><a href="'+item.url+'">'+item.title+'</a></p>';
                itemStr +=          '</div>';
                itemStr +=          '<div class="pic">';
                itemStr +=              '<a href="'+item.url+'" target="_self"><img src="'+item.image+'" alt="'+item.title+'"></a>';
                itemStr +=          '</div></li>';

                if ( i == 0 && item.menuId == _this.data.current && item.url == window.location.href ){
                    
                } else {
                    $history.append(itemStr);
                }
                //console.log('item', item);
            }

            if ( historyDataArray.length == 1 && historyDataArray[0].menuId == _this.data.current  && historyDataArray[0].url == window.location.href){
                $history = $('<p class="empty-text">'+ langSet[_this.lang].history.emptyHistory +'</p>');
                $(".history .btn-clear").hide();
            } else {
                $(".history .btn-clear").show();
            }

        } else {
            $history = $('<p class="empty-text">'+ langSet[_this.lang].history.emptyHistory +'</p>');
            $(".history .btn-clear").hide();
        }

        this.$el.find(".pages").empty().append($history);
        //console.log('DRAW HISTORY ::::::::::::::::::::::::::::::');
    }

    _proto.getOfferingTree = function(menuId){
        //console.log(menuId);
        for(var group in this.menuData){
            var menuGroup = this.menuData[group];
            for(var depth1 in menuGroup){
                var d1Items = menuGroup[depth1].items || null;
                var d1PanelType = menuGroup[depth1].panelType;
                if(d1Items && d1PanelType == "offering" && this.gnbType == "offering"){
                    for(var depth2 in d1Items){
                        var d2MenuId = d1Items[depth2].menuId;
                        if(d2MenuId == menuId){
                            this.offeringData = d1Items[depth2];
                            this.drawGnb();
                            break;
                        }
                    }
                }

                if(d1Items && d1PanelType == "normal" && this.gnbType == "normal"){
                    for(var depth2 in d1Items){
                        var d2MenuId = d1Items[depth2].menuId;
                        if(d2MenuId == menuId){
                            this.offeringData = d1Items[depth2];
                            this.drawGnb();
                            break;
                        }
                    }
                }
            }
        }
    }

    _proto.getHomeUrl = function(){
        return ( typeof(indexURL) !== 'undefined' ? indexURL : '/'+ langSet[ _this.lang ].countryCode + '/index.html' );
    }

    _proto.drawGnb = function(){        
        //console.log("drawGnb:: "+this.gnbType);

        /* gnb code */
        var $cnt = $('<div class="hd-cnt"></div>');
        $cnt.append('<p class="logo"><a href="'+ _this.getHomeUrl() +'"><span class="blind">SAMSUNG SDS</span></a></p>'); // Modify | 2020-08-20 | M00_A | h1.logo → p.logo 변경
        var $gnsb;

        if(this.gnbType == 'main' || this.gnbType == 'static' ){
            for(var group in this.menuData){
                var menuGroup = this.menuData[group];
                var $menuUl = $('<ul class="menu '+ String(group).camelToDash() +'">')                                
    
                for(var depth1 in menuGroup){
                    var d1Title = menuGroup[depth1].title;
                    var d1featureIdId = menuGroup[depth1].featureId;
                    var d1PanelType = menuGroup[depth1].panelType;
                    var panelStyle = menuGroup[depth1].style;
                    var d1Items = menuGroup[depth1].items || null;
                    var d1Url = menuGroup[depth1].url || "#";
                    var d1Target = menuGroup[depth1].target || null;
                    var $menuItem_d1 = $('<li'+(!d1Items?' class="no-child"':'')+'><div class="title"><a href="'+d1Url+'" '+(d1Target?'target="'+d1Target+'"':'')+'>'+d1Title+'</a></div></li>');
                    var $menuPanel_d1;
                    var $menuPanel_d2;
                    var $menuPanel_d3;
    

                    if(d1PanelType == "offering" && d1Items){
                        $menuPanel_d1 = $('<div class="childpanel '+panelStyle+'"><div class="inner"><ul class="items"></ul></div></div>');
                        $menuItem_d1.append($menuPanel_d1);
                        $menuPanel_d2 = $menuPanel_d1.find(".items").eq(0);
    
                        //d1PanelType 분기 없앰
                        for(var depth2 in d1Items){
                            var d2Title = d1Items[depth2].title;
                            var d2Url = d1Items[depth2].url || "#";
                            var d2Target = d1Items[depth2].target || "_self";                            
                            var d2Items = null;

                            if ( d1Items[depth2].type == "offering_main" ){
                                try {
                                    d2Items = !!d1Items[depth2].items && d1Items[depth2].items[0].items;   // offering cate get
                                } 
                                catch (e) {
                                    console.log('error', e);
                                }
                                
                            } else {
                                d2Items = !!d1Items[depth2].items && d1Items[depth2].items;
                            }
                            var $menuItem_d2 = $('<li></li>');
                            var $menuItem_d2_tit = d2Url == "#" ? '<span>'+d2Title+'</span>':'<a href="'+d2Url+'" target="'+d2Target+'">'+d2Title+'</a>';
                            $menuItem_d2.append('<div class="title">'+$menuItem_d2_tit+'</div>');
    
                            if(d2Items){
                                $menuPanel_d3 = $('<ul class="items"></ul>');
                                $menuItem_d2.append($menuPanel_d3);
                                for(var depth3 in d2Items){
                                    var d3Title = d2Items[depth3].title;
                                    var d3Url = d2Items[depth3].url || "#";
                                    var d3Target = d2Items[depth3].target || "_self";
                                    var $menuItem_d3 = $('<li><div class="title"><a href="'+d3Url+'" target="'+d3Target+'">'+d3Title+'</a></div></li>');
                                    if ( d2Items[depth3].hidden !== true && d2Items[depth3].onlySUB !== true ){
                                        $menuPanel_d3.append($menuItem_d3);
                                    }
                                }
                            }else{
                                $menuItem_d2.addClass("no-child");
                            }
                            
                            if ( d1Items[depth2].onlyRNB !== true && d1Items[depth2].hidden !== true && d1Items[depth2].onlySUB !== true ){
                                this.checkMainGnbInOfferingItem(d2Title, $menuPanel_d3); // 20210209 추가
                                $menuPanel_d2.append($menuItem_d2);
                            }
                        }
                        
                        // feature 그려줘야함
                        var $feature = $(this.featureData).find("#"+d1featureIdId+">.feature");
                        if($feature.length){
                            $menuPanel_d1.find(".inner").append($feature);
                        }

                        $menuUl.attr('role', 'tablist');
                        $menuItem_d1.find('>.title > a').attr('role', 'tab')
                                                        .attr('id', 'tab_' + panelStyle)
                                                        .attr('aria-selected', 'false')
                                                        .attr('aria-controls', 'panel_' + panelStyle);

                        $menuItem_d1.find('.childpanel').attr('role', 'tabpanel')
                                                        .attr('id', 'panel_' + panelStyle)
                                                        .attr('aria-labelledby', 'tab_' + panelStyle);
                        
                        
                    }

                    if(d1PanelType == "normal" && d1Items){
                        $menuPanel_d1 = $('<div class="childpanel '+panelStyle+'"><div class="inner"><ul class="items"></ul></div></div>');
                        $menuItem_d1.append($menuPanel_d1);
                        $menuPanel_d2 = $menuPanel_d1.find(".items").eq(0);
    
                        //d1PanelType 분기 없앰

                        if ( panelStyle == "about" ){
                            d1Items = d1Items[0].items;
                            for(var depth2 in d1Items ){
                                var d2Title = d1Items[depth2].title;
                                var d2Url = d1Items[depth2].url || "#";
                                var d2Target = d1Items[depth2].target || "_self";
                                // 1depth오퍼링 하위인 경우 3depth 오퍼링 내용을 표시함                                
                                var d2Items = (d1Items[depth2].type == "normal_main" ? d1Items[depth2].items[0].items : d1Items[depth2].items) || null;
                                var $menuItem_d2 = $('<li></li>');
                                var $menuItem_d2_tit = d2Url == "#" ? '<span>'+d2Title+'</span>':'<a href="'+d2Url+'" target="'+d2Target+'">'+d2Title+'</a>';
                                $menuItem_d2.append('<div class="title">'+$menuItem_d2_tit+'</div>');
        
                                if(d2Items){
                                    $menuPanel_d3 = $('<ul class="items"></ul>');
                                    $menuItem_d2.append($menuPanel_d3);
                                    for(var depth3 in d2Items){
                                        var d3Title = d2Items[depth3].title;
                                        var d3Url = d2Items[depth3].url || "#";
                                        var d3Target = d2Items[depth3].target || "_self";
                                        var $menuItem_d3 = $('<li><div class="title"><a href="'+d3Url+'" target="'+d3Target+'">'+d3Title+'</a></div></li>');
                                        if ( d2Items[depth3].hidden !== true ){
                                            $menuPanel_d3.append($menuItem_d3);
                                        }
                                    }
                                }else{
                                    $menuItem_d2.addClass("no-child");
                                }

                                if ( d1Items[depth2].hidden !== true ){
                                    $menuPanel_d2.append($menuItem_d2);
                                }
                                
                            }
                        } else {
                            for(var depth2 in d1Items){
                                var d2Title = d1Items[depth2].title;
                                var d2Url = d1Items[depth2].url || "#";
                                var d2Target = d1Items[depth2].target || "_self";
                                // 1depth오퍼링 하위인 경우 3depth 오퍼링 내용을 표시함
                                var d2Items = d1Items[depth2].items || null;                                
        
                                if(d2Items){                                   
                                    for(var depth3 in d2Items){
                                        var d3Title = d2Items[depth3].title;
                                        var d3Url = d2Items[depth3].url || "#";
                                        var d3Target = d2Items[depth3].target || "_self";
                                        var $menuItem_d3 = $('<li><div class="title"><a href="'+d3Url+'" target="'+d3Target+'">'+d3Title+'</a></div></li>');
                                        if ( d2Items[depth3].hidden !== true ){
                                            $menuPanel_d2.append($menuItem_d3);
                                        }
                                    }
                                }else{
                                    //$menuItem_d2.addClass("no-child");
                                }
                                //$menuPanel_d2.append($menuItem_d2);
                            }
                        }
                        
                        
                        // feature 그려줘야함
                        var $feature = $(this.featureData).find("#"+d1featureIdId+">.feature");
                        if($feature.length){
                            $menuPanel_d1.find(".inner").append($feature);
                        }

                        $menuUl.attr('role', 'tablist');
                        $menuItem_d1.find('>.title > a').attr('role', 'tab')
                                                        .attr('id', 'tab_' + panelStyle)
                                                        .attr('aria-selected', 'false')
                                                        .attr('aria-controls', 'panel_' + panelStyle);

                        $menuItem_d1.find('.childpanel').attr('role', 'tabpanel')
                                                        .attr('id', 'panel_' + panelStyle)
                                                        .attr('aria-labelledby', 'tab_' + panelStyle);
                        
                    }

                    if (menuGroup[depth1].hidden !== true){
                        $menuUl.append($menuItem_d1);
                    }
                    
                }//for end depth1
                // static page group
                if (group !== 'menuGroup4' && group !== 'menuGroup5') {
                    $cnt.append($menuUl);
                }
            }// for end group

        }// END if gnbType == "main"
        else if(this.gnbType == "offering" || this.gnbType == "normal" ){
            
            //console.log("this.offeringData::",this.offeringData);

            //if (_this.isMobile){
                $gsnbMobile = $('<div class="gsnb mobile '+ (this.gnbType == "normal" ? 'normal' : '') +'"><div class="inner"><div class="title"><a href="#">'+ this.offeringData.title +'</a></div></div></div>');
                $innerMobile = $gsnbMobile.find(">.inner");

                var makedObj = _this.makeMobileGsnb();              
                var $owlContainer = $('<div class="owl-carousel"><div></div></div>');
                $owlContainer.find('>div').eq(0).append(makedObj);
                $innerMobile.append($owlContainer);

            //} else {
                $gsnb = $('<div class="gsnb '+ (this.gnbType == "normal" ? 'normal' : '') +'"><div class="inner"><ul></ul></div></div>');
                $inner = $gsnb.find(">.inner>ul");

                if ( this.offeringData.url ){
                    $inner.append('<li class="offering-cate"><div class="title"><a href="'+ this.offeringData.url +'" target="'+(this.offeringData.target || '_self')+'">'+this.offeringData.title+'</a></div></li>');
                } else {
                    $inner.append('<li class="offering-cate no-link"><div class="title"><a href="#">'+this.offeringData.title+'</a></div></li>');
                }

                for(var i=0;i<this.offeringData.items.length;i++){
                    var cate = this.offeringData.items[i];
                    var $cate = $('<li><div class="title"><a href="'+(cate.url || '#')+'" target="'+(cate.target || '_self')+'">'+cate.title+'</a></div></li>');
                    var $menuPanel_d2;
                    var isCurrentWithin = false;    // 현재 페이지가 해당 그룹에 포함되었는지 확인
                    if(cate.items){                        
                        $menuPanel_d2 = $('<ul class="items"></ul>');                        
                        
                        for(var ii=0;ii < cate.items.length;ii++){                            
                            var sub = cate.items[ii];

                            if (_this.data.current == sub.menuId ) isCurrentWithin = true;

                            var $sub = $('<li><div class="title"><a href="'+(sub.url || '#')+'" target="'+(sub.target || '_self')+'">'+sub.title+'</a></div></li>');
                            var $menuPanel_d3;
                            if(sub.items){
                                // hidden 항목만 들어있는지 확인
                                var isItemsHasOnlyHiddenItem = (function(items){
                                    var result = true;
                                    items.map(function(obj, index, items){
                                        if (!!obj.hidden == false) result = false;
                                    });
                                    return result;
                                })(sub.items);

                                if (isItemsHasOnlyHiddenItem == false){
                                    $sub.addClass("offering-list-sub");
                                }
                                $menuPanel_d3 = $('<ul class="items"></ul>');
                                $sub.append($menuPanel_d3);
                                for(var iii=0;iii < sub.items.length;iii++){
                                    var item = sub.items[iii];

                                    if (_this.data.current == item.menuId ) isCurrentWithin = true;

                                    var $item = $('<li><div class="title"><a href="'+(item.url || '#')+'" target="'+(item.target || '_self')+'">'+item.title+'</a></div></li>');

                                    if (item.hidden !== true){
                                        $menuPanel_d3.append($item);
                                    }
                                }
                            }

                            if (sub.hidden !== true && sub.onlyMainShow !== true) {
                                $menuPanel_d2.append($sub);
                            }
                        }
                        // hidden 항목만 들어있는지 확인
                        var isItemsHasOnlyHiddenItem = (function(items){
                            var result = true;
                            items.map(function(obj, index, items){
                                if (!!obj.hidden == false) result = false;
                            });
                            return result;
                        })(cate.items);

                        if (isItemsHasOnlyHiddenItem == false){
                            $cate.addClass("offering-list")
                                .find("> .title > a").attr("title", langSet[_this.lang].menuState.activeStr);
                            $cate.append($menuPanel_d2);
                        }

                        if (isCurrentWithin || this.data.current == cate.menuId){
                            $cate.addClass('selected');
                        }
                    } else {
                        if ( this.data.current == cate.menuId ) {
                            $cate.addClass('selected');
                        }
                    }

                    if (cate.hidden !== true) {
                        $inner.append($cate);
                    }

                }
            //}
            
            this.$el.find(">.inner").append($gsnb);
            this.$el.find(">.inner").append($gsnbMobile);
            
        }

        this.$el.find(".gnb").prepend($cnt);

        
        /* rnb code */
        var $head = $('<div class="head"><p class="logo"><a href="'+ _this.getHomeUrl() +'"><span class="blind">SAMSUNG SDS</span></a></p><a href="#" class="btn-close">닫기</a></div>')  // Modify | 2020-08-20 | M00_A | h1.logo → p.logo 변경
        var $cnt2 = $('<div class="container"></div>');
        var $depthMain = $('<div class="depth-main"></div>');
        var $depthSub = $('<div class="depth-sub"></div>');
        $cnt2.append($head, $depthMain, $depthSub);

        for(var group in this.menuData){
            var menuGroup = this.menuData[group];
            var $groupUl = $('<ul class="'+ String(group).camelToDash() +'">');
            for(var depth1 in menuGroup){
                var d1Title = menuGroup[depth1].title;
                var d1PanelType = menuGroup[depth1].panelType;
                var featureId = menuGroup[depth1].featureId;
                var d1Items = menuGroup[depth1].items || null;
                var d1Url = menuGroup[depth1].url || "#";
                var d1Target = menuGroup[depth1].target || null;
                var $menuItem_d1 = $('<li'+(!d1Items?' class="no-child"':'')+'><div class="title"><a href="'+d1Url+'" '+(d1Target?'target="'+d1Target+'"':'')+' class="'+featureId+'"'+ (!d1Items?' ':' role="button"') +'>'+d1Title+'</a></div></li>');
                var $menuPanel_d1 = $('<div class="'+d1PanelType+' '+featureId+'" data-id="'+featureId+'"><ul class="items depth2"></ul></div>');
                var $menuPanel_d2;
                var $menuPanel_d3;
                if(d1Items){
                    var $menuPanel_d2 = $menuPanel_d1.find(".items").eq(0);
                    for(var depth2 in d1Items){
                        var d2Title = d1Items[depth2].title;
                        var d2Url = d1Items[depth2].url || "#";
                        var d2Target = d1Items[depth2].target || "_self";
                        // 1depth오퍼링 하위인 경우 3depth 오퍼링 내용을 표시함
                        var d2Items = null;
                        
                        if ( d1Items[depth2].type == "offering_main" ){
                            try {
                                d2Items = !!d1Items[depth2].items && d1Items[depth2].items[0].items;   // offering cate get
                            } 
                            catch (e) {
                                console.log('error', e);
                            }
                        } else {
                            d2Items = !!d1Items[depth2].items && d1Items[depth2].items;
                        }

                        var $menuItem_d2;
                        // hidden 항목만 들어있는지 확인
                        var isItemsHasOnlyHiddenItem = (function(items){
                            if (!items) return true;

                            var result = true;
                            items.map(function(obj, index, items){
                                if (!!obj.hidden == false) result = false;
                            });
                            return result;
                        })(d2Items);

                        if(isItemsHasOnlyHiddenItem == false){
                            if ( d1Items[depth2].type == "offering_main" ){
                                $menuItem_d2 = $('<li><div class="title"><a href="#" title="'+langSet[_this.lang].menuState.activeStr+'">'+d2Title+'</a></div></li>');
                                //RNB는 2depth url에 해당하는 3depth 개요 생성이 있음..
                                $menuPanel_d3 = $('<ul class="items"></ul>');
                                if(d2Url != "#") $menuPanel_d3.append('<li><a href="'+d2Url+'" target="'+d2Target+'">'+d2Title+' '+(langSet[_this.lang].words.summary).toString()+'</a></li>');
                                $menuItem_d2.append($menuPanel_d3);
                                for(var depth3 in d2Items){
                                    var d3Title = d2Items[depth3].title;
                                    var d3Url = d2Items[depth3].url || "#";
                                    var d3Target = d2Items[depth3].target || "_self";
                                    var $menuItem_d3 = $('<li><a href="'+d3Url+'" target="'+d3Target+'">'+d3Title+'</a></li>');

                                    if (d2Items[depth3].hidden !== true && d2Items[depth3].onlyMainShow !== true && d2Items[depth3].onlySUB !== true){ 
                                        $menuPanel_d3.append($menuItem_d3);
                                    }
                                }
                                //console.log('offering d2Items', d2Items);

                                if ( d1Items[depth2].hidden !== true && d1Items[depth2].onlyMainShow !== true && d1Items[depth2].onlySUB !== true ){
                                    $menuPanel_d2.append($menuItem_d2);
                                }
                            } else {
                                //console.log('normal d2Items', d2Items);

                                
                                for(var depth3 in d2Items){
                                    $menuItem_d2 = $('<li></li>');
                                    var d3Items = !!d2Items[depth3].items && d2Items[depth3].items;
                                    // hidden 항목만 들어있는지 확인
                                    var isItemsHasOnlyHiddenItem = (function(items){
                                        if (!items) return true;

                                        var result = true;
                                        items.map(function(obj, index, items){
                                            if (!!obj.hidden == false) result = false;
                                        });
                                        return result;
                                    })(d3Items);

                                    if ( isItemsHasOnlyHiddenItem == false ){
                                        var d2Title = d2Items[depth3].title;
                                        $menuItem_d2.append('<div class="title"><a href="#">'+d2Title+'</a></div>');
                                        $menuPanel_d3 = $('<ul class="items"></ul>');
                                        for (var depth3 in d3Items){
                                            var d3Title = d3Items[depth3].title;
                                            var d3Url = d3Items[depth3].url || "#";
                                            var d3Target = d3Items[depth3].target || "_self";
                                            var $menuItem_d3 = $('<li><a href="'+d3Url+'" target="'+d3Target+'">'+d3Title+'</a></li>');

                                            if (d3Items[depth3].hidden !== true && d3Items[depth3].onlyMainShow !== true && d3Items[depth3].onlySUB !== true ){
                                                $menuPanel_d3.append($menuItem_d3);
                                            }
                                            
                                        }
                                        $menuItem_d2.append($menuPanel_d3);

                                    } else {
                                        var d2Title = d2Items[depth3].title;
                                        var d2Url = d2Items[depth3].url || "#";
                                        var d2Target = d2Items[depth3].target || "_self";
                                        $menuItem_d2.append('<a href="'+d2Url+'" target="'+d2Target+'">'+d2Title+'</a>');
                                    }
                                    if ( d1Items[depth2].hidden !== true && d1Items[depth2].onlyMainShow !== true && d1Items[depth2].onlySUB !== true ){
                                        $menuPanel_d2.append($menuItem_d2);
                                    }                                  
                                }                          
                            }
                            
                        }else{
                            $menuItem_d2 = $('<li><a href="'+d2Url+'" target="'+d2Target+'">'+d2Title+'</a></li>');

                            if ( d1Items[depth2].hidden !== true && d1Items[depth2].onlyMainShow !== true && d1Items[depth2].onlySUB !== true ){
                                $menuPanel_d2.append($menuItem_d2);
                            }                          
                        }
                        
                    }
                    
                    $depthSub.append($menuPanel_d1);
                    
                }
                if ( menuGroup[depth1].hidden !== true && menuGroup[depth1].onlyMainShow !== true ){
                    // menuGroup[depth1].onlyMainShow: GNB 노출O / RNB 노출X
                    $groupUl.append($menuItem_d1);
                }
            }
            // static group not append 
            if (group !== 'menuGroup4') {
                $depthMain.append($groupUl);
            }
            
        }        
        this.$el.find(".rnb").append($cnt2);
        

        /* check DOM created */
        checkDone["gnb"] = setInterval(function (){
            if($(".hd-cnt").length && $(".rnb .depth-main").length){
                clearInterval(checkDone["gnb"]);
                _this.addEventListener();
                
                if ( _this.isMobile ) {
                    _this.setSizeSubmenuMobile();                        
                } else {
                    //_this.initSubmenuSize(); 
                    _this.initSubmenuSizeIEFIX();
                }

                if ( _this.isMobileDevice ) {
                    $('body').addClass('hid_sm');
                } else {
                    $('body').removeClass('hid_sm');
                }

                // scrollbar 적용 
                $('.history .container .pages').scrollbar();  // 20.07.28 JH
                $('.rnb .depth-sub > div > .items').scrollbar();            
                //$('.rnb .depth-main').scrollbar();
                $('.rnb .depth-main').wrapInner('<div class="box"></div>');
                $('.rnb .depth-main .box').scrollbar();              

                // 따로 처리가 필요할 경우
                //afterFIX();


                // set aria attribute

                _this.$el.find(".rnb").attr('role','navigation');

                
            }else{
                console.log("not yet Draw GNB");
            }
        }, 50);

        _this.gnbChildpanelStyle("drawGnb");
    }

    _proto.gnbChildpanelStyle = function(executionState){
        if(!$(".gnb .hd-cnt .menu").length) return;
        if(_this.isMobile) return;

        var PANEL = {
            MAXWIDTH_LEFT: 1398, // "offering", "business"
            MAXWIDTH_RIGHT: 1568, // "library", "newsroom", "about"
            PADDING: 40
        };
        var FEATURE = {
            WIDTH: 310,
            PADDING: 26,
            DISTANCEMIN: 75,
            DISTANCEMAX: 120
        }
        
        var panelWidth = $(".M00_A").width();
        var gnbWidthGap =
            ($(window).width() - panelWidth)/2 > 0
                ? ($(window).width() - panelWidth)/2
                : 0;
        // "offering", "business"
        var panelWidthGap_LEFT =
            (panelWidth - PANEL.MAXWIDTH_LEFT)/2 > 0
                ? (panelWidth - PANEL.MAXWIDTH_LEFT)/2
                : 0;
         // "library", "newsroom", "about"
        var panelWidthGap_RIGHT =
            (panelWidth - PANEL.MAXWIDTH_RIGHT)/2 > 0
                ? (panelWidth - PANEL.MAXWIDTH_RIGHT)/2
                : 0;

        $(".gnb .hd-cnt .menu > li").each(function(){
            var $openBtn = $(this).find("> .title a");
            var $childpanel = $(this).find("> .childpanel");
            var $offeringBtn = $(".gnb .hd-cnt .menu #tab_offering");

            var openBtnPos_LEFT = $openBtn.offset().left - PANEL.PADDING - gnbWidthGap - panelWidthGap_LEFT;
            var offeringBtnPos_LEFT = $offeringBtn.offset().left - PANEL.PADDING - gnbWidthGap - panelWidthGap_LEFT;
            var openBtnPos_RIGHT = $openBtn.offset().left - PANEL.PADDING - gnbWidthGap - panelWidthGap_RIGHT;
            var offeringBtnPos_RIGHT = $offeringBtn.offset().left - PANEL.PADDING - gnbWidthGap - panelWidthGap_RIGHT;

            // "no-child"
            // - Do nothing
            if(!$childpanel.length){
                return;
            }

            // "offering"
            // - Do nothing
            if($childpanel.hasClass("offering")){
                return;
            }

            // "business"
            // - set items indentation
            if($childpanel.hasClass("business")){
                $childpanel.find(".inner > .items").css({
                    "margin-left":
                        (openBtnPos_LEFT > 0)
                            ? openBtnPos_LEFT
                            : 0
                });
                return;
            }

            // "library", "newsroom", "about"
            // - set feature indentation
            var featureWidth = 0;
            var featureLength = $childpanel.find(".feature li").length;

            var featureDistance = 
                (panelWidthGap_RIGHT > 0 && $childpanel.hasClass("about"))
                    ? FEATURE.DISTANCEMAX
                    : FEATURE.DISTANCEMIN;
            var featureIndentation =
                (panelWidthGap_RIGHT > 0 && offeringBtnPos_LEFT > 0 && gnbWidthGap <= 0)
                    ? offeringBtnPos_LEFT
                    : 0;

            if(featureLength){
                featureWidth += featureLength * FEATURE.WIDTH;
                featureWidth += (featureLength-1) * FEATURE.PADDING;
                featureWidth += featureIndentation;
                featureWidth += featureDistance;
            }

            $childpanel.find(".inner > .feature").css({
                "margin-left": featureIndentation,
                "margin-right": featureDistance
            });

            // "about"
            // - set items width
            if($childpanel.hasClass("about")){
                $childpanel.find(".inner > .items").css({
                    "width": panelWidth - ( featureWidth + (PANEL.PADDING*2) + (panelWidthGap_RIGHT*2) )
                });
                return;
            }

            // "library", "newsroom"
            // - set items width
            $childpanel.find(".inner > .items").css({
                "width": panelWidth - ( openBtnPos_RIGHT + (PANEL.PADDING*2) + (panelWidthGap_RIGHT*2) )
            });
        })
    }

    // 20210209 추가
    // [20210209_1] MAIN GNB 오퍼링 > DT Services 위치 관련 #24
    // 특정 국가에서 특정 사업부 위치 변경을 위해 빈 영역을 추가하기위해 작성됨
    _proto.checkMainGnbInOfferingItem = function(title, subMenu){
        var emptyBlock = $("<div aria-hidden='true'>&nbsp;</div>");
        
        if(this.country === "en" && title === "Digital Accelerator"){
            subMenu.children().last().append(emptyBlock.css("height", 100));
        }
        if(this.country === "en" && title === "Digital Finance"){
            subMenu.children().last().append(emptyBlock.css("height", 120));
        }
    }

    _proto.setSizeSubmenuMobile = function(){
        var containerHeight = $(window).height() - $('.M00_A .inner').height();

        if ( this.gnbType != "main" ){
            $('#header').css({
                'height' : $('.M00_A .inner').height() + 'px'
            });
        }        

        //$('.M00_A .gsnb.mobile .owl-carousel').css({'height' : containerHeight + 'px'});
    }

    _proto.makeMobileGsnb = function(){
        var $inner = $('<ul class="items"></ul>');

        if (this.offeringData.url){
            $inner.append('<li class="menulist no-child" ><div class="title"><a href="'+(this.offeringData.url || '#')+'" target="'+(this.offeringData.target || '_self')+'">'+this.offeringData.title + ' ' + (langSet[_this.lang].words.summary).toString() +'</a></div></li>');
        }
        
        for(var offerCate in this.offeringData.items){
            var cate = this.offeringData.items[offerCate];
            var $cate = $('<li class="menulist" ><div class="title"><a href="'+(cate.url || '#')+'" target="'+(cate.target || '_self')+'">'+cate.title+'</a></div></li>');
            var $menuPanel_d2;            
            if(cate.items){
                $menuPanel_d2 = $('<ul class="items"></ul>');                                
                for(var offerSub in cate.items){
                    var sub = cate.items[offerSub];
                    var $sub = $('<li class="menulist-sub"><div class="title"><a href="#">'+sub.title+'</a></div></li>');
                    var $menuPanel_d3;
                    // hidden 항목만 들어있는지 확인
                    var isItemsHasOnlyHiddenItem = !!sub.items && (function(items){
                        var result = true;
                        items.map(function(obj, index, items){
                            if (!!obj.hidden == false) result = false;
                        });
                        return result;
                    })(sub.items);
                    if(sub.items && isItemsHasOnlyHiddenItem == false){
                        $sub = $('<li class="menulist-sub"><div class="title"><a href="#">'+sub.title+'</a></div></li>');
                        $menuPanel_d3 = $('<ul class="items"></ul>');
                        // move back link
                        $menuPanel_d3.append('<li><div class="title"><a href="#">'+sub.title+'</a></div></li>');
                        // summary link
                        if ( sub.url ){
                            $menuPanel_d3.append('<li><div class="title"><a href="'+(sub.url || '#')+'" target="'+(sub.target || '_self')+'">'+sub.title + ' ' + (langSet[_this.lang].words.summary).toString() +'</a></div></li>');
                        }                        
                        $sub.append($menuPanel_d3);
                        for(var offerItem in sub.items){
                            var item = sub.items[offerItem];
                            var $item = $('<li><div class="title"><a href="'+(item.url || '#')+'" target="'+(item.target || '_self')+'">'+item.title+'</a></div></li>');
                            if (item.hidden !== true){
                                $menuPanel_d3.append($item);
                            }
                        }
                    } else {
                        $sub = $('<li class="menulist-sub"><div class="title"><a href="'+(sub.url || '#')+'" target="'+(sub.target || '_self')+'">' + sub.title + '</a></div></li>');
                        $sub.addClass('no-child');
                    }
                    if (sub.hidden !== true && sub.onlyMainShow !== true) {
                        $menuPanel_d2.append($sub);
                    }
                }

                // hidden 항목만 들어있는지 확인
                var isItemsHasOnlyHiddenItem = (function(items){
                    var result = true;
                    items.map(function(obj, index, items){
                        if (!!obj.hidden == false) result = false;
                    });
                    return result;
                })(cate.items);

                if (isItemsHasOnlyHiddenItem){
                    $cate.addClass('no-child');
                }

                $cate.append($menuPanel_d2);

            } else {
                /*
                if ( this.data.current == cate.menuId ) {
                    $cate.addClass('on');
                }
                */
                $cate.addClass('no-child');
            }
            if (cate.hidden !== true) {
                $inner.append($cate);
            }
        }

        return $inner;
    }
    // IE11 flex bug fix
    _proto.initSubmenuSizeIEFIX = function(){
        if ( this.gnbType == "normal" ){
            $(".offering-list > ul.items").each(function(i, el){
                var $ul = $(this);
                var itemCount = $ul.find('li').length;
                var colCount = Math.ceil( itemCount / 5 );

                $ul.css({
                    'width' : colCount * 300 + 'px'
                });

                $ul.css({
                    'column-count' : colCount.toString(),
                    'column-fill' : 'auto', // TODO :: FIREFOX BUG check
                    //'column-fill' : 'balance', // TODO :: FIREFOX BUG check
                    //'width' : 'auto',                    
                    //'display' : 'block',
                    'height' : '310px'                    
                });
                //console.log('colCount', colCount);
            });
        } else {
            //$(".offering-list > ul.items").css("width", "calc(100% - "+($inner.find(".offering-cate").width() + 10)+"px)");
            $(".offering-list > ul.items").css("width", "100%");

            // height 값 체크후 large class 추가
            $(".offering-list > ul.items").each(function(i, el){
                var fixwidth = 280;
                var $ul = $(this);
                $ul.css({
                    'visibility': 'hidden',
                    'display' : 'block'
                });
                // height check
                var cateHeight = 0;
                $ul.find(".offering-list-sub").each(function(i, el){
                    cateHeight += $(this).height();
                });
                //console.log("cateHeight::"+ cateHeight);
                if ( $ul.find(".offering-list-sub").length == 1 ){
                    $ul.css({
                        'max-height' : (cateHeight + 80 + 16) + 'px'
                    });
                } else if(cateHeight >= 320) {
                    $ul.addClass("large");
                } else {
                    $ul.css({
                        'max-height' : '325px'
                    });
                }

                // offset check
                $ul.css({
                    'display' : 'flex',
                    'flex-direction' : 'column',
                    'flex-wrap' : 'wrap'
                });
                //alert($ul.css('max-height'));

                // IE11 fix                
                $ul.css({
                    'height' : $ul.css('max-height')
                });
                
                
                function getUniqueOffset(){
                    var offsetArray = []
                    var offsetTopArray = []
                    $ul.find('>li').each(function(){
                        offsetArray.push( $(this).offset().left );
                        offsetTopArray.push({
                            'top' : $(this).offset().top,
                            'el' : $(this)
                        });
                    });

                    // 중복제거하여 col 갯수 확인
                    var uniqueOffsetLeft = [];
                    $.each(offsetArray, function(i, el){
                        if($.inArray(el, uniqueOffsetLeft) === -1) uniqueOffsetLeft.push(el);
                    });

                    
                    var uniqueOffsetTop = [];
                    $.each(offsetTopArray, function(i, el){
                        if($.inArray(el, uniqueOffsetTop) === -1) uniqueOffsetTop.push(el);
                    });

                    return {
                        uniqueOffsetLeft: uniqueOffsetLeft,
                        uniqueOffsetTop: uniqueOffsetTop
                    };
                }
                

                var offset = getUniqueOffset();
                var uniqueOffsetLeft = offset.uniqueOffsetLeft;
                var uniqueOffsetTop = offset.uniqueOffsetTop;

                //var max = offsetArray.slice(0).sort(function(a,b){a<b})[0];

                //console.log('offsetArray', offsetArray);
                //console.log('offsetTopArray', offsetTopArray);
                
                //console.log('uniqueOffsetLeft', uniqueOffsetLeft);
                //console.log('uniqueOffsetTop', uniqueOffsetTop);
                

                var ulWidth = $ul.width();
                var liWidth;
                if ( fixwidth * uniqueOffsetLeft.length > ulWidth ){    // 계산된 width 값이 너무커서 벗어날경우
                    liWidth = (ulWidth / uniqueOffsetLeft.length) - 40 - 10;

                    $ul.children('li').css({
                        'width' : liWidth + 'px'
                    });
                    $ul.css({                            
                        'visibility': '',
                        'display' : ''
                    });
                } else {
                    ulWidth = fixwidth * uniqueOffsetLeft.length;
                    $ul.children('li').css({
                        //'width' : '265px',
                        'width' : 'auto',
                        'break-inside' : 'avoid'
                    });

                    $ul.css({
                        'width' : ( fixwidth * uniqueOffsetLeft.length + 40 ) +'px',                        
                        'visibility': '',
                        'display' : '',
                        'height' : '',
                        'max-height' : ''
                    });
                    // IE11 fix
                    /*
                    if (uniqueOffsetLeft.length > 1){
                        $ul.css({
                            'height' : $ul.css('max-height')
                        });
                    }
                    */
                }

                $ul.css({
                    'column-count' : uniqueOffsetLeft.length.toString(),
                    //'column-fill' : 'auto', // TODO :: FIREFOX bug check
                    'column-fill' : 'balance',
                    'width' : 'auto',
                    'visibility': '',
                    //'display' : 'block',
                    'height' : 'auto',
                    'max-height' : 'auto'
                }).removeClass('large');

                if(cateHeight < 320 && $ul.find(".offering-list-sub").length == 0) {
                    if ($ul.children('li').length > 4){
                        $ul.css({
                            'column-fill' : 'auto',
                            'height' : '310px'
                        });
                    }
                }
                // 일반메뉴 그룹메뉴 혼합일때
                if ( $ul.find("> li.offering-list-sub").length > 0 && $ul.find("> li:not(.offering-list-sub)").length > 0){
                    $ul.css({
                        'visibility': 'hidden',
                        'display' : 'block',
                        'max-height' : (cateHeight + 90) + 'px',
                    });
                    var currentOffset = getUniqueOffset();
                    var currentUniqueOffsetLeft = currentOffset.uniqueOffsetLeft;
                    $ul.css({
                        'visibility': '',
                        'display' : '',
                        'column-count' : currentUniqueOffsetLeft.length.toString(),
                    })
                    $ul.find("> li:not(.offering-list-sub)").addClass("offering-list-sub").addClass("fake");
                }
            });
        }
    }

    _proto.initSubmenuSize = function(){
        if ( this.gnbType == "normal" ){
            $(".offering-list > ul.items").each(function(i, el){
                var $ul = $(this);
                var itemCount = $ul.find('li').length;
                var colCount = Math.ceil( itemCount / 5 );

                $ul.css({
                    'width' : colCount * 260 + 'px'
                });
                //console.log('colCount', colCount);
            });
        } else {
            //$(".offering-list > ul.items").css("width", "calc(100% - "+($inner.find(".offering-cate").width() + 10)+"px)");
            $(".offering-list > ul.items").css("width", "100%");

            // height 값 체크후 large class 추가
            $(".offering-list > ul.items").each(function(i, el){
                var fixwidth = 300;
                var offsetArray = [];
                var offsetTopArray = [];
                var $ul = $(this);
                $ul.css({
                    'visibility': 'hidden',
                    'display' : 'block'
                });
                // height check
                var cateHeight = 0;
                $ul.find(".offering-list-sub").each(function(i, el){
                    cateHeight += $(this).height();
                });
                //console.log("cateHeight::"+ cateHeight);
                if ( $ul.find(".offering-list-sub").length == 1 ){
                    $ul.css({
                        'max-height' : (cateHeight + 80 + 16) + 'px'
                    });
                } else if(cateHeight >= 320) {
                    $ul.addClass("large");
                }

                // offset check
                $ul.css({ 'display' : 'flex' });
                //alert($ul.css('max-height'));

                // IE11 fix
                
                $ul.css({
                    'height' : $ul.css('max-height')
                });
                
                function getUniqueOffset(){
                    $ul.find('>li').each(function(){
                        offsetArray.push( $(this).offset().left );
                        offsetTopArray.push( $(this).offset().top );
                    });
    
                    // 중복제거하여 col 갯수 확인
                    var uniqueOffsetLeft = [];
                    $.each(offsetArray, function(i, el){
                        if($.inArray(el, uniqueOffsetLeft) === -1) uniqueOffsetLeft.push(el);
                    });
    
                    
                    var uniqueOffsetTop = [];
                    $.each(offsetTopArray, function(i, el){
                        if($.inArray(el, uniqueOffsetTop) === -1) uniqueOffsetTop.push(el);
                    });
                    
                    return {
                        uniqueOffsetLeft: uniqueOffsetLeft,
                        uniqueOffsetTop: uniqueOffsetTop
                    };
                }
                
                var offset = getUniqueOffset();
                var uniqueOffsetLeft = offset.uniqueOffsetLeft;
                var uniqueOffsetTop = offset.uniqueOffsetTop;

                //var max = offsetArray.slice(0).sort(function(a,b){a<b})[0];

                //console.log('offsetArray', offsetArray);
                //console.log('offsetTopArray', offsetTopArray);
                
                //console.log('uniqueOffsetLeft', uniqueOffsetLeft);
                //console.log('uniqueOffsetTop', uniqueOffsetTop);
                

                var ulWidth = $ul.width();
                var liWidth;
                if ( fixwidth * uniqueOffsetLeft.length > ulWidth ){    // 계산된 width 값이 너무커서 벗어날경우
                    liWidth = (ulWidth / uniqueOffsetLeft.length) - 40 - 10;

                    $ul.children('li').css({
                        'width' : liWidth + 'px'
                    });
                    $ul.css({                            
                        'visibility': '',
                        'display' : ''
                    });
                } else {
                    ulWidth = fixwidth * uniqueOffsetLeft.length;
                    $ul.children('li').css({
                        'width' : '260px'
                    });
                    $ul.css({
                        'width' : ( fixwidth * uniqueOffsetLeft.length + 40 ) +'px',
                        'visibility': '',
                        'display' : '',
                        'height' : ''
                    });
                    // IE11 fix
                    /*
                    if (uniqueOffsetLeft.length > 1){
                        $ul.css({
                            'height' : $ul.css('max-height')
                        });
                    }
                    */
                }
            });
        }
    }
    
    _proto.drawSub = function(isBread){
        //
    }

    _proto.addEventListener = function(){

        _this.gnbTopLinks = $(".gnb > .hd-cnt > .logo > a ,.gnb .hd-cnt .menu > li > .title a, .gnb .hd-etc .util > li > a");


        // main gnb mouseover 
        var $gnb = $('.M00_A');
        //var $wrap = $('#wrap.main');
        var $wrap = $('#wrap');
        if ( this.gnbType == 'main' ){
            $gnb.find('> *').on('mouseover', function(){                
                gnbMainTransparentTimer.stop();
                $gnb.addClass('mc_chk');
            }).on("mouseleave", function(e){
                //console.log('gnb mouseleave');

                if ( $('body').hasClass('hid_s') ) return;
                if (_this.isFocus) return;

                gnbMainTransparentTimer.start();
            });

            $gnb.find('a').on('focus', function(){
                gnbMainTransparentTimer.stop();
                _this.isFocus = true;                
                $gnb.addClass('mc_chk');
            }).on('focusout', function(){
                _this.isFocus = false;            
                if ( $('body').hasClass('hid_s') ) return;
            });

        } else if (this.gnbType == 'offering') {
            
            if ( this.offeringData.menuId == $(currentPage).text() ){
                $gnb.addClass('offering_main');
            } else {
                $gnb.addClass('offering');
            }
        }

        // gnb 
        $(".gnb .hd-cnt .menu > li").on("mouseover", function(e){
            menuCloseTimer.stop();
            $(".gnb .hd-cnt .menu > li:not('.no-child')").removeClass("on").find('> .title > a').attr('aria-selected','false');
            $(this).closest(".menu > li:not('.no-child')").addClass("on").find('> .title > a').attr('aria-selected','true');;
            _this.rnbMenuClose();
            _this.searchBoxClose();
            _this.historyMenuClose();
            _this.gnbItemScrollStyle(e.type, $(this).find("> .title a"));
        }).on("mouseout", function(e){
            menuCloseTimer.start();
            _this.gnbItemScrollStyle(e.type, $(this).find("> .title a"));
        });

        $(".gnb .hd-cnt .menu > li > .title a").on("mouseover, focus", function(e){
            menuCloseTimer.stop();
            $(".gnb .hd-cnt .menu > li:not('.no-child')").removeClass("on").find('> .title > a').attr('aria-selected','false');;
            $(this).closest(".menu > li:not('.no-child')").addClass("on").find('> .title > a').attr('aria-selected','true');;
            _this.rnbMenuClose();
            _this.searchBoxClose();
            _this.historyMenuClose();
            _this.gnbItemScrollStyle(e.type, $(this));
        }).on("mouseout, focusout", function(e){
            menuCloseTimer.start();
            _this.gnbItemScrollStyle(e.type, $(this));
        });
        
        $(".gnb .hd-cnt .menu > li > .childpanel a").on("mouseover, focus", function(e){
            menuCloseTimer.stop();            
        }).on("mouseout, focusout", function(e){
            menuCloseTimer.start();
        });

        $(".gnb .hd-cnt .menu > li > .childpanel").on("mouseover", function(e){
            menuCloseTimer.stop();
        }).on("mouseout", function(e){
            menuCloseTimer.start();
        });

        // sub gnb 
        $(".gsnb:not('.mobile') .inner > ul > li.offering-list").on("mouseenter", function(e){            
            $(this).addClass('on')
                .find("> .title > a").attr("title", langSet[_this.lang].menuState.inactiveStr);
        }).on("mouseleave", function(e){
            $(this).removeClass("on")
                .find("> .title > a").attr("title", langSet[_this.lang].menuState.activeStr);
        });

        $(".gsnb:not('.mobile') .inner > ul > li.offering-list > .title > a").on("focus", function(e){
            _this.inFocus = true;
            $(".gsnb:not('.mobile') .inner > ul > li.offering-list").removeClass('on')
                .find("> .title > a").attr("title", langSet[_this.lang].menuState.activeStr);
            $(this).closest('li').addClass('on')
                .find("> .title > a").attr("title", langSet[_this.lang].menuState.inactiveStr);
        });

        $(".gsnb:not('.mobile') .inner > ul > li.offering-list .items a").on('focus', function(){
            _this.inFocus = true;            
        }).on('focusout',function(){
            _this.inFocus = false;
            subMenuCloseTimer.start();
        });
        
        $(".gsnb:not('.mobile') .inner > ul > li:not('.offering-list') > .title > a").on("focus", function(e){
            _this.inFocus = true;            
            $(".gsnb:not('.mobile') .inner > ul > li.offering-list").removeClass('on')
                .find("> .title > a").attr("title", langSet[_this.lang].menuState.activeStr);
        }).on('focusout', function(e){            
            _this.inFocus = false;
        });

        // history
        $(".btn-history").click(function(e){
            if($(this).hasClass("on")) return false;

            _this.closeMobileGsnb();
            _this.rnbMenuClose();
            _this.searchBoxClose();
            _this.setHeightRightContainer();

            $('body').addClass('hid_s');

            if (_this.isIos()){
                $('html').addClass('ios');
            }
            /*
            if ( $('#wrap').hasClass('scroll_chk') ){
                _this.$el.css({
                    'transition' : 'none'
                });
                _this.$el.css({                    
                    'top' : $('#header').offset().top + 'px',
                    'position' : 'fixed'
                });
            }
            */

            $(this).addClass("on");
            $(".history").addClass("on").css({"display":"block"}).find(".container").stop().css({"right": -1*$(".history").width()}).animate({
                right: 0,
            }, 500, "easeOutQuint", function(){
                //alert( "all done" );
            });

            e.preventDefault();
        });
        $(".history .btn-close").click(function(e){
            $(".btn-history").removeClass("on");
            $(".history").removeClass("on").find(".container").stop().animate({
                right: -1*$(".history").width(),
                opacity: 1
            }, 500, "easeOutQuint", function(){
                $(".history").css("display", "none");
                $('body').removeClass('hid_s');
                if (_this.isIos()){
                    $('html').removeClass('ios');
                }
                /*
                //if ( _this.isMobile == false ){
                    if ( $('#wrap').hasClass('scroll_chk') ){                        
                        _this.$el.css({
                            'top' : '0px',
                            'position' : 'absolute'
                        });

                        _this.$el.css({
                            'transition' : 'top 0.2s'
                        });
                    }
                //}
                */
            });

            
            
            e.preventDefault();
        });
        // History clear button
        $(".history .btn-clear").click(function(e){
            _this.clearHistory();
        });

        //search
        $('.hd-etc .btn-search').on('click', function(){
            _this.closeMobileGsnb();
            _this.rnbMenuClose();
            _this.historyMenuClose();

            $('body').addClass('hid_s');
            if (_this.isIos()){
                $('html').addClass('ios');
            }
            $(this).addClass('on');
            /*
            if ( $('#wrap').hasClass('scroll_chk') ){
                _this.$el.css({
                    'transition' : 'none'
                });
                _this.$el.css({
                    'top' : $('#header').offset().top + 'px',
                    'position' : 'fixed'
                });
            }
            */

            if (_this.isMobile){
                $('.search_box').css({
                    'left' : $('.search_box').width() + 'px'
                }).show().animate({ 'left' : '0px' }, 500, 'easeOutQuint');
            } else {
                $('.search_box').show();
            }
        });

        $('.search_box form .input').on('keyup', function(e){            
            if ( $(this).val().length > 0 ){
                $('.search_box form .delete').show();
            } else {
                $('.search_box form .delete').hide();
            }
        });

        $('.search_box form .delete').on('click', function(){
            $(this).hide();
            $('.search_box form .input').val('').focus();
            
        });

        $('.search_box .btn-close').on('click', function(){
            $('.hd-etc .btn-search').removeClass('on');

            if (_this.isMobile){
                $('.search_box').animate({
                    'left' : $('.search_box').width() + 'px'
                }, 500, 'easeOutQuint', function(){
                    $('.search_box').hide();
                    $('body').removeClass('hid_s');
                    if (_this.isIos()){
                        $('html').removeClass('ios');
                    }
                    $('.search_box form .input').val('');
                    $('.search_box form .delete').hide();
                    /*
                    if ( $('#wrap').hasClass('scroll_chk') ){
                        _this.$el.css({
                            'top' : '0px',
                            'position' : 'absolute'
                        });

                        _this.$el.css({
                            'transition' : 'top 0.2s'
                        });
                    }
                    */
                });
            } else {
                $('.search_box').hide();
                $('body').removeClass('hid_s');
                $('.search_box form .input').val('');
                $('.search_box form .delete').hide();
                /*
                if ( $('#wrap').hasClass('scroll_chk') ){
                    _this.$el.css({
                        'top' : '0px',
                        'position' : 'absolute'
                    });

                    _this.$el.css({
                        'transition' : 'top 0.2s'
                    });
                }
                */
            }            
        });

        // rnb
        $(".btn_hamburger").click(function(e){
            if($(this).attr("disabled")) return false;
            _this.closeMobileGsnb();
            _this.searchBoxClose();
            _this.historyMenuClose();
            _this.setHeightRightContainer();

            //$(".history .btn-close").trigger('click');

            var $nav = $(".rnb > .container").eq(0);
            var $this = $(this);
            var $span = $this.find('.blind');

            if($(this).hasClass("active")){
                $nav.stop().animate({
                    right: -1*$nav.width(),
                }, 500, "easeOutQuint", function(){
                    $this.removeClass("active").removeAttr("disabled");
                    $(".rnb").css("display", "none");
                    _this.setDefaultRnb();

                    $('body').removeClass('hid_s');

                    if (_this.isIos()){
                        $('html').removeClass('ios');
                    }
                    //if ( _this.isMobile == false ){
                        /*
                        if ( $('#wrap').hasClass('scroll_chk') ){
                            _this.$el.css({
                                'top' : '0px',
                                'position' : 'absolute'
                            });

                            _this.$el.css({
                                'transition' : 'top 0.2s'
                            });
                        }
                        */
                    //}
                });
                $span.text((langSet[_this.lang].rnb.activeStr).toString());
                $this.attr("disabled", "disabled");

                //$this.html((langSet[_this.lang].rnb.activeStr).toString()+'<i class="line"></i>').attr("disabled", "disabled");
                
            }else{
                $('body').addClass('hid_s');

                if (_this.isIos()){
                    $('html').addClass('ios');
                }

                //if ( _this.isMobile == false ){
                    /*
                    if ( $('#wrap').hasClass('scroll_chk') ){
                        _this.$el.css({
                            'transition' : 'none'
                        });
                        _this.$el.css({
                            'top' : $('#header').offset().top + 'px',
                            'position' : 'fixed'
                        });
                    }
                    */
                //}

                $(".rnb").css("display", "block");
                $nav.stop().css({"right": -1*$nav.width()}).animate({
                    right: 0,
                }, 500, "easeOutQuint", function(){
                    $this.addClass("active").removeAttr("disabled");;
                });
                $span.text((langSet[_this.lang].rnb.inactiveStr).toString());
                $this.attr("disabled", "disabled");
                //$this.html((langSet[_this.lang].rnb.inactiveStr).toString()+'<i class="line"></i>').attr("disabled", "disabled");
                
            }
            e.preventDefault();
        });
        
        var isOpeningRnb = false;
        $(".rnb .depth-main a").click(function(e){
            if (isOpeningRnb) return;

            if(!$(this).closest("li").hasClass("no-child") && !$(this).closest("li").hasClass("on")){
                isOpeningRnb = true;
                _this.setRnb(this.className || "none", function(){
                    isOpeningRnb = false;
                });
                e.preventDefault();
            }
        }).eq(0).trigger("click");

        $(".rnb .depth-sub .items.depth2 .title a").click(function(e){
            var $btn = $(e.currentTarget);
            // 애니메이션 : $btn.toggleClass("on");
            $(this).parent(".title").next(".items").slideToggle("fast", function(){
                if($(this).is(":visible")){
                    $btn.attr("title", (langSet[_this.lang].menuState.inactiveStr).toString()).addClass("on");
                }else{
                    $btn.attr("title", (langSet[_this.lang].menuState.activeStr).toString()).removeClass("on");
                }
            });
            e.preventDefault();
        });

        $(".rnb .head .btn-close").on('click', function(){
            $(".btn_hamburger").trigger('click');
        });
        // rnb tab 접근성 
        var $rnbLeftLinks = $('.rnb .depth-main ul li .title > a');
        $rnbLeftLinks.on('keydown', function(e){
            if (e.which == 9 && !e.shiftKey){
                var className = $(this).attr('class');                
                if ( $('.rnb .depth-sub').find('.' + className).length &&  $('.rnb .depth-sub').find('.' + className).is(':visible')){
                    e.preventDefault();
                    $('.rnb .depth-sub').find('.' + className).find('a:visible').first().focus();
                } else {
                    // 마지막일때
                    if ($rnbLeftLinks.index(this) == $rnbLeftLinks.length - 1){                        
                        e.preventDefault();
                        $('#container').find('a:visible').eq(0).focus();
                    }
                }
            }
        });
        // 마지막 a 태그에서 tab 클릭시 
        $('.rnb .depth-sub a').on('keydown', function(e){
            if ($('.rnb .depth-sub a:visible').last().get(0) == this){
                if (e.which == 9 && !e.shiftKey){
                    var $container = $(this).closest('[data-id]');
                    var id = $container.data().id;

                    if ( $container.length ){
                        $rnbLeftLinks.each(function( idx ){                        
                            if ( $(this).hasClass(id) ){
                                e.preventDefault();
                                $rnbLeftLinks.eq(idx + 1).focus();
                            }
                        });
                    }
                }
            }
        });

        // gsnb Mobile 3depth slider
        _this.subContainers = $('.gsnb.mobile .inner .owl-carousel > div');
        _this.carouselItemStatus = null;
        _this.$subMenuCarousel = $('.gsnb.mobile .inner .owl-carousel').owlCarousel({
            'items' : 1,
            'mouseDrag' : false,
            'touchDrag' : false,
            'pullDrag'  : false,
            'dots' : false,
            'loop' : false        
        }).on('changed.owl.carousel', function(e){
            //console.log('changed event', e);
            _this.carouselItemStatus = e;
        });

        $('.gsnb.mobile .inner .owl-carousel .owl-item > div > .items').eq(0).scrollbar({
            autoScrollSize : false
        });

        // gsnb event 1depth
        $('.gsnb.mobile .inner > .title > a').on('click', function(){
            var self = $(this);
            var gnbTop = Number( $('.M00_A').css('top').replace('px', '') );
            var gnbHeight = $('.M00_A .inner').height();
            var containerHeight = $(window).innerHeight() - (gnbHeight + gnbTop);
            //var containerHeight = screen.height - 112;
            if ( self.hasClass('on') ){
                $('.gsnb.mobile .inner .owl-carousel').stop().slideUp(300, function(){                    
                    _this.subContainers.eq(0).find(".scroll-wrapper .menulist .title a").removeClass('on');
                    _this.subContainers.eq(0).find(".scroll-wrapper .menulist ul.items").hide();
                    

                    if (_this.carouselItemStatus.item.count > 1){
                        _this.$subMenuCarousel.trigger('to.owl.carousel', 0).trigger('remove.owl.carousel', 1).trigger('refresh.owl.carousel');
                    }

                    $('body').removeClass('hid_s');

                    //console.log('submenu hide after ::::::::: carouselItemStatus', _this.carouselItemStatus);
                });
                self.attr("title", (langSet[_this.lang].menuState.activeStr).toString()).removeClass("on");

                if (_this.isIos()){
                    $('html').removeClass('ios');
                } 

            } else {                
                $('body').addClass('hid_s');

                if (_this.isIos()){
                    //alert('IOS TEST');
                    $('.gsnb.mobile .inner .owl-carousel').css({
                        'top' : ( gnbHeight + gnbTop ) + 'px',
                        //'height' : 'calc(100vh - '+ ( gnbHeight + gnbTop ) +'px)'
                        'height' : containerHeight + 'px'
                    });
                    $('html').addClass('ios');
                    
                } else {
                    $('.gsnb.mobile .inner .owl-carousel').css({
                        'top' : ( gnbHeight + gnbTop ) + 'px',
                        'height' : 'calc(100vh - '+ ( gnbHeight + gnbTop ) +'px)'
                    });
                    
                }

                _this.subContainers.eq(0).find(".scroll-wrapper > ul.items").show();

                $('.gsnb.mobile .inner .owl-carousel').stop().slideDown("fast", function(){
                    /*
                    if (_this.isIos()){
                        $('.gsnb.mobile .inner .owl-carousel .items.scroll-content').scrollTop(0);
                        $('.gsnb.mobile .inner .owl-carousel .items.scroll-content .scroll-element.scroll-y').scrollTop(0);
                    }
                    */
                });
                self.attr("title", (langSet[_this.lang].menuState.inactiveStr).toString()).addClass("on");
            }                
        });
        // gsnb event 2depth
        $('.gsnb.mobile .owl-carousel .menulist > .title > a').on('click', function(){

            var self = $(this);

            $(this).parent(".title").next(".items").slideToggle("fast", function(){
                if($(this).is(":visible")){
                    self.attr("title", (langSet[_this.lang].menuState.inactiveStr).toString()).addClass("on");
                }else{
                    self.attr("title", (langSet[_this.lang].menuState.activeStr).toString()).removeClass("on");
                }
            });
        });
        // gsnb event 3depth
        $('.gsnb.mobile .owl-carousel .menulist-sub:not(.no-child) > .title > a').on('click', function(){
            //console.log('3depth click1!!!');

            var $item = $(this).parent().next().clone();
            $item.addClass('menulist-sub').find('li').eq(0).off('click').on('click', function(){
                //console.log('3depth back!!!');
                var prevResult = _this.$subMenuCarousel.trigger('prev.owl.carousel', 200 )
                _this.$subMenuCarousel.trigger('remove.owl.carousel', 1).trigger('refresh.owl.carousel');
            });

            _this.$subMenuCarousel.trigger('add.owl.carousel', [ $item.show() ]).trigger('refresh.owl.carousel');
            _this.$subMenuCarousel.trigger('next.owl.carousel', 200 );

            $('.gsnb.mobile .inner .owl-carousel .owl-item > .items').scrollbar({
                autoScrollSize : false
            });
            //console.log('next event', $subMenuCarousel.trigger('next.owl.carousel', 200 ));
        });

        

        // window scroll
        var position = $(window).scrollTop();
        var isAnimating = false;
        var headerHeight = $('.gnb').height() + 1;
        var $rnbContainer = $(".rnb > .container").eq(0);
        var scollchkTimeout = null;

        $(window).on('scroll.gnb', function( e ) {  
            
            //console.log('e.target :::::::::::::::', e.target );
            
            if (e.target !== document){
                e.preventDefault();
                e.stopPropagation();
                return false;
            }

            if ($('body').hasClass('hid_s')){
                e.preventDefault();
                e.stopPropagation();
                return false;
            } 

            if (_this.gnbType == 'main' || _this.gnbType == 'static'){
                //_this.menuClose();
            } else {
                _this.subMenuClose();
            }

            //_this.gnbTopLinks.trigger('blur');

            var scroll = $(window).scrollTop();
            var hasTailBox = $('body').hasClass('tail_chk');
            var tailHeight = 0;

            if ( _this.isMobile ) hasTailBox = false;
            if (hasTailBox){
                tailHeight = $('.tail_wrap').height();
            }

            if (scroll == position) return;

            if(scroll > position) {                
                //console.log('position', position);
                //console.log('scrollDown', scroll);
                $('body').addClass('sc_down');

                if ( scroll > $('#header').offset().top ){
                    if (hasTailBox){
                        $gnb.css({
                            'transition' : 'top 0.2s',
                            'top' : '-'+ ($('.gnb').height() + 1 + tailHeight)  +'px',
                            'position': 'fixed'
                        });
                    } else {
                        if ( scroll > 60 ){
                            $gnb.css({
                                'transition' : '',
                                'top' : '-'+ ($('.gnb').height() + 1)  +'px',
                                'position': 'fixed'
                            });
                        }
                    }
                    
                } else {
                    if (hasTailBox){
                        $gnb.css({ 
                            'transition' : 'none',
                            'top' : ($('#header').offset().top - scroll - tailHeight ) + 'px'
                        });
                    } else {
                        if (scroll > 60){
                            $gnb.css({ 
                                'transition' : '',
                                'top' : ($('#header').offset().top - scroll) + 'px'
                            });
                        }
                        
                    }
                }

                if ( _this.gnbType == 'main' && scroll > 100){
                    gnbMainTransparentTimer.stop();
                }
            } else {
                //console.log('position', position);
                //console.log('scrollUp', scroll);
                $('body').removeClass('sc_down');
                
                if ( scroll > $('#header').offset().top ){
                    if (hasTailBox){
                        $gnb.css({
                            'transition' : 'top 0.2s',
                            'top' : '-'+ tailHeight +'px'
                        });
                        
                    } else {
                        $gnb.css({ 'top' : '0px'});
                    }
                    
                } else {                    
                    if (hasTailBox){
                        $gnb.css({
                            'transition' : 'none',                            
                            'top' : ($('#header').offset().top - scroll - tailHeight ) + 'px'
                        });
                    } else {
                        $gnb.css({
                            'top' : '0px'
                        });
                    }
                    
                }
                

                if ( _this.gnbType == 'main' && scroll < 101){   
                    if ( _this.isFocus == false ){
                        gnbMainTransparentTimer.start();
                    }
                }
            }
            position = scroll;

            window.clearTimeout(scollchkTimeout);
            scollchkTimeout = setTimeout(function(){
                //isAnimating = false;

                //console.log('scroll_chk run::::::::::::::::::::');
                
                if ( $(window).scrollTop() > 0 ){
                    $wrap.removeClass('scroll_chk');
                } else {
                    $wrap.addClass('scroll_chk');
                }
            },50);
        });

        // window Resize        
        $(window).on("resize", function(){
            gnbResizeTimer.start();
        });

        _this.$el.find(".rnb").css("right", getContainerRight()+"px");
        _this.$el.find(".history").css("right", getContainerRight()+"px");
    }

    _proto.resizeHandler = function(){
        //console.log('resizeHandler ::::::::::: run ');

        _this.setGnbHeight();
        

        _this.$el.find(".rnb").css("right", getContainerRight()+"px");
        _this.$el.find(".history").css("right", getContainerRight()+"px");

        //_this.searchBoxClose();
        _this.setDefaultSearchBox();

        _this.setHeightRightContainer();
        _this.gnbChildpanelStyle("windowResize");
        _this.gnbItemScrollStyle("windowResize", $(".gnb .hd-cnt .menu > li").find("> .title a"));
        
        if (_this.isMobile){
            _this.setSizeSubmenuMobile();            
        } else {
            _this.setSticky();
            _this.initSubmenuSizeIEFIX();
            //_this.initSubmenuSize();
            _this.closeMobileGsnb();
        }

        // detect mobile device
        if (_this.isMobileDevice){
            $('body').addClass('hid_sm');
        } else {
            $('body').removeClass('hid_sm');
        }
    }

    _proto.setRnb = function(id, callback){        
        $(".rnb .depth-main li").removeClass("on").find("."+id).closest("li").addClass("on");
        var $current = $(".rnb .depth-sub > *.on");
        var $target = $(".rnb .depth-sub > *."+id);

        // animate ver 
        $current.stop().css({"display":"block", "position":"absolute"}).transition({
            x: $('.depth-sub').outerWidth() +"px",
        }, 400, "easeInOutQuint", function(){
            $(this).css("display","none").removeClass("on");
            // current 메뉴 초기화
            $current.find('ul.items li').each(function(){
                $(this).find('> .title > a').removeClass('on');
                $(this).find('> ul.items').hide();
            });
        });        

        $target.stop().delay(400).css({"display":"block", "position":"absolute"}).transition({
            x: 0+"px",
        }, 400, "easeOutQuint", function(){
            $(this).css("position","relative").addClass("on");
            if (callback) callback();
        });

        /* no animate ver
        $(".rnb .depth-sub > *").each(function(i, el){
            if($(this).hasClass(id)){
                $(this).css("display", "block");
            }else{
                $(this).css("display", "none");
            }
        });*/
    }

    _proto.setHeightRightContainer = function(){
        var etcContainerOffset = $('#header').offset();
        var $historyContainer = $('.gnb .util .history');
        var $rnbContainer = $('.gnb .util .rnb');
        var height;
        if ( _this.isMobile ){
            if ( _this.isIos() ){
                height = $(window).innerHeight();

                $historyContainer.css({
                    'height' : height + 'px'
                });

                $rnbContainer.css({
                    'height' : height + 'px'
                });
            } else {
                $historyContainer.css({
                    'height' : ''
                });

                $rnbContainer.css({
                    'height' : ''
                });
            }
            
        } else {
            var offTop = null;
            if (_this.gnbType == 'main' || _this.gnbType == 'static'){
                offTop = ( etcContainerOffset.top + _this.$el.height() - 1 );
            } else {
                offTop = ( etcContainerOffset.top + _this.$el.height() - 1 ) - $('.gsnb:not(.mobile)').height();
            }

            if ($('body').hasClass('tail_chk')){
                offTop = $('.M00_A .gnb').offset().top - $(window).scrollTop() + _this.$el.height();
            }
            $historyContainer.css({
                'height' : 'calc(100vh - '+ offTop +'px)'
            });

            $rnbContainer.css({
                'height' : 'calc(100vh - '+ offTop +'px)'
            });
        }

        
    }

    _proto.menuClose = function(){
        //$(".gnb .hd-cnt .menu > li").removeClass("on");
        $(".gnb .hd-cnt .menu > li:not('.no-child')").removeClass("on").find('> .title > a').attr('aria-selected','false');       
    }

    _proto.subMenuClose = function(){
        if (_this.inFocus) return;

        $(".gsnb li.offering-list").removeClass("on")
            .find("> .title > a").attr("title", langSet[_this.lang].menuState.activeStr);
    }

    _proto.searchBoxClose = function(){
        if (_this.isMobile){
            $('.search_box').stop().css({
                'left' : $('.search_box').width() + 'px'
            }).hide();
        } else {
            $('.search_box').stop().css({
                'left' : '0px'
            }).hide();
        }
        $('body').removeClass('hid_s');
        $('.hd-etc .btn-search').removeClass('on');
        $('.search_box form .input').val('');        
        
    }

    _proto.rnbMenuClose = function(){         
        $(".btn_hamburger").removeClass("active").removeAttr("disabled");
        $(".rnb").css("display", "none");
        $(".rnb > .container").eq(0).stop().css({ 'right' : '-' + $(".rnb > .container").eq(0).width() + 'px' });
        $('body').removeClass('hid_s');
        _this.setDefaultRnb();       
    }

    _proto.historyMenuClose = function(){
        $(".btn-history").removeClass("on");
        $(".history").removeClass("on").find(".container").stop().css({
            right: -1*$(".history").width(),
            opacity: 1
        });
        $(".history").css("display", "none");
        $('body').removeClass('hid_s');       
    }

    // rnb 초기화
    _proto.setDefaultRnb = function(id){
        //console.log(id);
        $(".rnb .depth-main li").removeClass("on").eq(0).addClass("on");
        var $current = $(".rnb .depth-sub > *.on");
        var $target = $(".rnb .depth-sub > *").eq(0);

        // animate ver 
        $current.stop().css({"display":"block", "position":"absolute"}).transition({ 
            x: $('.depth-sub').outerWidth() +"px",
        }, 0, "easeInOutQuint", function(){
            $(this).css("display","none").removeClass("on");
            // current 메뉴 초기화
            $current.find('ul.items li').each(function(){
                $(this).find('> .title > a').removeClass('on');
                $(this).find('> ul.items').hide();
            });
        });
        //$('.box').transition({ x: '40px' });

        $target.stop().css({"display":"block", "position":"absolute"}).transition({
            x: 0+"px",
        }, 0, "easeOutQuint", function(){
            $(this).css("position","relative").addClass("on");
        });
    }

    _proto.closeMobileGsnb = function(){
        $('.gsnb.mobile .inner .owl-carousel').stop().hide();
        _this.subContainers.eq(0).find(".scroll-wrapper .menulist .title a").removeClass('on');
        _this.subContainers.eq(0).find(".scroll-wrapper .menulist ul.items").hide();        

        if (!!_this.carouselItemStatus && _this.carouselItemStatus.item.count > 1){
            _this.$subMenuCarousel.trigger('to.owl.carousel', 0).trigger('remove.owl.carousel', 1).trigger('refresh.owl.carousel');
        }

        $('body').removeClass('hid_s');

        //console.log('submenu hide after ::::::::: carouselItemStatus', _this.carouselItemStatus);
        $('.gsnb.mobile .inner > .title > a').attr("title", (langSet[_this.lang].menuState.activeStr).toString()).removeClass("on");
    }

    _proto.gnbItemScrollStyle = function(eventType, $menuBtn){
        // console.log("::: gnbItemScrollStyle", $menuBtn)
        var $menuWrap = $menuBtn.closest("li");
        var $childpanel = $menuWrap.find("> .childpanel");

         // sds 사업부 전달 높이값
        var sdsMaxHeight = {
            offering: 765
        };

        switch (eventType) {
            case "windowResize":
                $childpanel = $childpanel.filter(".offering"); // 오퍼링 메뉴에만 적용(기타 메뉴도 적용시, 해당 라인 삭제)

                $childpanel.data({
                    "hasScroll": false
                }).css({
                    "height": "inherit",
                    "overflow-y": "none"
                })
                break;
            case "mouseout":
            case "focusout":
                if(!$childpanel.hasClass("offering")) break; // 오퍼링 메뉴에만 적용(기타 메뉴도 적용시, 해당 라인 삭제)

                if(!$childpanel.length) break; // $childpanel 없는 경우
                if(!$menuBtn.is(":hover") && !$menuBtn.is(":focus")) break; // $menuBtn 포커스 or 마우스오버가 아닌경우: 이벤트 버블링, 캡쳐 관련

                $childpanel.data({
                    "hasScroll": false
                }).css({
                    "height": "inherit",
                    "overflow-y": "none"
                })
                break;
            case "mouseover":
            case "focus":
                if(!$childpanel.hasClass("offering")) break; // 오퍼링 메뉴에만 적용(기타 메뉴도 적용시, 해당 라인 삭제)

                if(!$childpanel.length) break; // $childpanel 없는 경우
                if(!$menuBtn.is(":hover") && !$menuBtn.is(":focus")) break; // $menuBtn 포커스 or 마우스오버가 아닌경우: 이벤트 버블링, 캡쳐 관련

                if($childpanel.data("hasScroll")) break; // 이미 스크롤이 있는경우

                var distance = $(".M00_A .gnb").height();
                if ($('body').hasClass('tail_chk') && $(window).scrollTop() === 0){
                    distance += $('.tail_wrap').height();
                }

                var maxHeight = $(window).height() < sdsMaxHeight.offering ? $(window).height() : sdsMaxHeight.offering;

                if(distance + $childpanel.innerHeight() <= maxHeight){
                    $childpanel.data({
                        "hasScroll": false
                    }).css({
                        "height": "inherit",
                        "overflow-y": "none"
                    })
                    break;
                }

                $childpanel.data({
                    "hasScroll": true
                }).css({
                    "height": maxHeight - distance,
                    "overflow-y": "auto"
                })
                break;
            default:
                console.log("plase check event tpye", eventType)
                break;
        }
    }

    _proto.setDefaultSearchBox = function(){
        if (_this.isMobile){
            /*
            $('.search_box').stop().css({
                'left' : $('.search_box').width() + 'px'
            });
            */
        } else {
            $('.search_box').stop().css({
                'left' : '0px'
            });
        }
    }

    _proto.setTextByCountry = function(){
        var currentLangSet = langSet[_this.lang];
        //console.log('currentLangSet' , currentLangSet);
        // history
        _this.$el.find('.btn-history .blind').text(currentLangSet.history.activeStr);
        _this.$el.find('.hd-etc .history .header .btn-close .blind').text(currentLangSet.history.close);
        _this.$el.find('.hd-etc .history .header > p').text(currentLangSet.history.title);
        _this.$el.find('.hd-etc .history .header > span').text(currentLangSet.history.desc);
        _this.$el.find('.hd-etc .history .header .btn-clear').text(currentLangSet.history.clearall);

        // search
        _this.$el.find('.btn-search .blind').text(currentLangSet.search.activeStr);
        _this.$el.find('.hd-etc .search_box .btn-close .blind').text(currentLangSet.search.close);
        _this.$el.find('.hd-etc .search_box form > legend').text(currentLangSet.search.search);
        _this.$el.find('.hd-etc .search_box form label.blind').text(currentLangSet.search.search);
        _this.$el.find('.hd-etc .search_box form .in .input').attr('placeholder', currentLangSet.search.placeholder)
                                                              .attr('title', currentLangSet.search.placeholder);
        _this.$el.find('.hd-etc .search_box form .in .delete .blind').text(currentLangSet.search.clear)
        _this.$el.find('.hd-etc .search_box form .in .sch .blind').text(currentLangSet.search.search);


    }

    _proto.scrollLock = function(){
        $('body').addClass('hid_s');
    }

    _proto.scrollUnlock = function(){
        $('body').removeClass('hid_s');
    }

    _proto.getUrlParams = function(){
        var params = {};
        window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(str, key, value) { params[key] = value; });
        return params;
    }

    function getContainerRight(){
        var right = Math.floor(($(window).width() - _this.$el.find("> .inner").width())/2);
        return right;
    }

    function getCurrentWidth(){
        return window.innerWidth >= $(document).width() ? window.innerWidth : $(document).width();
    }


    this.init();
}
//fo.addPlugin(M00_A);


// GNB 생성후에 강제로 처리해야 할때 
function afterFIX(){
    // 보안컨설팅 서브 메뉴 css 수정
    if (_this.data.current == 'gkr1d'){                    
        //$('.offering-list .offering-list-sub').css({'width' : '300px', 'margin-left' : '0px'});
        //$('.offering-list > .items').css({ 'height' : '425px'});
    }
}





/*** M01_A | Hero ***/
function M01_A(el) {
    _proto = M01_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.startIndex = 0;
    this.currentIndex = this.startIndex;

    this.$carousel = this.$el.find(".md_visual");
    this.$carouselItem = this.$el.find(".md_visual .li");
    
    this.$pagn = this.$el.find(".md_pagn");
    this.$timer = this.$el.find(".md_timer p");
    this.$control = {
        wrap: this.$el.find(".md_play"),
        playBtn: this.$el.find(".md_btn_play"),
        stopBtn: this.$el.find(".md_btn_stop")
    };

    this.$txtArea = this.$carousel.find(".txt");
    this.$visualArea = this.$carousel.find(".img .img_p, .img .img_m");

    var _this = this;
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";
    
    _proto.init = function(){
        //console.log("init:: M01_A")

        // Device type check
        deviceType = checkDeviceType();
        
        // Set visual img
        this.setVisualImg();
        // Set visual txt break
        this.setTxtBreak();

        // FIREFOX
        this.$visualArea.find('video').attr('tabindex', -1);

        if(this.$carouselItem.length < 2){
            this.$pagn.remove();
            this.$timer.parent().remove();
            this.$control.wrap.remove();
            this.$carouselItem.eq(0).addClass("act");
            return;
        }

        // Set carousel
        setCarousel(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarouselStyle(_this);
                updateCarouselAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.parent().css({
            "height": "100%"
        })
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    // Set visual txt break
    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find(".md_tit");

        $title.lettering('lines');
        $title.find("span").wrapInner('<i></i>');
    }

    _proto.addEvent = function(){
        _this.$carouselItem.on({
            focusin: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isPagnToSlide = $(e.relatedTarget).is(_this.$pagn);

                        if(!isPagnToSlide){
                            var currentIndex = _this.$carouselItem.index(e.delegateTarget);
                        }else{
                            var currentIndex = 0;
                            _this.$carouselItem.eq(0).find("a, button").first().focus();
                        }

                        _this.$carousel.trigger("slideTo", [currentIndex, 0, true] );
                        break;
                    // default:
                    //     break;
                }
            },
            focusout: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isSameSequence = $(e.delegateTarget).find(e.relatedTarget).length;
                        var isLastSequence = $(e.delegateTarget).is(_this.$carouselItem.last());
                        
                        if(!isSameSequence && isLastSequence){
                            _this.$pagn.focus();
                        }
                        break;
                    // default:
                    //     break;
                }
            }
        });

        _this.$control.stopBtn.on("click", function(e){
            e.preventDefault();
            sequenceControl(_this, "STOP", true);
            return false;
        });

        _this.$control.playBtn.on("click", function(e){
            e.preventDefault();
            sequenceControl(_this, "PLAY", true);
            return false;
        });
        
        _this.$carousel.on("focusin", function(){
            sequenceControl(_this, "STOP", false);
        })  

        _this.$pagn.on("focusin", function(e){
            if(!$(e.target).is(":hover")){
                sequenceControl(_this, "STOP", false);
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        }) 
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }
    
    // Set carousel
    function setCarousel(_plugin){
        _plugin.$carousel.carouFredSel({
            responsive: true,
            height: $(window).height(), // has tail => MP_page.css => .tail_chk .M01_A_cont, ... {height:calc(100vh - 70px) !important;}
            auto:{
                play: false,
                progress: _plugin.$timer,
                timeoutDuration:7000
            },
            prev: false,
            next: false,
            pagination:{
                container: _plugin.$pagn,
                anchorBuilder: function(nr) {
                    return '<a href="#">'+ (nr < 10 ? "0"+nr : nr) +'</a>';
                }
            },
            items: {
                start: _plugin.currentIndex,
                visible: 1,
                height: $(window).height() // has tail => MP_page.css => .tail_chk .M01_A_cont, ... {height:calc(100vh - 70px) !important;}
            },
            swipe: {
                onMouse: true,
                onTouch: true
            },
            scroll: {
                fx: "fade",
                duration: 0,
                items: 1,
                onAfter: function(data){
                    _plugin.currentIndex = _plugin.$carouselItem.index(data.items.visible);

                    _plugin.$carouselItem.eq(_plugin.currentIndex).find("video").currentTime = 0;
                    _plugin.$carouselItem.removeClass("act").eq(_plugin.currentIndex).addClass("act");

                    // Update
                    updateControl(_plugin);
                    updateCarouselAria(_plugin);
                }
            },
            onCreate: function(){
                _plugin.$control.playBtn.find(".blind").text((langSet[lang]["slide"]["playStr"]).toString());
                _plugin.$control.stopBtn.find(".blind").text((langSet[lang]["slide"]["pauseStr"]).toString());

                _plugin.$carouselItem.eq(_plugin.currentIndex).find("video").currentTime = 0;
                _plugin.$carouselItem.removeClass("act").eq(_plugin.currentIndex).addClass("act");

                // Update
                updateControl(_plugin);
                updateCarouselAria(_plugin);
                updateControl(_plugin);
            }
        });
    }

    // Set carousel Style
    function updateCarouselStyle(_plugin){
        _plugin.$carousel.trigger("configuration", {
            "height": $(window).height(), // has tail => MP_page.css => .tail_chk .M01_A_cont, ... {height:calc(100vh - 70px) !important;}
            items: {
                "height": $(window).height() // has tail => MP_page.css => .tail_chk .M01_A_cont, ... {height:calc(100vh - 70px) !important;}
            }
        });
        _plugin.$carousel.trigger("updateSizes");
    }

    // Set carousel Aria
    function updateCarouselAria(_plugin){
        _plugin.$carouselItem.attr("aria-hidden", true).find("a, button").attr("tabindex", -1);
        _plugin.$carouselItem.eq(_plugin.currentIndex).removeAttr("aria-hidden").find("a, button").removeAttr("tabindex");
        _plugin.$pagn.is("[tabindex]") && _plugin.$pagn.removeAttr("tabindex");
    }

    // Update Control
    function updateControl(_plugin){
        if(!_plugin.$control.wrap.hasClass("on")){
            sequenceControl(_plugin, "PLAY", false);
        }else{
            sequenceControl(_plugin, "STOP", false);
        }
    }

    // Sequence Control: play, stop
    function sequenceControl(_plugin, option, changeFocus){
        switch (option) {
            case "PLAY":
                _plugin.$carousel.trigger("isPaused", function(){
                    _plugin.$control.wrap.removeClass('on');
                    _plugin.$carousel.trigger('play', true);
                    _plugin.$carouselItem.find("video").trigger('play');

                    changeFocus && _plugin.$control.stopBtn.focus();
                })
                break;
            case "STOP":
                _plugin.$carousel.trigger("isScrolling", function(){
                    _plugin.$control.wrap.addClass('on');
                    _plugin.$carousel.trigger('pause', true);
                    _plugin.$carouselItem.find("video").trigger('pause');

                    changeFocus && _plugin.$control.playBtn.focus();
                })
                break;
            // default:
            //     break;
        }
    }

    this.init();
}

fo.addPlugin(M01_A);





/*** M01_B | Hero2 ***/
function M01_B(el) {
    _proto = M01_B.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.$txtArea = this.$el.find(".txt");
    this.$visualArea = this.$el.find(".img .img_p, .img .img_m");

    var _this = this;
    
    _proto.init = function(){
        //console.log("init:: M01_B")
        
        // Set visual img
        this.setVisualImg();
        // Set visual txt break
        this.setTxtBreak();
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    // Set visual txt break
    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find('.md_tit');
        
        $title.lettering('lines');
        $title.filter(".ani").find('span').wrapInner('<i></i>');
        this.$txtArea.addClass('act');
    }

    this.init();
}

fo.addPlugin(M01_B);







/*** M01_C | Hero3 ***/
function M01_C(el) {
    _proto = M01_C.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.$txtArea = this.$el.find(".txt");

    var _this = this;
    
    _proto.init = function(){
        //console.log("init:: M01_C")
        
        // Set visual txt break
        this.setTxtBreak();
    }

    // Set visual txt break
    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find('.md_tit');
        
        $title.lettering('lines');
        $title.find('span').wrapInner('<i></i>');
        this.$txtArea.addClass('act');
    }

    this.init();
}

fo.addPlugin(M01_C);







/*** M01_D | Hero4 ***/
function M01_D(el) {
    _proto = M01_D.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.$contWrap = this.$el.find(".M01_D_cont");
    this.$txtArea = this.$el.find(".txt");
    this.$visualArea = this.$el.find(".img .img_p, .img .img_m");

    var _this = this;
    var resizeTimer;
    
    _proto.init = function(){
        //console.log("init:: M01_D")
        
        // Set visual img
        this.setVisualImg();
        // Set visual txt break
        this.setTxtBreak();

        resizeTimer = new Timer(function(){
            setTxtHeight(_this);
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    // Set visual txt break
    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find('.md_tit');
        
        $title.lettering('lines');
        $title.find('span').wrapInner('<i></i>');
        this.$contWrap.addClass('act');
    }

    _proto.addEvent = function(){
        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        }) 
    }

    // Set textarea height
    function setTxtHeight(_plugin){
        _plugin.$txtArea.css({
            "height": $(window).height() - 60
        })
    }

    this.init();
}

fo.addPlugin(M01_D);







/** M04_B | Related Offering 2 **/
function M04_B(el) {
    _proto = M04_B.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$el.find(".owl-carousel .item");
    this.$pagn = this.$el.find(".owl-pagn");

    var _this = this; // M04_B
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;

    _proto.init = function(){
        //console.log("init:: M04_B")

        // Device type check
        deviceType = checkDeviceType();

        if(this.$carouselItem.length < 2){
            this.$pagn.remove();
            return;
        }

        updateCarousel(this);
        setAriaAttr(this);
        
        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();
    
            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarousel(_this);
                setAriaAttr(_this);
            }
        }, 100);
        
        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    _proto.addEvent = function(){
        _this.$carouselItem.on("focusin", function(e){
            // [default] in focus not click
            if(!$(e.target).is(":hover")){
                var currentIndex = _this.$carouselItem.index(e.delegateTarget);
                _this.$carousel.trigger('to.owl.carousel', currentIndex);
                _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
            }
        })
        
        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }

            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }
    
    function setCarousel(_plugin){
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            loop: true,
            nav: false,
            dots: false,
            items: 1,
            margin: 16,
            smartSpeed: 500,
            onInitialized: function(e){
                initPagn(e, _plugin);
            },
            onRefreshed: function(e){ // FIREFOX
                initPagn(e, _plugin);
            },
            onChanged: function(e){
                updatePagn(e, _plugin);
            },
        });
    }

    function updateCarousel(_plugin){
        switch (deviceType) {
            case "PC":
            case "TABLET":
                destroyCarousel(_plugin);
                break;
            case "MOBILE":
                setCarousel(_plugin);
                break;
            // default:
            //     break;
        }
    }

    function initPagn(e, _plugin){
        var activeIndex = 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex)+" of "+setNum(e.item.count);

        _plugin.$pagn.find('.owl-pagn-st').text(setNum(activeIndex));
        _plugin.$pagn.find(".owl-pagn-ed").text(setNum(e.item.count));

        _plugin.$pagn.attr("aria-live","polite");
        _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden",true);
        
        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find('.owl-pagn-bar p').css('width', barWidth + '%');
    }

    function updatePagn(e, _plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }
        
        var slides = e.relatedTarget;

        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex)+" of "+setNum(e.item.count);

        _plugin.$pagn.find('.owl-pagn-st').text(setNum(activeIndex));

        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find('.owl-pagn-bar p').css('width', barWidth + '%');
    }
    
    function destroyCarousel(_plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel('destroy');
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    function setAriaAttr(_plugin){
        switch (deviceType) {
            case "PC":
            case "TABLET":
                _plugin.$carousel
                    .find(".item").removeAttr("aria-hidden")
                    .find("a, button").removeAttr('tabindex'); 
                break;
            case "MOBILE":
                _plugin.$carousel
                    .find(".cloned .item").attr("aria-hidden", true)
                    .find("a, button").attr('tabindex', -1); 
                break;
            // default:
            //     break;
        }
    }

    this.init();
}

fo.addPlugin(M04_B);







/** M04_D | Related Offering 3 **/
function M04_D(el) {
    _proto = M04_D.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$el.find(".owl-carousel .item");
    this.$pagn = this.$el.find(".owl-pagn");

    var _this = this; // M04_D
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;

    _proto.init = function(){
        //console.log("init:: M04_D")

        // Device type check
        deviceType = checkDeviceType();

        if(this.$carouselItem.length < 2){
            this.$pagn.remove();
            return;
        }

        updateCarousel(this);
        setAriaAttr(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();
    
            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarousel(_this);
                setAriaAttr(_this);
            }
        }, 100);
        
        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    _proto.addEvent = function(){
        _this.$carouselItem.on("focusin", function(e){
            // [default] in focus not click
            if(!$(e.target).is(":hover")){
                var currentIndex = _this.$carouselItem.index(e.delegateTarget);
                _this.$carousel.trigger('to.owl.carousel', currentIndex);
                _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
            }
        })
        
        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }

            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }
    
    function setCarousel(_plugin){
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            loop: true,
            nav: false,
            dots: false,
            items: 1,
            margin: 16,
            smartSpeed: 500,
            onInitialized: function(e){
                initPagn(e, _plugin);
            },
            onRefreshed: function(e){ // FIREFOX
                initPagn(e, _plugin);
            },
            onChanged: function(e){
                updatePagn(e, _plugin);
            },
        });
    }

    function updateCarousel(_plugin){
        switch (deviceType) {
            case "PC":
            case "TABLET":
                destroyCarousel(_plugin);
                break;
            case "MOBILE":
                setCarousel(_plugin);
                break;
            // default:
            //     break;
        }
    }

    function initPagn(e, _plugin){
        var activeIndex = 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex)+" of "+setNum(e.item.count);

        _plugin.$pagn.find('.owl-pagn-st').text(setNum(activeIndex));
        _plugin.$pagn.find(".owl-pagn-ed").text(setNum(e.item.count));

        _plugin.$pagn.attr("aria-live","polite");
        _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden",true);
        
        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find('.owl-pagn-bar p').css('width', barWidth + '%');
    }

    function updatePagn(e, _plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }
        
        var slides = e.relatedTarget;

        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex)+" of "+setNum(e.item.count);

        _plugin.$pagn.find('.owl-pagn-st').text(setNum(activeIndex));

        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find('.owl-pagn-bar p').css('width', barWidth + '%');
    }
    
    function destroyCarousel(_plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel('destroy');
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    function setAriaAttr(_plugin){
        switch (deviceType) {
            case "PC":
            case "TABLET":
                _plugin.$carousel
                    .find(".item").removeAttr("aria-hidden")
                    .find("a, button").removeAttr('tabindex'); 
                break;
            case "MOBILE":
                _plugin.$carousel
                    .find(".cloned .item").attr("aria-hidden", true)
                    .find("a, button").attr('tabindex', -1); 
                break;
            // default:
            //     break;
        }
    }

    this.init();
}

fo.addPlugin(M04_D);







/** M05_A | Industry */
function M05_A(el) {
    _proto = M05_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$tabList = this.$el.find(".tab_nav");
    this.$tabListBtn = this.$tabList.find("a, button");
    this.$tabPanel = this.$el.find(".tab_cont");

    this.$visualArea = this.$el.find(".img .img_p");

    this.$carousel = [];
    this.$carouselItem = [];
    this.$pagn = [];

    this.key = Math.floor(this.$el.offset().top);
    this.activeTab = 0;
    this.mhItems;
    this.lengthArr = [];

    var _this = this; // M05_A
    var deviceType; // "PC_LARGE", "PC_SMALL", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";
    
    _proto.init = function(){
        //console.log("init:: M05_A")

        // Device type check
        deviceType = checkDeviceType();

        if(this.$el.find(".cont_all").length){
            this.$tabList.remove();
        }else{
            setOpenTab(this);
            setTabAria(this);
        }

        // Set visual img
        this.setVisualImg();

        // Set each slide
        for (var index = 0; index < _this.$tabPanel.length; index++) {
            this.lengthArr.push(index);
        }
        this.lengthArr.map(function(index){
            var $currentPanel = _this.$tabPanel.eq(index);
            var $innerWrap = $currentPanel.find(".M05_A_inner");

            _this.$carousel.push($currentPanel.find(".owl-carousel"));
            _this.$carouselItem.push($currentPanel.find(".owl-carousel .item"));
            _this.$pagn.push($currentPanel.find(".owl-pagn"));
            
            $innerWrap.addClass("m" + _this.$carouselItem[index].length);
            updateCarousel(_this, index);
            updatePagnAria(_this, index);
        });

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                _this.lengthArr.map(function(index){
                    updateCarousel(_this, index);
                    updatePagnAria(_this, index);
                });
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    _proto.addEvent = function(){
        // Tab button click
        _this.$tabListBtn.on("click", function(){
            _this.activeTab = _this.$tabListBtn.index($(this));
            setOpenTab(_this);
        })

        _this.$tabPanel.find(".item").on("focusin", function(e){
            if($(e.target).is(":hover")){
                return;
            }
            var panelIndex = _this.$tabPanel.index($(this).parents(".tab_cont"));
            var itemIndex = _this.$carouselItem[panelIndex].index(e.delegateTarget);
            _this.$carousel[panelIndex].trigger('to.owl.carousel', itemIndex);
            _this.$carousel[panelIndex].children().scrollLeft() != 0 && _this.$carousel[panelIndex].children().scrollLeft(0);
        })

        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            var panelIndex = _this.$tabPanel.index($(this).find(".tab_cont.on"));
            if(!_this.$carousel[panelIndex].data("owl.carousel")){
                return;
            }

            if(e.keyCode == 37){
                console.log("left");
                _this.$carousel[panelIndex].trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                console.log("right");
                _this.$carousel[panelIndex].trigger('next.owl.carousel');
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1400){
            return "PC_LARGE";
        }else if (window.innerWidth > 1023){
            return "PC_SMALL";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin, index){
        if(_plugin.$carousel[index].data("owl.carousel")){
            return;
        }

        _plugin.$carousel[index].owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            autoWidth: true,
            loop: true,
            nav:true,
            navText: [
                '<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>',
                '<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>'
            ],
            dots: false,
            items:5,
            smartSpeed: 500,
            responsive:{
                0:{
                    margin:16, 
                }, 
                500:{
                    margin:16, 
                },
                1023:{
                    margin:26,
                }
            },
            onInitialized: function(e){
                initPagn(e, _plugin, index);
                setCarouselAria(_plugin, index);

                if(index !== _plugin.activeTab){
                    _plugin.$carousel[index].addClass("owl-hidden");
                }else{
                    _plugin.$carousel[index].removeClass("owl-hidden");
                }
            },
            onRefreshed: function(e){ // FIREFOX
                initPagn(e, _plugin, index);
                setCarouselAria(_plugin, index);

                if(index !== _plugin.activeTab){
                    _plugin.$carousel[index].addClass("owl-hidden");
                }else{
                    _plugin.$carousel[index].removeClass("owl-hidden");
                }
            },
            onChanged: function(e){
                updatePagn(e, _plugin, index);
            },
        });
    }

    function destroyCarousel(_plugin, index){
        if(!_plugin.$carousel[index].data("owl.carousel")){
            return;
        }

        _plugin.$carousel[index].owlCarousel('destroy');
    }

    function setCarouselAria(_plugin, index){
        var $clonedItem = _plugin.$carousel[index].find('.owl-item.cloned');

        $clonedItem.attr("aria-hidden", true)
        $clonedItem.find("a, button").attr('tabindex', -1);
    }

    function updateCarousel(_plugin, index){
        var $carouselItem = _plugin.$carouselItem[index];

        switch (deviceType) {
            case "PC_LARGE":
                ($carouselItem.length < 4)
                    ? destroyCarousel(_plugin, index) // 1,2,3
                    : setCarousel(_plugin, index) // 4,5,6,7...
                break;
            case "PC_SMALL":
                ($carouselItem.length < 3)
                    ? destroyCarousel(_plugin, index) // 1,2
                    : setCarousel(_plugin, index) // 3,4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                ($carouselItem.length < 2)
                    ? destroyCarousel(_plugin, index) // 1
                    : setCarousel(_plugin, index) // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }
    }

    function updatePagnAria(_plugin, index){
        var $carouselItem = _plugin.$carouselItem[index];
        var $pagn = _plugin.$pagn[index];

        switch (deviceType) {
            case "PC_LARGE":
                ($carouselItem.length < 4)
                    ? $pagn.attr("aria-live", "off") // 1,2,3
                    : $pagn.attr("aria-live", "polite") // 4,5,6,7...
                break;
            case "PC_SMALL":
                ($carouselItem.length < 3)
                    ? $pagn.attr("aria-live", "off") // 1,2
                    : $pagn.attr("aria-live", "polite") // 3,4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                ($carouselItem.length < 2)
                    ? $pagn.attr("aria-live", "off") // 1
                    : $pagn.attr("aria-live", "polite") // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }
        
        $pagn.find(".owl-pagn-inner").not("[aria-hidden]")
            && $pagn.find(".owl-pagn-inner").attr("aria-hidden", true);
    }

    function initPagn(e, _plugin, index){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);

        _plugin.$pagn[index].attr("aria-labelledby", ariaTxt);
        _plugin.$pagn[index].find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn[index].find(".owl-pagn-st").text(setNum(activeIndex));
        _plugin.$pagn[index].find(".owl-pagn-ed").text(setNum(e.item.count));
    }

    function updatePagn(e, _plugin, index){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);
        
        if(isNaN(activeIndex)) return;
        
        _plugin.$pagn[index].attr("aria-labelledby", ariaTxt);
        _plugin.$pagn[index].find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn[index].find(".owl-pagn-st").text(setNum(activeIndex));
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }
    
    // Apply aria properties
    function setTabAria(_plugin){
        _plugin.$tabList
            .attr("role", "tablist") // fixed
            .find("li")
            .attr("role", "presentation"); // fixed

        _plugin.$tabListBtn.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "tab", // fixed
                "id": "tab_btn_"+ key, // fixed
                "aria-controls": "tab_panel_"+ key, // fixed
                "aria-selected": false // changeable
            });
        });

        _plugin.$tabPanel.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "region", // fixed
                "id": "tab_panel_"+ key, // fixed
                "aria-labelledby": "tab_btn_"+ key, // fixed
            });
        });
    }

    function setOpenTab(_plugin){
        // Exception, if there is no activation tab
        if(_plugin.activeTab >= _plugin.$tabPanel.length){
            return;
        }

        // Activate tab button
        _plugin.$tabListBtn
            .attr({
                "aria-selected": false
            })
            .parent()
            .removeClass("on");
        _plugin.$tabListBtn
            .eq(_plugin.activeTab)
            .attr({
                "aria-selected": true
            })
            .parent()
            .addClass("on");

        // Activate tab panel
        _plugin.$tabPanel
            .removeClass("on")
            .eq(_plugin.activeTab)
            .addClass("on");
    }

    this.init();
}

fo.addPlugin(M05_A);







/** M06_A | Award */
function M06_A(el) {
    _proto = M06_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$visualArea = this.$el.find(".img .img_p");

    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$el.find(".owl-carousel .item");
    this.$pagn = this.$el.find(".owl-pagn");
    
    var _this = this; // M06_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";

    _proto.init = function(){
        //console.log("init:: M06_A")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual img
        this.setVisualImg();

        this.$el.find(".M06_A_cont").addClass("m"+this.$carouselItem.length);

        if(this.$carouselItem.length < 2) return;

        updateCarousel(this);
        updatePagnAria(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarousel(_this);
                updatePagnAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    _proto.addEvent = function(){
        _this.$carouselItem.on("focusin", function(e){
            if($(e.target).is(":hover")){
                return;
            }

            var currentIndex = _this.$carouselItem.index(e.delegateTarget);
            _this.$carousel.trigger('to.owl.carousel', currentIndex);

            _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
            _this.$el.scrollLeft() != 0 && _this.$el.scrollLeft(0);
        })

        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }
            
            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            autoWidth:true,
            loop: true,
            nav:true,
            navText: [
                '<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>',
                '<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>'
            ],
            dots: false,
            smartSpeed: 500,
            onInitialized: function(e){
                initPagn(e, _plugin);
                setCarouselAria(_plugin);

                _plugin.$carousel.addClass("act");
            },
            onRefreshed: function(e){ // FIREFOX
                initPagn(e, _plugin);
                setCarouselAria(_plugin);

                _plugin.$carousel.addClass("act");
            },
            onChanged: function(e){
                updatePagn(e, _plugin);

                _plugin.$carousel.removeClass("act");
            },
        });
    }

    function updateCarousel(_plugin){
        switch (deviceType) {
            case "PC":
                (_plugin.$carouselItem.length < 3)
                    ? destroyCarousel(_plugin) // 1,2
                    : setCarousel(_plugin) // 3,4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                (_plugin.$carouselItem.length < 2)
                    ? destroyCarousel(_plugin) // 1
                    : setCarousel(_plugin) // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }
    }

    function setCarouselAria(_plugin){
        var $clonedItem = _plugin.$carousel.find('.owl-item.cloned');

        $clonedItem.attr("aria-hidden", true)
        $clonedItem.find("a, button").attr('tabindex', -1); 
    }

    function initPagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);

        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(activeIndex));
        _plugin.$pagn.find(".owl-pagn-ed").text(setNum(e.item.count));
    }

    function updatePagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);
        
        if(isNaN(activeIndex)) return;
        
        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(activeIndex));
    }

    function updatePagnAria(_plugin){
        switch (deviceType) {
            case "PC":
                (_plugin.$carouselItem.length < 3)
                    ? _plugin.$pagn.attr("aria-live","off") // 1,2
                    : _plugin.$pagn.attr("aria-live","polite") // 3,4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                (_plugin.$carouselItem.length < 2)
                    ? _plugin.$pagn.attr("aria-live","off") // 1
                    : _plugin.$pagn.attr("aria-live","polite") // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }

        _plugin.$pagn.find(".owl-pagn-inner").not("[aria-hidden]")
            && _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden", true);
    }

    function destroyCarousel(_plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel('destroy');
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(M06_A);







/** M06_B | Testimonial **/
function M06_B(el) {
    _proto = M06_B.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.startIndex = 0;
    this.currentIndex = this.startIndex;
    
    this.$carousel = this.$el.find(".md_cont");
    this.$carouselItem = this.$el.find(".md_cont .li");
    
    this.$control = this.$el.find(".md_cont_control");

    this.$txtArea = this.$carousel.find(".txt");
    this.$visualArea = this.$carousel.find(".img .img_p, .img .img_m");

    var _this = this;
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";

    var carouselHeight = {
        "PC": 740,
        "TABLET": 580,
        "MOBILE": 580
    };
    
    _proto.init = function(){
        //console.log("init:: M06_B")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual txt break
        this.setVisualImg();
        this.setTxtBreak();
        
        // Set scroll bar
        this.$carousel.find('.scrollbar-inner').scrollbar();

        if(this.$carouselItem.length < 2){
            this.$control.remove();
            this.$carouselItem.eq(0).addClass("act");
            this.$carouselItem.eq(0).find('.scrollbar-inner.scroll-content').attr("tabindex", 0);
            return;
        }

        // Set carousel
        setCarousel(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarouselStyle(_this);
                updateCarouselAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    // Set visual txt break
    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find(".md_tit");

        $title.find("p, em").lettering('lines');
        $title.find("span").wrapInner('<i></i>');
    }

    // Event
    _proto.addEvent = function(){
        _this.$carouselItem.on({
            focusin: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isPagnToSlide = $(e.relatedTarget).is(_this.$control);

                        if(!isPagnToSlide){
                            var currentIndex = _this.$carouselItem.index($(e.target).parents(".li"));
                        }else{
                            var currentIndex = 0;
                            _this.$carouselItem.eq(0).find("a, button").first().focus();
                        }

                        _this.$carousel.trigger("slideTo", [currentIndex, 0, true] );
                        _this.$carousel.parent().scrollLeft() != 0 && _this.$carousel.parent().scrollLeft(0);
                        break;
                    // default:
                    //     break;
                }
            },
            focusout: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isSameSequence = $(e.delegateTarget).find(e.relatedTarget).length;
                        var isLastSequence = $(e.delegateTarget).is(_this.$carouselItem.last());
                        
                        if(!isSameSequence && isLastSequence){
                            _this.$control.focus();
                        }
                        break;
                    // default:
                    //     break;
                }
            }
        });

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        var $prevBtn = _plugin.$control.find(".md_pagn_prev");
        var $nextBtn = _plugin.$control.find(".md_pagn_next");
        
        $prevBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>');
        $nextBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>');

        _plugin.$carousel.carouFredSel({
            responsive: true,
            height: carouselHeight[deviceType],
            auto: {
                play: false
            },
            prev: {
                button: $prevBtn,
                key: "left"
            },
            next: {
                button: $nextBtn,
                key: "right"
            },
            items: {
                start: _plugin.currentIndex,
                visible: 1,
                height: carouselHeight[deviceType]
            },
            swipe: {
                onMouse: true,
                onTouch: true
            },
            scroll: {
                fx: "fade",
                duration: 0,
                items: 1,
                onAfter: function(data){
                    _plugin.currentIndex = _plugin.$carouselItem.index(data.items.visible);

                    // Update
                    updatePagn(_plugin);
                    updateCarouselAria(_plugin);

                    _plugin.$carouselItem.removeClass("act")
                        .eq(_plugin.currentIndex).addClass("act")
                        .find('.scrollbar-inner.scroll-content').stop().animate({scrollTop:0}, 100);
                }
            },
            onCreate: function(){
                _plugin.$control.find(".md_cont_bar_ed").text(setNum(_plugin.$carouselItem.length));

                // Update
                updatePagn(_plugin);
                updateCarouselStyle(_plugin);
                updateCarouselAria(_plugin);

                _plugin.$carouselItem.removeClass("act")
                    .eq(_plugin.currentIndex).addClass("act")
                    .find('.scrollbar-inner.scroll-content').stop().animate({scrollTop:0}, 100);
            }
        });
    }

    // Set carousel Style
    function updateCarouselStyle(_plugin){
        _plugin.$carousel.trigger("configuration", {
            "height": carouselHeight[deviceType],
            items: {
                "height": carouselHeight[deviceType]
            }
        });
        _plugin.$carousel.trigger("updateSizes");
    }

    function updateCarouselAria(_plugin){
        switch (deviceType) {
            case "PC":
                _plugin.$carouselItem.attr("aria-hidden", true);
                _plugin.$carouselItem.find("a, button").attr("tabindex", -1);
                _plugin.$carouselItem.find(".scrollbar-inner.scroll-content").attr("tabindex", -1);

                _plugin.$carouselItem.eq(_plugin.currentIndex).removeAttr("aria-hidden");
                _plugin.$carouselItem.eq(_plugin.currentIndex).find("a, button").removeAttr("tabindex");
                _plugin.$carouselItem.eq(_plugin.currentIndex).find(".scrollbar-inner.scroll-content").attr("tabindex", 0);

                _plugin.$control.is("[tabindex]") && _plugin.$control.removeAttr("tabindex");
                break;
            case "TABLET":
            case "MOBILE":
                _plugin.$carouselItem.removeAttr("aria-hidden");
                _plugin.$carouselItem.find("a, button").removeAttr("tabindex");
                _plugin.$carouselItem.find(".scrollbar-inner.scroll-content").attr("tabindex", 0);

                _plugin.$control.not("[tabindex]") && _plugin.$control.attr("tabindex", 0);
                break;
            // default:
            //     break;
        }
    }

    // Update
    function updatePagn(_plugin){
        var width = 100 / _plugin.$carouselItem.length * ( _plugin.currentIndex + 1 );
        var ariaTxt = setNum(_plugin.currentIndex + 1) +" of "+ setNum(_plugin.$carouselItem.length);

        _plugin.$control.attr({ "aria-live": "polite", "aria-labelledby": ariaTxt });
        _plugin.$control.find(".md_cont_bar_st").text(setNum(_plugin.currentIndex + 1));
        _plugin.$control.find(".bar p").css("width", width + "%");

        _plugin.$control.find(".md_cont_bar").not("[aria-hidden]") && _plugin.$control.find(".md_cont_bar").attr("aria-hidden", true);
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(M06_B);







/** M06_C | Testimonial **/
function M06_C(el) {
    _proto = M06_C.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.startIndex = 0;
    this.currentIndex = this.startIndex;
    
    this.$carousel = this.$el.find(".md_cont");
    this.$carouselItem = this.$el.find(".md_cont .li");
    
    this.$control = this.$el.find(".md_cont_control");

    this.$txtArea = this.$carousel.find(".txt");
    this.$visualArea = this.$carousel.find(".img .img_p, .img .img_m");

    var _this = this;
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";

    var carouselHeight = {
        "PC": 740,
        "TABLET": 580,
        "MOBILE": 580
    };
    
    _proto.init = function(){
        //console.log("init:: M06_C")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual txt break
        this.setVisualImg();
        this.setTxtBreak();
        
        // Set scroll bar
        this.$carousel.find('.scrollbar-inner').scrollbar();

        this.$carouselItem.each(function(){
            var blindTxt = "<div class='blind'>" + ($(this).hasClass("chk") ? "Not reported" : "Reported") + "</div>";
            $(this).find(".txt_inner").before(blindTxt);
        })

        if(this.$carouselItem.length < 2){
            this.$control.remove();
            this.$carouselItem.eq(0).addClass("act");
            this.$carouselItem.eq(0).find('.scrollbar-inner.scroll-content').attr("tabindex", 0);
            return;
        }

        // Set carousel
        setCarousel(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarouselStyle(_this);
                updateCarouselAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    // Set visual txt break
    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find(".md_tit");

        $title.find("p, em").lettering('lines');
        $title.find("span").wrapInner('<i></i>');
    }

    // Event
    _proto.addEvent = function(){
        _this.$carouselItem.on({
            focusin: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isPagnToSlide = $(e.relatedTarget).is(_this.$control);

                        if(!isPagnToSlide){
                            var currentIndex = _this.$carouselItem.index($(e.target).parents(".li"));
                        }else{
                            var currentIndex = 0;
                            _this.$carouselItem.eq(0).find("a, button").first().focus();
                        }

                        _this.$carousel.trigger("slideTo", [currentIndex, 0, true] );
                        _this.$carousel.parent().scrollLeft() != 0 && _this.$carousel.parent().scrollLeft(0);
                        break;
                    // default:
                    //     break;
                }
            },
            focusout: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isSameSequence = $(e.delegateTarget).find(e.relatedTarget).length;
                        var isLastSequence = $(e.delegateTarget).is(_this.$carouselItem.last());
                        
                        if(!isSameSequence && isLastSequence){
                            _this.$control.focus();
                        }
                        break;
                    // default:
                    //     break;
                }
            }
        });

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        var $prevBtn = _plugin.$control.find(".md_pagn_prev");
        var $nextBtn = _plugin.$control.find(".md_pagn_next");
        
        $prevBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>');
        $nextBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>');

        _plugin.$carousel.carouFredSel({
            responsive: true,
            height: carouselHeight[deviceType],
            auto: {
                play: false
            },
            prev: {
                button: $prevBtn,
                key: "left"
            },
            next: {
                button: $nextBtn,
                key: "right"
            },
            items: {
                start: _plugin.currentIndex,
                visible: 1,
                height: carouselHeight[deviceType]
            },
            swipe: {
                onMouse: true,
                onTouch: true
            },
            scroll: {
                fx: "fade",
                duration: 0,
                items: 1,
                onAfter: function(data){
                    _plugin.currentIndex = _plugin.$carouselItem.index(data.items.visible);

                    // Update
                    updatePagn(_plugin);
                    updateCarouselAria(_plugin);

                    _plugin.$carouselItem.removeClass("act")
                        .eq(_plugin.currentIndex).addClass("act")
                        .find('.scrollbar-inner.scroll-content').stop().animate({scrollTop:0}, 100);
                }
            },
            onCreate: function(){
                _plugin.$control.find(".md_cont_bar_ed").text(setNum(_plugin.$carouselItem.length));

                // Update
                updatePagn(_plugin);
                updateCarouselStyle(_plugin);
                updateCarouselAria(_plugin);

                _plugin.$carouselItem.removeClass("act")
                    .eq(_plugin.currentIndex).addClass("act")
                    .find('.scrollbar-inner.scroll-content').stop().animate({scrollTop:0}, 100);
            }
        });
    }

    // Set carousel Style
    function updateCarouselStyle(_plugin){
        _plugin.$carousel.trigger("configuration", {
            "height": carouselHeight[deviceType],
            items: {
                "height": carouselHeight[deviceType]
            }
        });
        _plugin.$carousel.trigger("updateSizes");
    }

    function updateCarouselAria(_plugin){
        switch (deviceType) {
            case "PC":
                _plugin.$carouselItem.attr("aria-hidden", true);
                _plugin.$carouselItem.find("a, button").attr("tabindex", -1);
                _plugin.$carouselItem.find(".scrollbar-inner.scroll-content").attr("tabindex", -1);

                _plugin.$carouselItem.eq(_plugin.currentIndex).removeAttr("aria-hidden");
                _plugin.$carouselItem.eq(_plugin.currentIndex).find("a, button").removeAttr("tabindex");
                _plugin.$carouselItem.eq(_plugin.currentIndex).find(".scrollbar-inner.scroll-content").attr("tabindex", 0);

                _plugin.$control.is("[tabindex]") && _plugin.$control.removeAttr("tabindex");
                break;
            case "TABLET":
            case "MOBILE":
                _plugin.$carouselItem.removeAttr("aria-hidden");
                _plugin.$carouselItem.find("a, button").removeAttr("tabindex");
                _plugin.$carouselItem.find(".scrollbar-inner.scroll-content").attr("tabindex", 0);

                _plugin.$control.not("[tabindex]") && _plugin.$control.attr("tabindex", 0);
                break;
            // default:
            //     break;
        }
    }

    // Update
    function updatePagn(_plugin){
        var width = 100 / _plugin.$carouselItem.length * ( _plugin.currentIndex + 1 );
        var ariaTxt = setNum(_plugin.currentIndex + 1) +" of "+ setNum(_plugin.$carouselItem.length);

        _plugin.$control.attr({ "aria-live": "polite", "aria-labelledby": ariaTxt });
        _plugin.$control.find(".md_cont_bar_st").text(setNum(_plugin.currentIndex + 1));
        _plugin.$control.find(".bar p").css("width", width + "%");

        _plugin.$control.find(".md_cont_bar").not("[aria-hidden]") && _plugin.$control.find(".md_cont_bar").attr("aria-hidden", true);
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(M06_C);







/** M07_A | Video 1 **/
function M07_A(el) {
    _proto = M07_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.startIndex = 0;
    this.currentIndex = this.startIndex;
    
    this.$carousel = this.$el.find(".md_cont");
    this.$carouselItem = this.$el.find(".md_cont .li");
    
    this.$control = this.$el.find(".md_cont_control");

    this.$txtArea = this.$carousel.find(".txt");
    this.$visualArea = this.$carousel.find(".img .img_p, .img .img_m");

    var _this = this;
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";
    
    _proto.init = function(){
        //console.log("init:: M07_A")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual txt break
        this.setVisualImg();
        this.setTxtBreak();

        // Set scroll bar
        this.$carousel.find('.scrollbar-inner').scrollbar();

        if(this.$carouselItem.length < 2){
            this.$control.remove();
            this.$carouselItem.eq(0).addClass("act");
            this.$carouselItem.eq(0).find('.scrollbar-inner.scroll-content').attr("tabindex", 0);
            return;
        }

        // Set carousel
        setCarousel(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            updateContentBoxSize(_this);
            updateCarouselStyle(_this)

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarouselAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    // Set visual txt break
    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find(".md_tit");

        $title.find("a").lettering('lines');
        $title.find("span").wrapInner('<i></i>');
    }

    // Event
    _proto.addEvent = function(){
        _this.$carouselItem.on({
            focusin: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isPagnToSlide = $(e.relatedTarget).is(_this.$control);

                        if(!isPagnToSlide){
                            var currentIndex = _this.$carouselItem.index($(e.target).parents(".li"));
                        }else{
                            var currentIndex = 0;
                            _this.$carouselItem.eq(0).find("a, button").first().focus();
                        }

                        _this.$carousel.trigger("slideTo", [currentIndex, 0, true] );
                        _this.$carousel.parent().scrollLeft() != 0 && _this.$carousel.parent().scrollLeft(0);
                        break;
                    // default:
                    //     break;
                }
            },
            focusout: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isSameSequence = $(e.delegateTarget).find(e.relatedTarget).length;
                        var isLastSequence = $(e.delegateTarget).is(_this.$carouselItem.last());
                        
                        if(!isSameSequence && isLastSequence){
                            _this.$control.focus();
                        }
                        break;
                    // default:
                    //     break;
                }
            }
        });

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        var $prevBtn = _plugin.$control.find(".md_pagn_prev");
        var $nextBtn = _plugin.$control.find(".md_pagn_next");
        
        $prevBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>');
        $nextBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>');

        _plugin.$carousel.carouFredSel({
            responsive: true,
            height: null,
            auto: {
                play: false
            },
            prev: {
                button: $prevBtn,
                key: "left"
            },
            next: {
                button: $nextBtn,
                key: "right"
            },
            items: {
                start: _plugin.currentIndex,
                visible: 1,
                height: null
            },
            swipe: {
                onMouse: true,
                onTouch: true
            },
            scroll: {
                fx: "fade",
                duration: 0,
                items: 1,
                onAfter: function(data){
                    _plugin.currentIndex = _plugin.$carouselItem.index(data.items.visible);

                    // Update
                    updatePagn(_plugin);
                    updateCarouselAria(_plugin);

                    _plugin.$carouselItem.removeClass("act")
                        .eq(_plugin.currentIndex).addClass("act")
                        .find('.scrollbar-inner.scroll-content').stop().animate({scrollTop:0}, 100);
                }
            },
            onCreate: function(){
                _plugin.$control.find(".md_cont_bar_ed").text(setNum(_plugin.$carouselItem.length));

                // Update
                updatePagn(_plugin);
                updateContentBoxSize(_plugin);
                updateCarouselStyle(_this)
                updateCarouselAria(_plugin);

                _plugin.$carouselItem.removeClass("act")
                    .eq(_plugin.currentIndex).addClass("act")
                    .find('.scrollbar-inner.scroll-content').stop().animate({scrollTop:0}, 100);
            }
        });
    }

    // Set Box Style
    function updateContentBoxSize(_plugin){
        var $box = _plugin.$carousel.find(".box");
        var heights = $box.map(function(index, item) {
            $(item).css("height", "");
            return item.clientHeight;
        });
        $box.css("height", Math.max.apply(null, heights));
    }

    // Set carousel Style
    function updateCarouselStyle(_plugin){
        _plugin.$carousel.trigger("configuration", {
            "height": null,
            items: {
                "height": null
            }
        });
        _plugin.$carousel.trigger("updateSizes");
    }

    function updateCarouselAria(_plugin){
        switch (deviceType) {
            case "PC":
                _plugin.$carouselItem.attr("aria-hidden", true);
                _plugin.$carouselItem.find("a, button").attr("tabindex", -1);
                _plugin.$carouselItem.find(".scrollbar-inner.scroll-content").attr("tabindex", -1);

                _plugin.$carouselItem.eq(_plugin.currentIndex).removeAttr("aria-hidden");
                _plugin.$carouselItem.eq(_plugin.currentIndex).find("a, button").removeAttr("tabindex");
                _plugin.$carouselItem.eq(_plugin.currentIndex).find(".scrollbar-inner.scroll-content").attr("tabindex", 0);

                _plugin.$control.is("[tabindex]") && _plugin.$control.removeAttr("tabindex");
                break;
            case "TABLET":
            case "MOBILE":
                _plugin.$carouselItem.removeAttr("aria-hidden");
                _plugin.$carouselItem.find("a, button").removeAttr("tabindex");
                _plugin.$carouselItem.find(".scrollbar-inner.scroll-content").attr("tabindex", 0);

                _plugin.$control.not("[tabindex]") && _plugin.$control.attr("tabindex", 0);
                break;
            // default:
            //     break;
        }
    }

    // Update
    function updatePagn(_plugin){
        var width = 100 / _plugin.$carouselItem.length * ( _plugin.currentIndex + 1 );
        var ariaTxt = setNum(_plugin.currentIndex + 1) +" of "+ setNum(_plugin.$carouselItem.length);

        _plugin.$control.attr({ "aria-live": "polite", "aria-labelledby": ariaTxt });
        _plugin.$control.find(".md_cont_bar_st").text(setNum(_plugin.currentIndex + 1));
        _plugin.$control.find(".bar p").css("width", width + "%");

        _plugin.$control.find(".md_cont_bar").not("[aria-hidden]") && _plugin.$control.find(".md_cont_bar").attr("aria-hidden", true);
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(M07_A);







/** M08_A | Link 1 **/
function M08_A(el) {
    _proto = M08_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.startIndex = 0;
    this.currentIndex = this.startIndex;

    this.$carousel = this.$el.find(".module_ty");
    this.$carouselItem = this.$el.find(".module_ty .li");
    
    this.$nav = this.$el.find(".owl-nav");
    this.$pagn = this.$el.find(".owl-pagn");

    this.$txtArea = this.$carousel.find(".txt");
    this.$visualArea = this.$carousel.find(".img .img_p");

    var _this = this;
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";
    
    _proto.init = function(){
        //console.log("init:: M08_A")

        // Device type check
        deviceType = checkDeviceType();

        if(this.$carouselItem.length < 2){
            this.$nav.remove();
            this.$pagn.remove();
            return;
        }

        // Set carousel
        setCarousel(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarouselAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Event
    _proto.addEvent = function(){
        _this.$el.on("M08A.UPDATE", function(){
            updateCarouselStyle(_this);
        })

        _this.$carouselItem.on({
            focusin: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isPagnToSlide = $(e.relatedTarget).is(_this.$pagn);

                        if(!isPagnToSlide){
                            var currentIndex = _this.$carouselItem.index($(e.target).parents(".li"));
                        }else{
                            var currentIndex = 0;
                            _this.$carouselItem.eq(0).find("a, button").first().focus();
                        }

                        _this.$carousel.trigger("slideTo", [currentIndex, 0, true] );
                        _this.$carousel.parent().scrollLeft() != 0 && _this.$carousel.parent().scrollLeft(0);
                        break;
                    // default:
                    //     break;
                }
            },
            focusout: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isSameSequence = $(e.delegateTarget).find(e.relatedTarget).length;
                        var isLastSequence = $(e.delegateTarget).is(_this.$carouselItem.last());
                        
                        if(!isSameSequence && isLastSequence){
                            _this.$pagn.focus();
                        }
                        break;
                    // default:
                    //     break;
                }
            }
        });

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        }) 

        // Window resize && matchHeight after update
        $.fn.matchHeight._afterUpdate = function(event, groups) {
            $(".M08_A").trigger("M08A.UPDATE");
        }
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        var $prevBtn = _plugin.$nav.find(".owl-prev");
        var $nextBtn = _plugin.$nav.find(".owl-next");
        
        $prevBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>');
        $nextBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>');

        _plugin.$carousel.carouFredSel({
            responsive: true,
            auto: {
                play: false
            },
            prev: {
                button: $prevBtn,
                key: "left"
            },
            next: {
                button: $nextBtn,
                key: "right"
            },
            items: {
                start: _plugin.currentIndex,
                visible: 1
            },
            swipe: {
                onMouse: true,
                onTouch: true
            },
            scroll: {
                fx: "fade",
                duration: 0,
                items: 1,
                onAfter: function(data){
                    _plugin.currentIndex = _plugin.$carouselItem.index(data.items.visible);
                    
                    _plugin.$carouselItem.removeClass("active").eq(_plugin.currentIndex).addClass("active");

                    // Update
                    updatePagn(_plugin);
                    updateCarouselAria(_plugin);
                }
            },
            onCreate: function(){
                _plugin.$pagn.find(".owl-pagn-ed").text(setNum(_plugin.$carouselItem.length));
                _plugin.$carouselItem.removeClass("active").eq(_plugin.currentIndex).addClass("active");

                // Update
                updatePagn(_plugin);
                updateCarouselStyle(_plugin);
                updateCarouselAria(_plugin);
            }
        });
    }

    function updateCarouselStyle(_plugin){
        _plugin.$carouselItem.height("auto");
        var heights = _plugin.$carouselItem.map(function() {
            return this.clientHeight;
        });
        _plugin.$carousel.trigger("configuration", {
            "height": Math.max.apply(null, heights),
            items: {
                "height": Math.max.apply(null, heights)
            }
        });
        _plugin.$carousel.trigger("updateSizes");
    }

    function updateCarouselAria(_plugin){
        switch (deviceType) {
            case "PC":
                _plugin.$carouselItem.attr("aria-hidden", true).find("a, button").attr("tabindex", -1);
                _plugin.$carouselItem.eq(_plugin.currentIndex).removeAttr("aria-hidden").find("a, button").removeAttr("tabindex");
                _plugin.$pagn.is("[tabindex]") && _plugin.$pagn.removeAttr("tabindex");
                break;
            case "TABLET":
            case "MOBILE":
                _plugin.$carouselItem.removeAttr("aria-hidden").find("a, button").removeAttr("tabindex");
                _plugin.$pagn.not("[tabindex]") && _plugin.$pagn.attr("tabindex", 0);
                break;
            // default:
            //     break;
        }
    }

    // Update
    function updatePagn(_plugin){
        var width = 100 / _plugin.$carouselItem.length * ( _plugin.currentIndex + 1 );
        var ariaTxt = setNum(_plugin.currentIndex + 1) +" of "+ setNum(_plugin.$carouselItem.length);

        _plugin.$pagn.attr({ "aria-live": "polite", "aria-labelledby": ariaTxt });
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(_plugin.currentIndex + 1));
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", width + "%");

        _plugin.$pagn.find(".owl-pagn-inner").not("[aria-hidden]") && _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden", true);
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(M08_A);







/** M09_A | People 1 */
function M09_A(el) {
    _proto = M09_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$visualArea = this.$el.find(".img .img_p");

    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$el.find(".owl-carousel .item");
    this.$pagn = this.$el.find(".owl-pagn");
    
    var _this = this; // M09_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";

    _proto.init = function(){
        //console.log("init:: M09_A")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual img
        this.setVisualImg();

        this.$el.find(".M09_A_cont").addClass("m"+this.$carouselItem.length);

        if(this.$carouselItem.length < 2) return;

        updateCarousel(this);
        updatePagnAria(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarousel(_this);
                updatePagnAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    _proto.addEvent = function(){
        _this.$carouselItem.on("focusin", function(e){
            if($(e.target).is(":hover")){
                return;
            }

            var currentIndex = _this.$carouselItem.index(e.delegateTarget);
            _this.$carousel.trigger('to.owl.carousel', currentIndex);

            _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
            _this.$el.scrollLeft() != 0 && _this.$el.scrollLeft(0);
        })

        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }
            
            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            autoWidth:true,
            loop: true,
            nav:true,
            navText: [
                '<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>',
                '<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>'
            ],
            dots: false,
            items:4,
            singleItem : true,
            smartSpeed: 500,
            responsive:{
                0:{
                    margin:16, 
                }, 
                500:{
                    margin:16, 
                },
                1023:{
                    margin:26,
                }
            },
            onInitialized: function(e){
                initPagn(e, _plugin);
                setCarouselAria(_plugin);

                _plugin.$carousel.addClass("act");
            },
            onRefreshed: function(e){ // FIREFOX
                initPagn(e, _plugin);
                setCarouselAria(_plugin);

                _plugin.$carousel.addClass("act");
            },
            onChanged: function(e){
                updatePagn(e, _plugin);

                _plugin.$carousel.removeClass("act");
            },
        });
    }

    function updateCarousel(_plugin){
        switch (deviceType) {
            case "PC":
                (_plugin.$carouselItem.length < 4)
                    ? destroyCarousel(_plugin) // 1,2,3
                    : setCarousel(_plugin) // 4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                (_plugin.$carouselItem.length < 2)
                    ? destroyCarousel(_plugin) // 1
                    : setCarousel(_plugin) // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }
    }

    function setCarouselAria(_plugin){
        var $clonedItem = _plugin.$carousel.find('.owl-item.cloned');

        $clonedItem.attr("aria-hidden", true)
        $clonedItem.find("a, button").attr('tabindex', -1); 
    }

    function initPagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);

        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(activeIndex));
        _plugin.$pagn.find(".owl-pagn-ed").text(setNum(e.item.count));
    }

    function updatePagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);
        
        if(isNaN(activeIndex)) return;
        
        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(activeIndex));
    }

    function updatePagnAria(_plugin){
        switch (deviceType) {
            case "PC":
                (_plugin.$carouselItem.length < 4)
                    ? _plugin.$pagn.attr("aria-live","off") // 1,2,3
                    : _plugin.$pagn.attr("aria-live","polite") // 4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                (_plugin.$carouselItem.length < 2)
                    ? _plugin.$pagn.attr("aria-live","off") // 1
                    : _plugin.$pagn.attr("aria-live","polite") // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }

        _plugin.$pagn.find(".owl-pagn-inner").not("[aria-hidden]")
            && _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden", true);
    }

    function destroyCarousel(_plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel('destroy');
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(M09_A);







/** M09_B | People 2 */
function M09_B(el) {
    _proto = M09_B.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$visualArea = this.$el.find(".img .img_p");

    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$el.find(".owl-carousel .item");
    this.$pagn = this.$el.find(".owl-pagn");
    
    var _this = this; // M09_B
    var deviceType; // "PC_LARGE", "PC_MEDIUM", "PC_SMALL", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";

    _proto.init = function(){
        //console.log("init:: M09_B")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual img
        this.setVisualImg();

        this.$el.find(".M09_B_cont").addClass("m"+this.$carouselItem.length);

        if(this.$carouselItem.length < 2) return;

        updateCarousel(this);
        updatePagnAria(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarousel(_this);
                updatePagnAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    _proto.addEvent = function(){
        _this.$carouselItem.on("focusin", function(e){
            if($(e.target).is(":hover")){
                return;
            }

            var currentIndex = _this.$carouselItem.index(e.delegateTarget);
            _this.$carousel.trigger('to.owl.carousel', currentIndex);

            _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
            _this.$el.scrollLeft() != 0 && _this.$el.scrollLeft(0);
        })

        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }
            
            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if(window.innerWidth > 1504){
            return "PC_LARGE";
        }else if (window.innerWidth > 1168){
            return "PC_MEDIUM";
        }else if (window.innerWidth > 1023){
            return "PC_SMALL";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            autoWidth:true,
            loop: true,
            nav:true,
            navText: [
                '<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>',
                '<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>'
            ],
            dots: false,
            items:5,
            singleItem : true,
            // smartSpeed: 500,
            responsive:{
                0:{
                    margin:16, 
                }, 
                500:{
                    margin:16, 
                },
                1023:{
                    margin:26,
                }
            },
            onInitialized: function(e){
                initPagn(e, _plugin);
                setCarouselAria(_plugin);

                _plugin.$carousel.addClass("act");
            },
            onRefreshed: function(e){ // FIREFOX
                initPagn(e, _plugin);
                setCarouselAria(_plugin);

                _plugin.$carousel.addClass("act");
            },
            onChanged: function(e){
                updatePagn(e, _plugin);

                _plugin.$carousel.removeClass("act");
            },
        });
    }

    function updateCarousel(_plugin){
        switch (deviceType) {
            case "PC_LARGE":
                (_plugin.$carouselItem.length < 5)
                    ? destroyCarousel(_plugin) // 1,2,3,4
                    : setCarousel(_plugin) // 5,6,7...
                break;
            case "PC_MEDIUM":
                (_plugin.$carouselItem.length < 4)
                    ? destroyCarousel(_plugin) // 1,2,3
                    : setCarousel(_plugin) // 4,5,6,7...
                break;
            case "PC_SMALL":
                (_plugin.$carouselItem.length < 3)
                    ? destroyCarousel(_plugin) // 1,2
                    : setCarousel(_plugin) // 3,4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                (_plugin.$carouselItem.length < 2)
                    ? destroyCarousel(_plugin) // 1
                    : setCarousel(_plugin) // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }
    }

    function setCarouselAria(_plugin){
        var $clonedItem = _plugin.$carousel.find('.owl-item.cloned');

        $clonedItem.attr("aria-hidden", true)
        $clonedItem.find("a, button").attr('tabindex', -1); 
    }

    function initPagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);

        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(activeIndex));
        _plugin.$pagn.find(".owl-pagn-ed").text(setNum(e.item.count));
    }

    function updatePagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);
        
        if(isNaN(activeIndex)) return;
        
        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", barWidth + "%");
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(activeIndex));
    }

    function updatePagnAria(_plugin){
        switch (deviceType) {
            case "PC_LARGE":
                (_plugin.$carouselItem.length < 5)
                    ? _plugin.$pagn.attr("aria-live","off") // 1,2,3,4
                    : _plugin.$pagn.attr("aria-live","polite") // 5,6,7...
                break;
            case "PC_MEDIUM":
                (_plugin.$carouselItem.length < 4)
                    ? _plugin.$pagn.attr("aria-live","off") // 1,2,3
                    : _plugin.$pagn.attr("aria-live","polite") // 4,5,6,7...
                break;
            case "PC_SMALL":
                (_plugin.$carouselItem.length < 3)
                    ? _plugin.$pagn.attr("aria-live","off") // 1,2
                    : _plugin.$pagn.attr("aria-live","polite") // 3,4,5,6,7...
                break;
            case "TABLET":
            case "MOBILE":
                (_plugin.$carouselItem.length < 2)
                    ? _plugin.$pagn.attr("aria-live","off") // 1
                    : _plugin.$pagn.attr("aria-live","polite") // 2,3,4,5,6,7...
                break;
            // default:
            //     break;
        }

        _plugin.$pagn.find(".owl-pagn-inner").not("[aria-hidden]")
            && _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden", true);
    }

    function destroyCarousel(_plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel('destroy');
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(M09_B);







/*** M11_A | Trends ***/
function M11_A(el) {
    _proto = M11_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    var _this = this; // M11_A
    
    this.$visualArea = this.$el.find(".img_p");

    _proto.init = function(){
        //console.log("init:: M11_A")

        this.setVisualImg();

    }

    // Set Visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }


    this.init();
}

fo.addPlugin(M11_A);







/** M12_B | Benefits 2 **/
function M12_B(el) {
    _proto = M12_B.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$list = this.$el.find(".owl-carousel"); // 캐로셀 기능은 삭제되었음
    this.$visual = this.$el.find(".visual_img img").parent();

    this.mhItems;

    var _this = this; // M12_B
    var deviceType; // "PC", "TABLET", "MOBILE"
    var mhTarget = [".md_tit"];
    var resizeTimer;

    _proto.init = function(){
        //console.log("init:: M12_B")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual img
        this.setVisualImg();

        // Set matchHeight item
        if(mhTarget.length){
            getMhItems(this);
            updateMhItem(this);
        }

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();
    
            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateMhItem(_this);
            }
        }, 100);
        
        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visual.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    _proto.addEvent = function(){
        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }
    
    // Init Match Height Item
    function getMhItems(_plugin){
        _plugin.mhItems = mhTarget.map(function(target){
            return _plugin.$list.find(target);
        });
    }

    // Update Match Height Item
    function updateMhItem(_plugin){
        var idx;
        var len =_plugin.mhItems.length;
        var opt = {
            init: { tbyRow: true, remove: false },
            remove: { tbyRow: false, remove: true }
        }

        switch (deviceType) {
            case "PC":
            case "TABLET":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.init);
                }
                break;
            case "MOBILE":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.remove);
                }
                break;
            // default:
            //     break;
        }
    }

    this.init();
}

fo.addPlugin(M12_B);







/** M13_A | Use Case **/
function M13_A(el) {
    _proto = M13_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.key = Math.floor(this.$el.offset().top);
    this.startIndex = 0;
    this.currentIndex = this.startIndex;
    this.$visualArea = this.$el.find(".img .img_p");

    this.navigation = {
        $area: this.$el.find(".navigation"),
        $pagn: this.$el.find(".navigation .owl-pagn"),
        $nav: this.$el.find(".navigation .owl-nav")
    }

    this.carousel = {
        $area: this.$el.find(".carousel"),
        $item: this.$el.find(".carousel .li")
    }

    this.indicator = {
        $area: this.$el.find(".indicator > ul"),
        $btn: this.$el.find(".indicator .indicator_btn")
    }

    var _this = this; // M13_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var indicatorHeight = {
        big: 93, // "PC" size
        samll: 46 // "TABLET", "MOBILE" size
    };
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";

    _proto.init = function(){
        //console.log("init:: M13_A");

        // Device type check
        deviceType = checkDeviceType();

        // Set visual img
        this.setVisualImg();

        if(this.indicator.$btn.length < 2){
            // this.indicator.$area.parent().remove();
            this.$el.find(".M13_A_cont").css("padding-bottom", "90px");
            this.navigation.$area.remove();
            // return;
        }

        // Carousel set
        setCarouselSlide(this);
        setCarouselAria(this);

        // Indicator(tab button) set
        setIndicatorAria(this);
        updateIndicatorSlide(this);
        updateIndicatorStyle(this);
        updateIndicatorAria(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;

                // Indicator(tab button) update
                updateIndicatorSlide(_this);
                updateIndicatorAria(_this);
                
                // Pagn(progressbar,prev,next) update
                updatePagnStyle(_this);
            }
            
            // Indicator(tab button) update
            updateIndicatorStyle(_this);
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Creating Indicator(tab button) buttons
    _proto.makeIndicator = function(){
        var html = "";
        this.carousel.$item.each(function(index){
            html += "<li>";
            html += "   <a href='#' class='"+ ( index == this.startIndex ? "indicator_btn active" : "indicator_btn" ) +"'>";
            html += "       <span>" + $(this).find(".md_tit").text() + "</span>";
            html += "   </a>";
            html += "</li>";
        });
        this.indicator.$area.append(html);
        this.indicator.$btn = this.indicator.$area.find(".indicator_btn");
    }

    // Event
    _proto.addEvent = function(){
        _this.$el.on("M13A.UPDATE", function(){
            updateCarouselStyle(_this);
        })

        _this.indicator.$btn.on({
            "click": function(e){
                e.preventDefault();
    
                _this.currentIndex = _this.indicator.$btn.index($(this));
                _this.carousel.$area.trigger("slideTo", [_this.currentIndex, 0, true] );
            },
            "focusin": function(e){
                switch (deviceType) {
                    case "PC":
                        //
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var currentCarouselItem = _this.carousel.$item.eq(_this.currentIndex);
                        var isCarouselToIndicator = $(e.relatedTarget).parents(".li").is(currentCarouselItem);

                        if(!isCarouselToIndicator){
                            var index = _this.indicator.$btn.index($(this));
                            _this.indicator.$area.trigger("slideTo", [index, 0, true] );
                        }else{
                            var index = 0;
                            _this.indicator.$area.trigger("slideTo", [index, 0, true] );
                            _this.indicator.$btn.first().focus();
                        }

                        _this.indicator.$area.scrollLeft() != 0 && _this.indicator.$area.scrollLeft(0);
                        _this.indicator.$area.parent().scrollLeft() != 0 && _this.indicator.$area.parent().scrollLeft(0);
                        break;
                    // default:
                    //     break;
                }
            },
            "focusout": function(e){
                switch (deviceType) {
                    case "PC":
                        //
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isLastSequence = $(e.delegateTarget).is(_this.indicator.$btn.last());
                        var toFirstSequence = $(e.relatedTarget).is(_this.indicator.$btn.first());

                        if(isLastSequence && toFirstSequence){
                            _this.carousel.$item.eq(_this.currentIndex).find("a, button").first().focus();
                        }
                        break;
                    // default:
                    //     break;
                }
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })

        // Window resize && matchHeight after update
        $.fn.matchHeight._afterUpdate = function(event, groups) {
            $(".M13_A").trigger("M13A.UPDATE");
        }
    }

    // Set Visual Img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }
    
    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    // Get Carousel Items Max Height
    function getCarouselHeight(_plugin){
        _plugin.carousel.$item.height("");

        var heights = _plugin.carousel.$item.map(function() {
            return this.clientHeight;
        });

        _plugin.carousel.$item.height(Math.max.apply(null, heights)+"px");
        
        return Math.max.apply(null, heights);
    }

    // Set Carousel Slide
    function setCarouselSlide(_plugin){
        var carouselHeight = getCarouselHeight(_plugin);
        var $prevBtn = _plugin.navigation.$nav.find(".owl-prev");
        var $nextBtn = _plugin.navigation.$nav.find(".owl-next");
        
        $prevBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>');
        $nextBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>');
        
        _plugin.carousel.$area.carouFredSel({
            responsive: true,
            height: carouselHeight,
            auto: {
                play: false
            },
            prev: {
                button: $prevBtn
            },
            next: {
                button: $nextBtn
            },
            items: {
                start: _plugin.currentIndex,
                visible: 1,
                height: carouselHeight,
            },
            swipe: {
                onMouse: true,
                onTouch: true
            },
            scroll: {
                fx: "fade",
                duration: 0,
                items: 1,
                onAfter: function(data){
                    _plugin.currentIndex = _plugin.carousel.$item.index(data.items.visible);
                    
                    _plugin.indicator.$btn.removeClass("active").eq(_plugin.currentIndex).addClass("active");
                    _plugin.carousel.$item.removeClass("active").eq(_plugin.currentIndex).addClass("active");

                    // Update Carousel
                    updateCarouselAria(_plugin);

                    // Update Pagn(progressbar,prev,next)
                    updatePagnStyle(_plugin);

                    // Update Indicator(tab button)
                    updateIndicatorAria(_plugin);
                }
            },
            onCreate: function(){
                _plugin.navigation.$pagn.find(".owl-pagn-ed").text(setNum(_plugin.carousel.$item.length));

                _plugin.indicator.$btn.removeClass("active").eq(_plugin.currentIndex).addClass("active");
                _plugin.carousel.$item.removeClass("active").eq(_plugin.currentIndex).addClass("active");

                // Update Carousel
                updateCarouselAria(_plugin);
                
                // Update Pagn(progressbar,prev,next)
                updatePagnStyle(_plugin);

                // Update Indicator(tab button)
                updateIndicatorAria(_plugin);
            }
        });
    }

    // Set Carousel Aria
    function setCarouselAria(_plugin){
        _plugin.carousel.$item.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "region", // fixed
                "id": "tab_panel_"+ key, // fixed
                "aria-labelledby": "tab_btn_"+ key, // fixed
            });
        })
    }

    // Update Carousel Style
    function updateCarouselStyle(_plugin){
        var carouselHeight = getCarouselHeight(_plugin);

        if(_plugin.carousel.$area.height() === carouselHeight) return;

        _plugin.carousel.$area.trigger("configuration", {
            height: carouselHeight,
            items: {
                height: carouselHeight,
            }
        });

        _plugin.carousel.$area.trigger('updateSizes');
    }

    // Update Carousel Aria
    function updateCarouselAria(_plugin){
        _plugin.carousel.$item.attr("aria-hidden", true).find("a, button").attr("tabindex", -1);
        _plugin.carousel.$item.eq(_plugin.currentIndex).removeAttr("aria-hidden").find("a, button").removeAttr("tabindex");
    }

    // Update Carousel Style
    function updateIndicatorSlide(_plugin){
        switch (deviceType) {
            case "PC":
                if(!_plugin.indicator.$area.data("_cfs_isCarousel")){
                    return;
                }
                _plugin.indicator.$area.trigger("destroy", true);
                break;
            case "TABLET":
            case "MOBILE":
                if(_plugin.indicator.$area.data("_cfs_isCarousel")){
                    return;
                }
                _plugin.indicator.$area.carouFredSel({
                    responsive: false,
                    infinite: false,
                    auto: false,
                    prev: false,
                    next: false,
                    items: {
                        start: _plugin.currentIndex,
                        visible: 1
                    },
                    swipe: {
                        onMouse: true,
                        onTouch: true
                    },
                    scroll:{
                        items:1,
                        // onAfter: function(data){
                        // }
                    }
                });
                
                break;
            // default:
            //     break;
        }
    }

    // Update Indicator(tab button) Style
    function updateIndicatorStyle(_plugin){
        switch (deviceType) {
            case "PC":
                var contentHeight = indicatorHeight.big * 4 + 1;
                var imageHeight = _plugin.$visualArea.height();
                /*
                _plugin.indicator.$area.css({
                    "height": ( _plugin.indicator.$btn.length < 2 ? "auto" : contentHeight + "px" ),
                    "min-height": imageHeight + "px",
                    "overflow": "hidden"
                });  
                */
                _plugin.navigation.$area.css({
                    "margin-top": imageHeight > contentHeight ? 30 - imageHeight + contentHeight : 30 + "px"
                });
                break;
            case "TABLET":
            case "MOBILE":
                _plugin.indicator.$area.is("[style]") && !_plugin.indicator.$area.data("_cfs_isCarousel") && _plugin.indicator.$area.removeAttr("style");
                _plugin.navigation.$area.is("[style]") && _plugin.navigation.$area.removeAttr("style");

                _plugin.indicator.$area.find("[style]").length && _plugin.indicator.$area.find("[style]").removeAttr("style");
                break;
            // default:
            //     break;
        }
    }

    // Set Indicator(tab button) Aria
    function setIndicatorAria(_plugin){
        _plugin.indicator.$area.attr("role", "tablist");
        _plugin.indicator.$area.find("li").attr("role", "presentation");
        
        _plugin.indicator.$btn.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "tab", // fixed
                "id": "tab_btn_"+ key, // fixed
                "aria-controls": "tab_panel_"+ key, // fixed
                "aria-selected": false // changeable
            });
        });
    }

    // Update Indicator(tab button) Aria
    function updateIndicatorAria(_plugin){
        _plugin.indicator.$btn.attr("aria-selected", false).eq(_plugin.currentIndex).attr("aria-selected", true);

        switch (deviceType) {
            case "PC":
                var pageIndex = parseInt(_plugin.currentIndex/4);
                var from = ":nth-child(n+"+ ((pageIndex*4)+1) +")";
                var to = ":nth-child(-n+"+ ((pageIndex+1)*4) +")";

                _plugin.indicator.$area.find("li").attr("aria-hidden", true).find("a").attr("tabindex", -1);
                _plugin.indicator.$area.find("li"+from+to).removeAttr("aria-hidden").find("a").removeAttr("tabindex");
                break;
            case "TABLET":
            case "MOBILE":
                _plugin.indicator.$area.find("[tabindex]").length && _plugin.indicator.$area.find("[tabindex]").removeAttr("tabindex");
                _plugin.indicator.$area.find("[aria-hidden]").length && _plugin.indicator.$area.find("[aria-hidden]").removeAttr("aria-hidden");
                break;
            // default:
            //     break;
        }
    }

    // Update Pagn(progressbar,prev,next) Style
    function updatePagnStyle(_plugin){
        var width = 100 / _plugin.carousel.$item.length * ( _plugin.currentIndex + 1 );
        var ariaTxt = setNum(_plugin.currentIndex + 1) +" of "+ setNum(_plugin.carousel.$item.length);
        
        _plugin.navigation.$pagn.attr({ "aria-live": "polite", "aria-labelledby": ariaTxt });
        _plugin.navigation.$pagn.find(".owl-pagn-st").text(setNum(_plugin.currentIndex + 1));
        _plugin.navigation.$pagn.find(".owl-pagn-bar p").css("width", width + "%");

        _plugin.navigation.$pagn.find(".owl-pagn-inner").not("[aria-hidden]") && _plugin.navigation.$pagn.find(".owl-pagn-inner").attr("aria-hidden", true);

        switch (deviceType) {
            case "PC":
                var pageIndex = parseInt(_plugin.currentIndex/4);
                var scrollPos = $(window).scrollTop();

                _plugin.indicator.$area.stop().animate({
                    "top": -1 * (indicatorHeight.big * 4) * pageIndex +"px"
                }, 400);
                /*
                $("html, body").stop().animate({
                    scrollTop: scrollPos
                }, 400);
                */
                break;
            case "TABLET":
            case "MOBILE":
                var outerWidth = _plugin.indicator.$area.parent().width();
                var innerWidth = _plugin.indicator.$btn.innerWidth() * _plugin.carousel.$item.length;

                outerWidth < innerWidth && _plugin.indicator.$area.trigger("slideTo", [_plugin.currentIndex, 0, true] );
                break;
            // default:
            //     break;
        }
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }
    
    this.makeIndicator();
    this.init();
}

fo.addPlugin(M13_A);







/** M15_A | Structure */
function M15_A(el) {
    _proto = M15_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$tabList = this.$el.find(".tab_list");
    this.$tabListBtn = this.$tabList.find(".tab_btn");
    this.$tabPanel = this.$el.find(".tab_panel");

    this.$diagram = this.$el.find(".diagram_wrap");
    this.$diagramLink = this.$diagram.find(".link_btn");

    this.diagramImgSrc = {
        only_p_on: this.$diagram.find(".img_p img.on").attr("src") || null,
        only_p_on2: this.$diagram.find(".img_p img.on2").attr("src") || null,
        only_m_on: this.$diagram.find(".img_m img.on").attr("src") || null,
        only_p_off: this.$diagram.find(".img_p img:not(.on)").attr("src") || null,
        only_m_off: this.$diagram.find(".img_m img:not(.on)").attr("src") || null
    }

    this.key = Math.floor(this.$el.offset().top);
    this.activeTab = 0;

    var _this = this; // M15_A
    var deviceType; // "PC", "TABLET", "MOBILE"

    _proto.init = function(){
        //console.log("init:: M15_A")

        // Device type check
        deviceType = checkDeviceType();

        // Tab activated on initial load
        if(this.$el.is("[data-active-tab]") && this.data.activeTab >= 0){
            this.activeTab = (this.data.activeTab < this.$tabListBtn.length) ? this.data.activeTab : this.$tabListBtn.length-1;
            this.$el.removeAttr("data-active-tab");
        }

        // Initial image setting
        setTabImg(this);
        setLinkImg(this);
        updateImgPos(this);

        // Initial tab setting
        setAriaAttr(this);
        setOpenTab(this);

        this.$diagram.addClass("init");

        if(this.$el.find("[data-trigger-show]").length){
            this.$el.find("[data-trigger-show]").each(function(){
                var showTarget = $(this).attr("data-trigger-show");
                _this.$el.find(showTarget).addClass("show");
            })
        }

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    _proto.addEvent = function(){
        // Tab button click
        _this.$tabListBtn.on("click", function(e){
            e.preventDefault();

            _this.activeTab = _this.$tabListBtn.index($(this));
            setOpenTab(_this);
        })

        // Window resize
        $(window).on("resize", function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
            }

            // Update tab img position
            updateImgPos(_this);
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    // Initial tab img setting
    function setTabImg(_plugin){
        if(!_plugin.$tabListBtn.length) return;
        if(!_plugin.diagramImgSrc["only_p_on"]) return;

        var html = "";
        html += "<span class='tab_img' aria-hidden='true'>";
        html +=     "<img src='" + _plugin.diagramImgSrc["only_p_on"] + "' alt='' />";
        html += "</span>";

        html ? _plugin.$tabListBtn.after(html) : _plugin.$tabListBtn.addClass("outline");
    }

    // Initial link img setting
    function setLinkImg(_plugin){
        if(!_plugin.$diagramLink.length) return;

        var htmlPC = "";
        if(_plugin.diagramImgSrc["only_p_on"]){
            htmlPC += "<span class='link_img only_p' aria-hidden='true'>";
            htmlPC +=     "<img src='" + _plugin.diagramImgSrc["only_p_on"] + "' alt='' />";
            htmlPC += "</span>";
        }

        var htmlMobile = "";
        if(_plugin.diagramImgSrc["only_m_on"]){
            htmlMobile += "<span class='link_img only_m' aria-hidden='true'>";
            htmlMobile +=     "<img src='" + _plugin.diagramImgSrc["only_m_on"] + "' alt='' />";
            htmlMobile += "</span>";
        }

        htmlPC ? _plugin.$diagramLink.filter(".only_p").after(htmlPC) : _plugin.$diagramLink.filter(".only_p").addClass("outline");
        htmlMobile ? _plugin.$diagramLink.filter(".only_m").after(htmlMobile) : _plugin.$diagramLink.filter(".only_m").addClass("outline");
    }
    
    // Update tab/link img position
    function updateImgPos(_plugin){
        var $img;

        switch (deviceType) {
            case "PC":
            case "TABLET":
                $img = _plugin.$diagram.find(".tab_img, .link_img:not(.only_m)");
                break;
            case "MOBILE":
                $img = _plugin.$diagram.find(".link_img.only_m");
                break;
            // default:
            //     break;
        }
        
        $img.each(function(){
            var $this = $(this);
            var pos = getPosition($this.prev("a, button"));

            $this.css("clip", pos.styleClip);
            if($this.closest('li').find('.tab_btn').hasClass('ty02')){
                var src = _plugin.diagramImgSrc["only_p_on2"]
                $this.find('img').attr('src', src);
            }

        });
    }

    function getPosition($el){
        var result = {};

        result.top = $el.position().top;
        result.left = $el.position().left;
        result.bottom = result.top + $el.height();
        result.right = result.left + $el.width();
        result.styleClip = "rect(" + result.top + "px, " + result.right + "px, " + result.bottom + "px, " + result.left + "px)";

        return result;
    }

    // Apply aria properties
    function setAriaAttr(_plugin){
        _plugin.$tabList
            .attr("role", "tablist") // fixed
            .find("li")
            .attr("role", "presentation"); // fixed

        _plugin.$tabListBtn.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "tab", // fixed
                "id": "tab_btn_"+ key, // fixed
                "aria-controls": "tab_panel_"+ key, // fixed
                "aria-selected": false // changeable
            });
        });

        _plugin.$tabPanel.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "region", // fixed
                "id": "tab_panel_"+ key, // fixed
                "aria-labelledby": "tab_btn_"+ key, // fixed
            });
        });
    }

    function setOpenTab(_plugin){
        // Exception, if there is no activation tab
        if(_plugin.activeTab >= _plugin.$tabPanel.length){
            return;
        }

        // Activate tab button
        _plugin.$tabListBtn
            .removeClass("active")
            .attr({
                "aria-selected": false
            })
            .eq(_plugin.activeTab)
            .addClass("active")
            .attr({
                "aria-selected": true
            });

        // Activate tab panel
        _plugin.$tabPanel
            .removeClass("active")
            .eq(_plugin.activeTab)
            .addClass("active");
    }




    this.init();
}
fo.addPlugin(M15_A);







/** M16_A | Product */
function M16_A(el) {
    _proto = M16_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$tabList = this.$el.find(".tab_list");
    this.$tabListBtn = this.$tabList.find(".tab_btn");
    this.$tabPanel = this.$el.find(".tab_panel");

    this.$visualArea = this.$el.find(".visual_img .img_p");
    this.$detailList = this.$el.find(".detail_list");

    this.key = Math.floor(this.$el.offset().top);
    this.activeTab = 0;
    this.mhItems;

    var _this = this; // M16_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var mhTarget = [".md_tit", ".md_txt"];
    var resizeTimer;

    _proto.init = function(){
        //console.log("init:: M16_A")

        // Device type check
        deviceType = checkDeviceType();

        // Set visual img
        this.setVisualImg();

        // Set matchHeight item
        if(mhTarget.length){
            getMhItems(this);
            updateMhItem(this);
        }

        if(this.$tabListBtn.length < 2 || this.$tabPanel.length < 2){
            this.$tabList.remove();
            return;
        }

        // Tab activated on initial load
        if(this.$el.is("[data-active-tab]") && this.data.activeTab >= 0){
            this.activeTab = (this.data.activeTab < this.$tabListBtn.length) ? this.data.activeTab : this.$tabListBtn.length-1;
            this.$el.removeAttr("data-active-tab");
        }

        // Initial tab aria setting
        setAriaAttr(this);
        setOpenTab(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateMhItem(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    _proto.addEvent = function(){
        // Tab button click
        _this.$tabListBtn.on("click", function(){
            _this.activeTab = _this.$tabListBtn.index($(this));
            setOpenTab(_this);
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    // Init Match Height Item
    function getMhItems(_plugin){
        _plugin.mhItems = mhTarget.map(function(target){
            return _plugin.$detailList.find(target);
        });
    }

    // Update Match Height Item
    function updateMhItem(_plugin){
        var idx;
        var len =_plugin.mhItems.length;
        var opt = {
            init: { tbyRow: true, remove: false },
            remove: { tbyRow: false, remove: true }
        }

        switch (deviceType) {
            case "PC":
            case "TABLET":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.init);
                }
                break;
            case "MOBILE":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.remove);
                }
                break;
            // default:
            //     break;
        }
    }
    
    // Apply aria properties
    function setAriaAttr(_plugin){
        _plugin.$tabList
            .attr("role", "tablist") // fixed
            .find("li")
            .attr("role", "presentation"); // fixed

        _plugin.$tabListBtn.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "tab", // fixed
                "id": "tab_btn_"+ key, // fixed
                "aria-controls": "tab_panel_"+ key, // fixed
                "aria-selected": false // changeable
            });
        });

        _plugin.$tabPanel.each(function(index){
            var key = _plugin.key + "_" + index;
            $(this).attr({
                "role": "region", // fixed
                "id": "tab_panel_"+ key, // fixed
                "aria-labelledby": "tab_btn_"+ key, // fixed
            });
        });
    }

    function setOpenTab(_plugin){
        // Exception, if there is no activation tab
        if(_plugin.activeTab >= _plugin.$tabPanel.length){
            return;
        }

        // Activate tab button
        _plugin.$tabListBtn
            .removeClass("active")
            .attr({
                "aria-selected": false
            })
            .eq(_plugin.activeTab)
            .addClass("active")
            .attr({
                "aria-selected": true
            });

        // Activate tab panel
        _plugin.$tabPanel
            .removeClass("active")
            .eq(_plugin.activeTab)
            .addClass("active");
    }

    this.init();
}
fo.addPlugin(M16_A);







/** M17_A | Specifications **/
function M17_A(el) {
    _proto = M17_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$contentTit = this.$el.find(".tit_s");
    this.$detailList = this.$el.find(".detail_list");
    this.$imgArea = this.$detailList.find(".img_p");

    this.mhItems;
    this.imgSize = 0;
    this.switchPoint = 982;

    var _this = this; // M17_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var mhTarget = [".md_tit", ".md_txt"];
    var resizeTimer;

    _proto.init = function(){
        //console.log("init:: M17_A")

        // Device type check
        deviceType = checkDeviceType();

        // Set style based on img size
        if(this.$imgArea.length){
            setImageArea(this);
        }

        // Set matchHeight item
        if(mhTarget.length){
            getMhItems(this);
            updateMhItem(this);
        }

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateMhItem(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }
    
    // Set style based on img size
    function setImageArea(_plugin){
        var success = function(imgInfo){
            _plugin.$imgArea.removeAttr("data-url");
            if(_plugin.imgSize >= imgInfo.width){
                return;
            }
            _plugin.imgSize = imgInfo.width;
            if(_plugin.switchPoint < _plugin.imgSize){
                _plugin.$contentTit.addClass("wide");
                _plugin.$detailList.addClass("wide");
            }
        };

        var error = function(imgInfo){
            _plugin.$imgArea.removeAttr("data-url");
            //console.log("Image error!! ", imgInfo.src);
        }

        _plugin.$imgArea.each(function(){
            getImageSize(_plugin, $(this).attr("data-url"), success, error);
        });
    }

    function getImageSize(_plugin, url, resolveFn, rejectFn) {
        var newImg = new Image();

        newImg.onload = function(){
            if (resolveFn != undefined){
                resolveFn({
                    src: url,
                    width: newImg.width,
                    height: newImg.height
                });
            }
            _plugin.$imgArea.append(newImg).hide().fadeIn(300);
        }

        newImg.onerror = function(){
            rejectFn({
                src: url
            });
            _plugin.$imgArea.parent(".img").remove();
        }
    
        newImg.src = url;
        newImg.alt = "";
    }

    _proto.addEvent = function(){
        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    // Init Match Height Item
    function getMhItems(_plugin){
        _plugin.mhItems = mhTarget.map(function(target){
            return _plugin.$detailList.find(target);
        });
    }

    // Update Match Height Item
    function updateMhItem(_plugin){
        var idx;
        var len =_plugin.mhItems.length;
        var opt = {
            init: { tbyRow: true, remove: false },
            remove: { tbyRow: false, remove: true }
        }

        switch (deviceType) {
            case "PC":
            case "TABLET":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.init);
                }
                break;
            case "MOBILE":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.remove);
                }
                break;
            // default:
            //     break;
        }
    }

    this.init();
}
fo.addPlugin(M17_A);







/*** M21_A | Global Networks 1 ***/
function M21_A(el) {
    _proto = M21_A.prototype;

    var _this = this; // M21_A
    this.$el = el;
    this.data = _this.$el.data();
    
    var $txtList = _this.$el.find(".list");

    _proto.init = function(){
        //console.log("init:: M21_A")

        _this.setControlStyle();
        
    }

    // Set control style
    _proto.setControlStyle = function(){
        var $txtListLi =  $txtList.find('li');
        if($txtListLi.length >= 5){
            $txtList.addClass('len');  
        }
    }
    
    this.init();
}

fo.addPlugin(M21_A);







/** M21_B | Global Networks 2 */
function M21_B(el) {
    _proto = M21_B.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$tabList = this.$el.find(".tab_list");
    this.$tabListBtn = this.$tabList.find(".tab_btn");
    this.$tabPanel = [];

    this.key = Math.floor(this.$el.offset().top);
    this.activeTab = 0;

    var _this = this; // M21_B

    _proto.init = function () {
        //console.log("init:: M21_B")

        if (this.$tabListBtn.length) {
            this.$tabListBtn.each(function () {
                _this.$tabPanel.push(_this.$el.find($(this).attr("href")));
            });
        }

        if (this.$tabListBtn.length < 2 || this.$tabPanel.length < 2) {
            this.$tabList.remove();
            return;
        }

        // Initial tab aria setting
        setAriaAttr(this);
        setOpenTab(this);

        // Event binding
        if (!this.addEventFlag) {
            this.addEventFlag = true;
            this.addEvent();
        }
    };

    _proto.addEvent = function () {
        // Tab button click
        _this.$tabListBtn.on("click", function () {
            _this.activeTab = _this.$tabListBtn.index($(this));
            setOpenTab(_this);
            _this.$tabList.trigger("M21_B.TABLIST.UPDATE");
        });
    };

    // Apply aria properties
    function setAriaAttr(_plugin) {
        _plugin.$tabList
            .attr("role", "tablist") // fixed
            .find("li")
            .attr("role", "presentation"); // fixed

        _plugin.$tabListBtn.each(function (index) {
            var key = _plugin.key + "_" + index;
            $(this).attr({
                role: "tab", // fixed
                id: "tab_btn_" + key, // fixed
                "aria-controls": "tab_panel_" + key, // fixed
                "aria-selected": false, // changeable
            });
        });

        _plugin.$tabPanel.map(function (panel, index) {
            var key = _plugin.key + "_" + index;
            $(panel).attr({
                role: "region", // fixed
                id: "tab_panel_" + key, // fixed
                "aria-labelledby": "tab_btn_" + key, // fixed
            });
        });
    }

    function setOpenTab(_plugin) {
        // Exception, if there is no activation tab
        if (_plugin.activeTab >= _plugin.$tabPanel.length) {
            return;
        }

        // Activate tab button
        _plugin.$tabListBtn
            .removeClass("active")
            .attr({
                "aria-selected": false,
            })
            .eq(_plugin.activeTab)
            .addClass("active")
            .attr({
                "aria-selected": true,
            });

        // Activate tab panel
        var targetId = _plugin.$tabListBtn
            .eq(_plugin.activeTab)
            .attr("aria-controls");

        _plugin.$tabPanel.map(function (panel) {
            if (targetId !== $(panel).attr("id")) {
                $(panel).hide();
            } else {
                $(panel).fadeIn();
            }
        });
    }

    this.init();
}

fo.addPlugin(M21_B);







/** M22_A | Price */
function M22_A(el) {
    _proto = M22_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$priceList = this.$el.find(".price_list");
    this.$tabList = this.$el.find(".tab_list");
    this.$sentinelOneWrap = this.$el.find(".sentinel_one_wrap"); /* 210329 add */

    this.mhItems;

    var _this = this; // M22_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var mhTarget = ["> li > .line", ".mh_item_block", ".mh_item_flex"];
    var resizeTimer;

    _proto.init = function () {
        //console.log("init:: M22_A")

        // Device type check
        deviceType = checkDeviceType();

        // Set matchHeight item
        if (mhTarget.length) {
            getMhItems(this);
            updateMhItem(this);            
        }


        resizeTimer = new Timer(function () {
            var currentDeviceType = checkDeviceType();

            if (deviceType !== currentDeviceType) {
                deviceType = currentDeviceType;
                updateMhItem(_this);
            }
        }, 100);

        // Event binding
        if (!this.addEventFlag) {
            this.addEventFlag = true;
            this.addEvent();
        }
    };

    _proto.addEvent = function () {
        _this.$tabList.on("M21_B.TABLIST.UPDATE", function(){
            updateMhItem(_this);          
        })

        _this.$sentinelOneWrap.find(".tit").matchHeight(); /* 210329 add */

        // Window resize
        $(window).on("resize", function () {
            resizeTimer.start();
        });
    };

    // Device type check
    function checkDeviceType() {
        if (window.innerWidth > 1023) {
            return "PC";
        } else if (window.innerWidth > 600) {
            return "TABLET";
        } else {
            return "MOBILE";
        }
    }

    // Init Match Height Item
    function getMhItems(_plugin) {
        _plugin.mhItems = mhTarget.map(function (target) {
            return _plugin.$priceList.find(target).sort(function (a, b) {
                return $(a).index() - $(b).index();
            });
        });
    }

    // Update Match Height Item
    function updateMhItem(_plugin) {
        var idx;
        var len = _plugin.mhItems.length;
        var opt = {
            init: {
                tbyRow: true,
                remove: false
            },
            remove: {
                tbyRow: false,
                remove: true
            },
        };

        switch (deviceType) {
            case "PC":
            case "TABLET":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.init);
                }
                break;
            case "MOBILE":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.remove);
                }
                break;
                // default:
                //     break;
        }
    }

    this.init();
}

fo.addPlugin(M22_A);







/** M24_A | Catalog List */
function M24_A(el) {
    _proto = M24_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$el.find(".owl-carousel .li");
    this.$pagn = this.$el.find(".owl-pagn");
    
    this.mhItems01;
    this.mhItems02;
    this.mhItems03;

    var _this = this; // M24_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var mhTarget = [".md_tit", ".md_txt", ".name", ".copy"];
    var resizeTimer;

    _proto.init = function(){
        //console.log("init:: M24_A")

        // Device type check
        deviceType = checkDeviceType();

        // Set matchHeight item
        if(mhTarget.length){
            getMhItems(this);
            updateMhItem(this);
        }

        updateCarousel(this);
        updatePagnAria(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarousel(_this);
                updatePagnAria(_this);
                // Set matchHeight item
                if(mhTarget.length){
                    getMhItems(_this);
                    updateMhItem(_this);
                }
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    _proto.addEvent = function(){
        _this.$el.on("M24_A.UPDATE", function(){
            updateMhItem(_this);
        })

        _this.$carouselItem.on("focusin", function(e){
            var currentIndex = _this.$carouselItem.index(e.delegateTarget);
            _this.$carousel.trigger('to.owl.carousel', currentIndex);
            _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
        })
        
        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }

            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            }
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })

        // Window resize && matchHeight after update
        $.fn.matchHeight._afterUpdate = function(event, groups) {
            $(".M24_A").trigger("M24_A.UPDATE");
        }
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function setCarousel(_plugin){
        if(_plugin.$carouselItem.length < 2){
            _plugin.$pagn.hide();
            return;
        }
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            loop: true,
            nav: false,
            dots: false,
            items: 1,
            margin: 0,
            smartSpeed: 500,
            onInitialized: function(e){
                initPagn(e, _plugin);
                setCarouselAria(_plugin);
            },
            onRefreshed: function(e){ // FIREFOX
                setCarouselAria(_plugin);
            },
            onChanged: function(e){
                updatePagn(e, _plugin);
            },
        });
    }

    function updateCarousel(_plugin){
        switch (deviceType) {
            case "PC":
            case "TABLET":
                destroyCarousel(_plugin);
                break;
            case "MOBILE":
                setCarousel(_plugin);
                break;
            // default:
            //     break;
        }
    }
    

    function setCarouselAria(_plugin){
        var $clonedItem = _plugin.$carousel.find('.owl-item.cloned');

        $clonedItem.attr("aria-hidden", true)
        $clonedItem.find("a, button").attr('tabindex', -1); 
    }

    function initPagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);

        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-ed").text(setNum(e.item.count));
    }

    function updatePagn(e, _plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }
        
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex) +" of "+ setNum(e.item.count);
        
        _plugin.$pagn.attr({ "aria-live": "polite", "aria-labelledby": ariaTxt });
        _plugin.$pagn.find('.owl-pagn-bar p').css('width', barWidth + '%');
        _plugin.$pagn.find('.owl-pagn-st').text(setNum(activeIndex));
    }

    function updatePagnAria(_plugin){
        switch (deviceType) {
            case "PC":
            case "TABLET":
                _plugin.$pagn.attr("aria-live","off");
                break;
            case "MOBILE":
                _plugin.$pagn.attr("aria-live","polite");
                break;
            // default:
            //     break;
        }

        _plugin.$pagn.find(".owl-pagn-inner").not("[aria-hidden]") && _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden", true);
    }

    function destroyCarousel(_plugin){
        if(!_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel('destroy');
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    function getMhItems(_plugin){
        var lists = _plugin.$carouselItem;
        var listBlock;
        var target;

        // 4 column
        // PC: When .li is 4 or more
        // TABLET: No case
        // MOBILE: No case
        _plugin.mhItems01 = mhTarget.reduce(function(acc, cur){
            for (var index = 0; index < Math.round(lists.length/4); index++) {
                listBlock = lists.slice( 4 * index, 4 * (index+1) );
                target = listBlock.find(cur);
                if(cur.indexOf(".copy") > -1 || cur.indexOf(".name") > -1){
                    target.sort(function(a,b){
                        return $(a).parents(".item").index() - $(b).parents(".item").index();
                    })
                }
                acc.push(target);
            }
            return acc;
        }, []);
    
        // 2 column
        // PC: No case
        // TABLET: Any case
        // MOBILE: No case
        _plugin.mhItems02 = mhTarget.reduce(function(acc, cur){
            for (var index = 0; index < Math.round(lists.length/2); index++) {
                listBlock = lists.slice( 2 * index, 2 * (index+1) );
                target = listBlock.find(cur);
                if(cur.indexOf(".copy") > -1 || cur.indexOf(".name") > -1){
                    target.sort(function(a,b){
                        return $(a).parents(".item").index() - $(b).parents(".item").index();
                    })
                }
                acc.push(target);
            }
            return acc;
        }, []);
        
        // 1 column
        // PC: When .li is 4 or less
        // TABLET: No case
        // MOBILE: No case
        _plugin.mhItems03 = mhTarget.reduce(function(acc, cur){
            target = lists.find(cur);
            acc.push(target);
            return acc;
        }, []);
    }

    function updateMhItem(_plugin){
        var idx;
        var opt = {
            init: { tbyRow: true, remove: false },
            remove: { tbyRow: false, remove: true }
        }

        switch (deviceType) {
            case "PC":
                if(_plugin.$carouselItem.length < 4){
                    // 4 column remove
                    for (idx = 0; idx < _plugin.mhItems01.length; idx++) {
                        _plugin.mhItems01[idx].matchHeight(opt.remove);
                    }
                    // 2 column remove
                    for (idx = 0; idx < _plugin.mhItems02.length; idx++) {
                        _plugin.mhItems02[idx].matchHeight(opt.remove);
                    }
                    // 1 column init
                    for (idx = 0; idx < _plugin.mhItems03.length; idx++) {
                        _plugin.mhItems03[idx].matchHeight(opt.init);
                    }
                }
                if(_plugin.$carouselItem.length >= 4){
                    // 2 column remove
                    for (idx = 0; idx < _plugin.mhItems02.length; idx++) {
                        _plugin.mhItems02[idx].matchHeight(opt.remove);
                    }
                    // 1 column remove
                    for (idx = 0; idx < _plugin.mhItems03.length; idx++) {
                        _plugin.mhItems03[idx].matchHeight(opt.remove);
                    }
                    // 4 column init
                    for (idx = 0; idx < _plugin.mhItems01.length; idx++) {
                        _plugin.mhItems01[idx].matchHeight(opt.init);
                    }
                }
                break;
            case "TABLET":
                // 4 column remove
                for (idx = 0; idx < _plugin.mhItems01.length; idx++) {
                    _plugin.mhItems01[idx].matchHeight(opt.remove);
                }
                // 1 column remove
                for (idx = 0; idx < _plugin.mhItems03.length; idx++) {
                    _plugin.mhItems03[idx].matchHeight(opt.remove);
                }
                // 2 column init
                for (idx = 0; idx < _plugin.mhItems02.length; idx++) {
                    _plugin.mhItems02[idx].matchHeight(opt.init);
                }
                break;
            case "MOBILE":
                // 1 column remove
                for (idx = 0; idx < _plugin.mhItems03.length; idx++) {
                    _plugin.mhItems03[idx].matchHeight(opt.remove);
                }
                // 2 column init
                for (idx = 0; idx < _plugin.mhItems02.length; idx++) {
                    _plugin.mhItems02[idx].matchHeight(opt.remove);
                }
                // 4 column remove
                for (idx = 0; idx < _plugin.mhItems01.length; idx++) {
                    _plugin.mhItems01[idx].matchHeight(opt.remove);
                }
                break;
            // default:
            //     break;
        }
    }

    this.init();
}
fo.addPlugin(M24_A);







/** Notice | Notice **/
function M25_A(el) {
    _proto = M25_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$toggleList = this.$el.find(".toggle_list");
    this.$toggleItem = this.$toggleList.find(".li");

    this.key = this.$el.offset().top;
    this.onlyExpanded = false; // Only one item open flag
    this.opendIndex = []; // Open item array
    this.closedIndex = []; // Close item array

    var _this = this; // M25_A

    _proto.init = function(){
        //console.log("init:: M25_A")

        // this.onlyExpanded
        if(this.$el.is("[data-only-expanded]")){
            this.onlyExpanded = this.data.onlyExpanded;
            this.$el.removeAttr("data-only-expanded");
        }

        // this.opendIndex
        if(this.$el.is("[data-opend-index]") && typeof(this.data.opendIndex) == "object"){
            this.opendIndex = this.data.opendIndex;
            this.$el.removeAttr("dta-opend-inadex");
        }

        // this.opendIndex: all item open
        if(this.$el.is("[data-opend-all]")){
            this.opendIndex = new Array(this.$toggleItem.length+1).join('0').split('').map(function(a,idx){
                return idx;
            });
            this.$el.removeAttr("data-opend-all");
        }

        // Exception, multiple items open
        if(this.opendIndex.length > 1){
            this.onlyExpanded = false;
        }

        // Initial setting
        setAriaAttr(this);
        setOpenToggle(this);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    _proto.addEvent = function(){
        _this.$toggleList.on("click", ".toggle_btn", function(e){
            e.preventDefault();

            var index = $(this).parent().index();

            // When the toggle button is open
            if($(this).hasClass("active")){
                _this.closedIndex = [index];
                setCloseToggle(_this);
                
                _this.opendIndex.splice(_this.opendIndex.indexOf(index), 1);

                return;
            }

            // When the toggle button is closed
            if(_this.onlyExpanded){
                // Only one item open
                _this.closedIndex = [_this.opendIndex];
                setCloseToggle(_this);

                _this.opendIndex = [index];
                setOpenToggle(_this);
            }else{
                // Multiple items open
                _this.opendIndex.push(index);
                setOpenToggle(_this);
            }

            return;
        });
    }

    // Apply aria properties
    function setAriaAttr(_plugin){
        _plugin.$toggleItem.each(function(index){
            var key = _plugin.key + "_" + index;

            $(this).find(".toggle_btn").attr({
                "id": "toggle_btn_"+ key, // fixed
                "aria-controls": "toggle_cont_"+ key, // fixed
                "aria-expanded": false // changeable
            });

            $(this).find(".toggle_cont").attr({
                "role": "region", // fixed
                "id": "toggle_cont_"+ key, // fixed
                "aria-labelledby": "toggle_btn_"+ key, // fixed
                "aria-hidden": true // changeable
            });
        });
    }

    // Open toggle
    function setOpenToggle(_plugin){
        for (var index = 0; index < _plugin.opendIndex.length; index++) {
            var $item = _plugin.$toggleItem.eq(_plugin.opendIndex[index]);

            $item.find(".toggle_btn").attr("aria-expanded", true).addClass("active");
            $item.find(".toggle_cont").attr("aria-hidden", false).stop().slideDown();
        }
    }

    // Close toggle
    function setCloseToggle(_plugin){
        for (var index = 0; index < _plugin.closedIndex.length; index++) {
            var $item = _plugin.$toggleItem.eq(_plugin.closedIndex[index]);

            $item.find(".toggle_btn").attr("aria-expanded", false).removeClass("active");
            $item.find(".toggle_cont").attr("aria-hidden", true).stop().slideUp();
            
            _plugin.closedIndex.shift();
        }
    }

    this.init();
}
fo.addPlugin(M25_A);







/*** M26_A | Case Study ***/
function M26_A(el) {
    _proto = M26_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$carousel.find(".item");
    this.$carouselTitle = this.$carousel.find(".tit_b");

    this.$navWrap;
    this.$nav;
    this.$pagn = this.$el.find(".owl-pagn");

    var _this = this; // M26_A
    var deviceType; // "PC_LARGE", "PC_SMALL", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";

    _proto.init = function(){
        //console.log("init:: M26_A")

        if(this.$carousel.find(".item").length < 2){
            this.$pagn.hide();
            return;
        }
        
        // Device type check
        deviceType = checkDeviceType();

        this.$pagn.wrap("<div class='navigation'></div>")
        this.$pagn.after("<div class='owl-nav'></div>");

        this.$navWrap = this.$pagn.parent(".navigation");
        this.$nav = this.$pagn.next(".owl-nav");

        setCarousel(this);
        
        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();
    
            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updatePagnWrapPos(_this);
            }
        }, 100);
        
        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    _proto.addEvent = function(){
        //item focus
        _this.$carousel.find(".item").on("focusin", function(e){
            if($(e.target).is(":hover")){
                return;
            }
            
            var itemIndex = _this.$carouselItem.index(e.delegateTarget);
            _this.$carousel.trigger('to.owl.carousel', itemIndex);
            _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
            _this.$el.scrollLeft() != 0 && _this.$el.scrollLeft(0);
        })

        _this.$carousel.find(".visual_img .md_link").on("focus", function(e){
            _this.$el.scrollLeft(0);     
        });

        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }

            if(e.keyCode == 37 || e.keyCode == 39){
                _this.$el.scrollLeft() != 0 && _this.$el.scrollLeft(0);
            }
            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            } 
            
        })

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1190){
            return "PC_LARGE";
        }else if (window.innerWidth > 1023){
            return "PC_SMALL";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    //owl carousel 
    function setCarousel(_plugin){
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            autoWidth:false,
            loop:true,
            nav:true,
            navContainer: _plugin.$nav,
            dots: false,
            items: 1,
            smartSpeed: 750,
            navText: [
                '<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>',
                '<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>'
            ],
            responsive:{
                0:{
                    margin:16,
                },  
                1191:{
                    margin:4,
                }
            },
            onInitialized: function(e){ 
                initPagn(e, _plugin);
                setCarouselAria(_plugin);
                updatePagnWrapPos(_plugin);
                
                _plugin.$carousel.addClass("act");
            },
            onRefreshed: function(e){ //FIREFOX 
                initPagn(e, _plugin);
                setCarouselAria(_plugin);
                updatePagnWrapPos(_plugin);
                
                _plugin.$carousel.addClass("act");
            },
            onChanged: function(e){ 
                updatePagn(e, _plugin);

                _plugin.$carousel.removeClass("act");
            },
            singleItem : true,
            responsiveClass:true
        });

    }

    function setCarouselAria(_plugin){
        var $clonedItem = _plugin.$carousel.find('.owl-item.cloned');

        $clonedItem.attr("aria-hidden", true)
        $clonedItem.find("a, button").attr('tabindex', -1); 
    }

    function initPagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex)+" of "+setNum(e.item.count);
        
        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", barWidth + "%");

        _plugin.$pagn.attr("aria-live","polite");
        _plugin.$pagn.find(".owl-pagn-inner").attr("aria-hidden",true);

        _plugin.$pagn.find(".owl-pagn-st").text(setNum(activeIndex));
        _plugin.$pagn.find(".owl-pagn-ed").text(setNum(e.item.count));
    }

    function updatePagn(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current()) + 1;
        var barWidth = ( 100 / e.item.count ) * activeIndex;
        var ariaTxt = setNum(activeIndex)+" of "+setNum(e.item.count);
        
        if(isNaN(activeIndex)) return;
        
        _plugin.$pagn.attr("aria-labelledby", ariaTxt);
        _plugin.$pagn.find('.owl-pagn-bar p').css('width', barWidth + '%');
        _plugin.$pagn.find('.owl-pagn-st').text(setNum(activeIndex));
    }

    function updatePagnWrapPos(_plugin){
        switch (deviceType) {
            case "PC_LARGE":
                var titlePos = getTitlePos(_plugin);
                _plugin.$navWrap.css("top", titlePos.offset + titlePos.titleHeight);
                break;
            case "PC_SMALL":
            case "TABLET":
            case "MOBILE":
                _plugin.$navWrap.css("top", "");
                break;
            // default:
            //     break;
        }
    }

    function getTitlePos(_plugin){
        var titleHeights = [];
        var offset = -1 * _plugin.$carousel.offset().top;

        _plugin.$carouselTitle.each(function(index, title){
            titleHeights.push( parseInt($(title).height()) );
            if(index === 0) {
                offset += $(title).offset().top;
            }
        })
        
        return {
            offset: offset,
            titleHeight: Math.max.apply(null, titleHeights)
        };
    }

    function setNum(num){
        return num < 10 ? "0" + num : num; 
    }

    this.init();
}

fo.addPlugin(M26_A);







/*** M26_B | Case Study ***/
function M26_B(el) {
    _proto = M26_B.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    var _this = this; // M26_B
    
    this.$carousel = this.$el.find(".owl-carousel");
    this.$carouselItem = this.$carousel.find(".item");
    this.$tabArea = this.$el.find(".tab_slide_area");
    this.$initCont = this.$el.find(".M26_B_cont");

    var lang = $("html").attr("lang") || "en";
   

    _proto.init = function(){
        //console.log("init:: M26_B")       

        if(this.$carousel.find(".item").length < 2){
            this.$tabArea.hide();
            _this.$initCont.addClass('init');  // opacity : 1 추가
            return;
        }

        setCarousel(this);  
        _this.$initCont.addClass('init');  // opacity : 1 추가      
        
        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    _proto.addEvent = function(){
        //item focus
        _this.$carouselItem.on("focusin", function(e){
            if($(e.target).is(":hover")){
                return;
            }

            var itemIndex = _this.$carouselItem.index(e.delegateTarget);
            _this.$carousel.trigger('to.owl.carousel', itemIndex);
            _this.$carousel.children().scrollLeft() != 0 && _this.$carousel.children().scrollLeft(0);
        })

        _this.$tabArea.find(".tab_btn").on("click", function(e){
            e.preventDefault();
            
            var index = $(this).parent().index();           
            _this.$carousel.trigger('to.owl.carousel', index);     
        });

        _this.$carousel.find(".visual_img .md_link").on("focus", function(e){
            _this.$el.scrollLeft(0);     
        });
        
        _this.$el.on("keyup", function(e){
            e.stopPropagation();
            
            if(!_this.$carousel.data("owl.carousel")){
                return;
            }

            if(e.keyCode == 37){
                _this.$carousel.trigger('prev.owl.carousel');
            }else if(e.keyCode == 39){
                _this.$carousel.trigger('next.owl.carousel');
            }
        })
    }

    //owl carousel 
    function setCarousel(_plugin){
        if(_plugin.$carousel.data("owl.carousel")){
            return;
        }

        _plugin.$carousel.owlCarousel({
            stageElement: 'ul',
            itemElement: 'li',
            autoWidth:false,
            loop:true,
            nav:false,
            dots:false,
            items:1,
            smartSpeed:750,
            responsive:{
                0:{
                    margin:16,
                },  
                1191:{
                    margin:4,
                }
            },
            onInitialized: function(e){ 
                setCarouselAria(_plugin);
                
                _plugin.$carousel.addClass("act");
            },
            onRefreshed: function(e){ //FIREFOX            
                setCarouselAria(_plugin);
                
                _plugin.$carousel.addClass("act");
            },
            onChanged: function(e){ 
                updateCarouselAria(e, _plugin);

                _plugin.$carousel.removeClass("act");
            },
            singleItem : true,
            responsiveClass:true
        });

    }

    function setCarouselAria(_plugin){
        var $clonedItem = _plugin.$carousel.find('.owl-item.cloned');

        $clonedItem.attr("aria-hidden", true)
        $clonedItem.find("a, button").attr('tabindex', -1); 
    }

    function updateCarouselAria(e, _plugin){
        var slides = e.relatedTarget;
        var activeIndex = slides.relative(slides.current());       
        
        if(isNaN(activeIndex)) return;
      
        var tabSlide = _plugin.$tabArea.data("plugin").slide;

        _plugin.$tabArea.find(".tab_btn.active").removeClass("active");
        _plugin.$tabArea.find(".tab_btn").eq(activeIndex).addClass("active");

        tabSlide.slideTo(activeIndex);
        if(tabSlide.activeIndex !== 0){
            // 여백 영역만큼 좌측으로 이동
            if($(window).innerWidth() <= 600){
                tabSlide.setWrapperTranslate(tabSlide.translate+30);
            }else if($(window).innerWidth() <= 1023){
                tabSlide.setWrapperTranslate(tabSlide.translate+10);
            }
        }
    }
    
    this.init();
}

fo.addPlugin(M26_B);







/** M28_A | Features **/
function M28_A(el) {
    _proto = M28_A.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.mhItems;

    var _this = this; // M28_A
    var deviceType; // "PC", "TABLET", "MOBILE"
    var mhTarget = [".md_tit", ".md_txt"];
    var resizeTimer;

    _proto.init = function(){
        //console.log("init:: M28_A");

        // Device type check
        deviceType = checkDeviceType();

        // Set matchHeight item
        if(mhTarget.length){
            getMhItems(this);
            updateMhItem(this);
        }

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();
            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateMhItem(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Event
    _proto.addEvent = function(){
        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        })
    }
    
    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }

    function getMhItems(_plugin){
        _plugin.mhItems = mhTarget.map(function(target){
            return _plugin.$el.find(target);
        })
    }

    function updateMhItem(_plugin){
        var idx;
        var len =_plugin.mhItems.length;
        var opt = {
            init: { tbyRow: true, remove: false },
            remove: { tbyRow: false, remove: true }
        }

        switch (deviceType) {
            case "PC":
            case "TABLET":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.init);
                }
                break;
            case "MOBILE":
                for (idx = 0; idx < len; idx++) {
                    _plugin.mhItems[idx].matchHeight(opt.remove);
                }
                break;
            // default:
            //     break;
        }
    }

    this.init();
}

fo.addPlugin(M28_A);







/** MP_all_offerings **/
$(function(){
    if(!$('.MP_all_offerings').length) return;

    var $allOffering = $('.MP_all_offerings');
    var $allOfferingList = $allOffering.find(".MP_all_offerings_cont .list");

    var $indicator = $('.page_indicator02');
    var $indicatorList = $indicator.find('.list');

    page_init();

    $(window).resize(function(){
        if($(window).innerWidth() < 1024) return;

        pageIndOffset();
        scrollEvent02();
    });

    $(window).scroll(function(){
        if($(window).innerWidth() < 1024) return;

        pageIndActive();
        scrollEvent02();
    });

    function pageIndActive(){
        var scrollTop = $(window).scrollTop();
        var $allLink = $indicatorList.find('a');

        $($allOfferingList.get().reverse()).each(function (index, node){
            var $node = $(this);
            var offsetTop = parseInt($node.offset().top) - 170 ;      
    
            if (scrollTop >= offsetTop) {
                var currentPageIndex = $node.attr('data-section');

                $allLink.removeClass('on');

                if(currentPageIndex == "" || currentPageIndex == undefined){ 
                    // $allLink.removeClass('on');
                }else{
                    $allLink.eq(currentPageIndex).addClass('on');
                }
                return false;   
            }
        });
    }

    function pageIndOffset(){
        pageIndActive();
    }

    function page_init(){
        pageIndMake();
        pageIndEvent();
        pageIndOffset();
    }

    function pageIndMake(){
        var key = 0;

        $allOfferingList.each(function(){
            var $this = $(this);

            if($this.attr('data-tit') == "" || $this.attr('data-tit') == undefined){ 
                $this.removeClass('ind_chk02');
                return;
            }

            $this.addClass('ind_chk02').attr("data-section", key).attr("tabindex", 0);
            $indicatorList.append("<a href='#'>"+ $this.attr('data-tit') +"</a>");

            key++;
        });        
    }

    function pageIndEvent(){
        $indicatorList.find("a").click(function(e){
            e.preventDefault();

            var s = $(this).index();
            var t = $allOfferingList.filter('[data-section='+ s +']');
            
            $('html, body').stop().animate({
                scrollTop:$(t).offset().top - 100
            }, 800, function(){
                $(t).get(0).focus({preventScroll:true});
            });
        });
    }

    function scrollEvent02() {
        var scrollEnd = ($(document).height() - $(window).height()) - $('footer').innerHeight();
        if($(window).scrollTop() >= scrollEnd){
            $indicator.removeClass('on');
        } else if(  $(window).scrollTop() <= 200){
            $indicator.removeClass('on');
        }else{
            $indicator.addClass('on');
        }
    }
});







/** Page | 오퍼링 > 고객사례(상세) | MP_customer_detail */
function heroCopy(el) {
    _proto = heroCopy.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;

    this.$visual = this.$el.find(".visual_img img").parent();

    _proto.init = function(){
        //console.log("init:: heroCopy")

        // Set visual img
        this.setVisualImg();
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visual.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }
    
    this.init();
}
fo.addPlugin(heroCopy);







/** Page | 오퍼링 > 고객사례(목록) | MP_customer_list */

/** heroCarousel */
function heroCarousel(el) {
    _proto = heroCarousel.prototype;

    this.$el = el;
    this.data = this.$el.data();
    this.addEventFlag = false;
    
    this.startIndex = 0;
    this.currentIndex = this.startIndex;

    this.$carousel = this.$el.find(".carousel");
    this.$carouselItem = this.$el.find(".carousel .li");
    
    this.$nav = this.$el.find(".owl-nav");
    this.$pagn = this.$el.find(".owl-pagn");

    this.$txtArea = this.$carousel.find(".txt");
    this.$visualArea = this.$carousel.find(".visual_img .img_p, .visual_img .img_m");

    var _this = this;
    var deviceType; // "PC", "TABLET", "MOBILE"
    var resizeTimer;
    var lang = $("html").attr("lang") || "en";
    
    _proto.init = function(){
        //console.log("init:: heroCarousel")

        // Device type check
        deviceType = checkDeviceType();
        
        // Set visual img
        this.setVisualImg();
        // Set visual txt break
        this.setTxtBreak();

        if(this.$carouselItem.length < 2){
            this.$nav.remove();
            this.$pagn.remove();
            return;
        }

        // Set carousel
        setCarousel(this);

        resizeTimer = new Timer(function(){
            var currentDeviceType = checkDeviceType();

            if(deviceType !== currentDeviceType){
                deviceType = currentDeviceType;
                updateCarouselAria(_this);
            }
        }, 100);

        // Event binding 
        if(!this.addEventFlag){
            this.addEventFlag = true;
            this.addEvent();
        }
    }

    // Set visual img
    _proto.setVisualImg = function(){
        this.$visualArea.imgLiquid({
            fill:true,
            horizontalAlign:"center",
            verticalAlign:"center"
        });
    }

    _proto.setTxtBreak = function(){    
        var $title = this.$txtArea.find(".tit_m");
        var $desc = this.$txtArea.find(".tit_desc");

        if($title.find(".md_link").length){
            $title = $title.find(".md_link");
        }

        $title.lettering('lines');
        $title.find("span").wrapInner('<i></i>');

        $desc.wrapInner('<i></i>');
    }

    _proto.addEvent = function(){
        _this.$carouselItem.on({
            focusin: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isPagnToSlide = $(e.relatedTarget).is(_this.$pagn);

                        if(!isPagnToSlide){
                            var currentIndex = _this.$carouselItem.index(e.delegateTarget);
                        }else{
                            var currentIndex = 0;
                            _this.$carouselItem.eq(0).find("a, button").first().focus();
                        }

                        _this.$carousel.trigger("slideTo", [currentIndex, 0, true] );
                        break;
                    // default:
                    //     break;
                }
            },
            focusout: function(e){
                switch (deviceType) {
                    case "PC":
                        // 
                        break;
                    case "TABLET":
                    case "MOBILE":
                        var isSameSequence = $(e.delegateTarget).find(e.relatedTarget).length;
                        var isLastSequence = $(e.delegateTarget).is(_this.$carouselItem.last());
                        
                        if(!isSameSequence && isLastSequence){
                            _this.$pagn.focus();
                        }
                        break;
                    // default:
                    //     break;
                }
            }
        });

        // Window resize
        $(window).on("resize", function(){
            resizeTimer.start();
        }) 
    }

    // Device type check
    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }
    
    function setCarousel(_plugin){
        var $prevBtn = _plugin.$nav.find(".owl-prev");
        var $nextBtn = _plugin.$nav.find(".owl-next");

        $prevBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["prevStr"]).toString()+'</em>');
        $nextBtn.wrapInner('<em class=\"blind\">'+(langSet[lang]["slide"]["nextStr"]).toString()+'</em>');

        _plugin.$carousel.carouFredSel({
            responsive: true,
            height: "variable",
            auto: {
                play: false
            },
            prev: {
                button: $prevBtn
            },
            next: {
                button: $nextBtn
            },
            items: {
                start: _plugin.currentIndex,
                visible: 1,
                height: "variable"
            },
            swipe: {
                onMouse: true,
                onTouch: true
            },
            scroll: {
                fx: "fade",
                duration: 0,
                items: 1,
                onAfter: function(data){
                    _plugin.currentIndex = _plugin.$carouselItem.index(data.items.visible);
                    
                    _plugin.$carouselItem.removeClass("active").eq(_plugin.currentIndex).addClass("active");

                    // Update
                    updatePagn(_plugin);
                    updateCarouselAria(_plugin);
                }
            },
            onCreate: function(){
                _plugin.$pagn.find(".owl-pagn-ed").text(setNum(_plugin.$carouselItem.length));
                _plugin.$carouselItem.removeClass("active").eq(_plugin.currentIndex).addClass("active");

                // Update
                updatePagn(_plugin);
                updateCarouselAria(_plugin);
            }
        });
    }

    function updateCarouselAria(_plugin){
        switch (deviceType) {
            case "PC":
                _plugin.$carouselItem.attr("aria-hidden", true).find("a, button").attr("tabindex", -1);
                _plugin.$carouselItem.eq(_plugin.currentIndex).removeAttr("aria-hidden").find("a, button").removeAttr("tabindex");
                _plugin.$pagn.is("[tabindex]") && _plugin.$pagn.removeAttr("tabindex");
                break;
            case "TABLET":
            case "MOBILE":
                _plugin.$carouselItem.removeAttr("aria-hidden").find("a, button").removeAttr("tabindex");
                _plugin.$pagn.not("[tabindex]") && _plugin.$pagn.attr("tabindex", 0);
                break;
            // default:
            //     break;
        }
    }

    // Update
    function updatePagn(_plugin){
        var width = 100 / _plugin.$carouselItem.length * ( _plugin.currentIndex + 1 );
        
        _plugin.$pagn.find(".owl-pagn-st").text(setNum(_plugin.currentIndex + 1));
        _plugin.$pagn.find(".owl-pagn-bar p").css("width", width + "%");
    }

    function setNum(num){
        return num < 10 ? "0" + num : num;
    }

    this.init();
}

fo.addPlugin(heroCarousel);







/** Page Indicator **/
$(function(){
    if(!$('.page_indicator').length) return;

    var $indicator = $('.page_indicator');

    page_init();

    $(window).resize(pageIndOffset);
    $(window).scroll(pageIndActive);

    function pageIndActive(){
        var scrollTop = $(window).scrollTop();
        var scrollEnd = ($(document).height() - $(window).height()) - $('footer').innerHeight();
        var $indicatorBtn = $('.page_indicator').find("a");

        if(scrollTop >= scrollEnd){
            $indicator.removeClass('on');
        }else if(scrollTop <= 200){
            $indicator.removeClass('on');
        }else{
            if($('.ind_chk').length >= 1 && !$indicator.hasClass("on")){
                $indicator.addClass('on');
            }
        }

        $($('#container .cont:visible').get().reverse()).each(function (index, node){
            var $node = $(this);
            var offsetTop = parseInt($node.offset().top) - $(window).height() / 2 ;      
    
            if (scrollTop >= offsetTop) {
                var currentPageIndex = $node.attr('data-section');
                
                $indicatorBtn.removeClass('on');

                if(currentPageIndex == "" || currentPageIndex == undefined){ 
                    // $indicatorBtn.removeClass('on');
                }else{
                    $indicatorBtn.eq(currentPageIndex).addClass('on');
                }
                // $indicator.attr('data-current-page-index', currentPageIndex);
                return false;   
            }
        });
    }
      
    function pageIndOffset(){
        pageIndActive();
    }
    function page_init(){
        pageIndOffset();
    }
});



/** Floating Action Button : 20.12.30 소스취합 extenstion_ko.js 로 이동 **/







/** Page | 리소스 */
$(function(){
    if(!$('.MP_resource').length) return;
    var deviceType = checkDeviceType();
    var $resourceTab = $('.resource_tab');

    $resourceTab.find(".btn").on("click", function(){
        var $list = $(this).closest(".list");
        if(!$list.hasClass("on")){
            openTab($list, true);
        }else{
            closeTab($list, true);
        }
    })

    $resourceTab.find('.btn_tab_close').on("click", function(){
        var $list = $(this).closest(".list");
        closeTab($list, true);
    });

    $resourceTab.find(".view").on("focusout", function(e){
        if(deviceType === "PC") return;

        var $focusEl = $(e.delegateTarget).find("a,button,input,label,[tabindex=0]");
        
        if(!$(e.delegateTarget).find(e.relatedTarget).length){
            if($(e.target).is($focusEl.first())){
                $focusEl.last().focus();
            }

            if($(e.target).is($focusEl.last())){
                $focusEl.first().focus();
            }
        }
    })

    $resourceTab.find(".view").on("change", "input[type='checkbox']", function(e){
        e.preventDefault();

        var $this = $(this);
        var $tree = $this.closest(".chk_tree");

        var $allCheck = $tree.find("input[type='checkbox'].chk_all");
        var $treeCheck = $tree.find("input[type='checkbox']:not(.chk_all)");

        // 전체 체크박스 변경
        if($this.is( $allCheck )){
            $treeCheck.prop('checked', $this.prop("checked"));
            return;
            }

        // 부모 체크박스 변경
        if($this.closest("div").siblings(".dep").length){
            var $childDep = $this.closest("div").siblings(".dep");
            $childDep.find("input[type='checkbox']").prop('checked',  $this.prop("checked"));
        }

        // 자식 체크박스 변경
        if($this.parents(".dep").length){
            $this.parents(".dep").each(function(index, dep){
                var $parentCheck = $(dep).siblings("div").find("input[type='checkbox']");
                var $childrenChecks = $(dep).find("input[type='checkbox']");

                if(!$this.prop("checked")){
                    $parentCheck.prop('checked',  false);
                }

                if($childrenChecks.filter(":not(:checked)").length === 0){
                    $parentCheck.prop('checked',  true);
                }
            });
        }

        // 최종적으로 전체 체크되었는지 확인
        if($treeCheck.filter(":not(:checked)").length === 0){
            $allCheck.prop('checked',  true);
        }else{
            $allCheck.prop('checked',  false);
        }
    })

    $(document).ready(function(){
        updateTab();
    });

    $(window).resize(function(){
        var currentDeviceType = checkDeviceType();

        if(deviceType !== currentDeviceType){
            deviceType = currentDeviceType;
            updateTab();
        }
    });

    function updateTab(){
        $resourceTab.find(".list").each(function(){
            if(deviceType !== "PC"){
                closeTab($(this), false);
                $(this).find('.tit').attr('tabindex', 0);
            }else{
                openTab($(this), false);
                $(this).find('.tit').removeAttr('tabindex');
            }
        });
    }

    function openTab($tabWrap, isFocusMove){
        $tabWrap.addClass("on");

        if(!$tabWrap.find('.scroll-wrapper').length){
            $tabWrap.find('.scrollbar-inner').scrollbar();
        }

        if(deviceType !== "PC"){
            $("body").addClass("hid_s");
            isFocusMove && $tabWrap.find('.tit').focus();
        }

    }

    function closeTab($tabWrap, isFocusMove){
        $tabWrap.removeClass("on");
        $("body").removeClass("hid_s");

        if(isFocusMove){
            $tabWrap.find('.btn').focus();
        }
    }

    function checkDeviceType(){
        if (window.innerWidth > 1023){
            return "PC";
        }else if(window.innerWidth > 600){
            return "TABLET";
        }else{
            return "MOBILE";
        }
    }
});

// resource_tab, btn_tab_close, chkAll, chk 삭제 불가능!
// html onclick으로 이벤트 바인딩 되어있음
// 해당 기능은 상단에 구현됨
function resource_tab(obj){}
function btn_tab_close(obj){}
function chkAll(obj){}
function chk(obj){}

